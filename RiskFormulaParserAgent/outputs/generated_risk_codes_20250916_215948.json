[
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "本年企业营业收入增长超过20%，应收账款周转率高于行业总体样本中85%的企业。（模型公式编号：191101030）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        revenue_growth_rate = None\n        enterprise_receivables_turnover = None\n        industry_receivables_turnover = None\n        \n        # 遍历model_items提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', '')\n            \n            # 跳过空值\n            if not value_2024 or value_2024 == '':\n                continue\n                \n            try:\n                numeric_value = float(value_2024)\n            except (ValueError, TypeError):\n                continue\n            \n            # 提取企业营业收入增长率\n            if '营业收入增长率' in item_name and item_type == '企业':\n                revenue_growth_rate = numeric_value\n            \n            # 提取企业应收账款周转率\n            if '应收票据、应收账款、应收款项融资及合同资产周转率' in item_name and item_type == '企业':\n                enterprise_receivables_turnover = numeric_value\n            \n            # 提取行业应收账款周转率（直接使用行业值作为85分位数）\n            if '应收票据、应收账款、应收款项融资及合同资产周转率' in item_name and item_type == '行业':\n                industry_receivables_turnover = numeric_value\n        \n        # 检查数据是否完整\n        if revenue_growth_rate is None or enterprise_receivables_turnover is None or industry_receivables_turnover is None:\n            return False\n        \n        # 验证风险条件\n        condition1 = revenue_growth_rate > 20  # 本年企业营业收入增长率 > 20%\n        condition2 = enterprise_receivables_turnover > industry_receivables_turnover  # 企业应收账款周转率 > 行业值（作为85分位数）\n        \n        # 两个条件都满足时返回True（存在风险）\n        return condition1 and condition2\n        \n    except Exception as e:\n        # 发生任何异常时返回False\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "本年企业“每元固定资产提供的营业收入”超过上年的1.2倍，固定资产减少不到10%，营业收入增长超过20%。（模型公式编号：191101080）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n            \n        # 提取所需数据\n        current_revenue_per_asset = None\n        previous_revenue_per_asset = None\n        asset_growth_rate = None\n        revenue_growth_rate = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_name == '每元固定资产及使用权资产提供的营业收入' and item_type == '企业':\n                current_revenue_per_asset = float(item.get('2024', 0))\n                previous_revenue_per_asset = float(item.get('2023', 0))\n            \n            elif item_name == '固定资产及使用权资产增长率' and item_type == '企业':\n                asset_growth_rate = float(item.get('2024', 0))\n            \n            elif item_name == '营业收入增长率' and item_type == '企业':\n                revenue_growth_rate = float(item.get('2024', 0))\n        \n        # 检查数据是否完整\n        if None in [current_revenue_per_asset, previous_revenue_per_asset, asset_growth_rate, revenue_growth_rate]:\n            return False\n        \n        # 验证风险条件\n        condition1 = current_revenue_per_asset > previous_revenue_per_asset * 1.2\n        condition2 = asset_growth_rate > -10\n        condition3 = revenue_growth_rate > 20\n        \n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, KeyError):\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业营业收入增长超过20%，且大于销售商品和提供劳务收到的现金增长率，同时其差额超过行业均值的3倍。（模型公式编号：191101002）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 从data_dict中获取model_items\n        model_items = data_dict.get('model_items', [])\n        \n        # 初始化所需变量\n        enterprise_revenue_growth_2024 = None\n        industry_revenue_growth_2024 = None\n        enterprise_cash_growth_2024 = None\n        industry_cash_growth_2024 = None\n        \n        # 遍历model_items提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', None)\n            \n            if value_2024 is None:\n                continue\n                \n            try:\n                value_2024 = float(value_2024)\n            except (ValueError, TypeError):\n                continue\n                \n            if item_name == '营业收入增长率':\n                if item_type == '企业':\n                    enterprise_revenue_growth_2024 = value_2024\n                elif item_type == '行业':\n                    industry_revenue_growth_2024 = value_2024\n            \n            elif item_name == '销售商品、提供劳务收到的现金增长率':\n                if item_type == '企业':\n                    enterprise_cash_growth_2024 = value_2024\n                elif item_type == '行业':\n                    industry_cash_growth_2024 = value_2024\n        \n        # 检查所有必需数据是否都存在\n        if (enterprise_revenue_growth_2024 is None or \n            industry_revenue_growth_2024 is None or \n            enterprise_cash_growth_2024 is None):\n            return False\n        \n        # 验证风险条件\n        condition1 = enterprise_revenue_growth_2024 > 20\n        condition2 = enterprise_revenue_growth_2024 > enterprise_cash_growth_2024\n        condition3 = (enterprise_revenue_growth_2024 - enterprise_cash_growth_2024) > (3 * industry_revenue_growth_2024)\n        \n        # 所有条件都满足时返回True（存在风险）\n        return condition1 and condition2 and condition3\n        \n    except Exception as e:\n        # 发生任何异常时返回False\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年行业营业收入增长率高于销售商品、提供劳务收到的现金增长率，且其差额和上年比扩大；同时，本年企业营业收入增长率高于销售商品、提供劳务收到的现金增长率且和上年比差异扩大；且企业本年营业收入增长率和销售商品、提供劳务收到的现金增长率的差额比行业高5个百分点以上。（模型公式编号：191101018）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        model_items = data_dict.get('model_items', [])\n        \n        # 提取所需数据\n        enterprise_revenue_growth_2024 = None\n        enterprise_revenue_growth_2023 = None\n        enterprise_cash_growth_2024 = None\n        enterprise_cash_growth_2023 = None\n        industry_revenue_growth_2024 = None\n        industry_revenue_growth_2023 = None\n        industry_cash_growth_2024 = None\n        industry_cash_growth_2023 = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_name == '营业收入增长率' and item_type == '企业':\n                enterprise_revenue_growth_2024 = float(item.get('2024', 0))\n                enterprise_revenue_growth_2023 = float(item.get('2023', 0))\n            elif item_name == '销售商品、提供劳务收到的现金增长率' and item_type == '企业':\n                enterprise_cash_growth_2024 = float(item.get('2024', 0))\n                enterprise_cash_growth_2023 = float(item.get('2023', 0))\n            elif item_name == '营业收入增长率' and item_type == '行业':\n                industry_revenue_growth_2024 = float(item.get('2024', 0))\n                industry_revenue_growth_2023 = float(item.get('2023', 0))\n            elif item_name == '销售商品、提供劳务收到的现金增长率' and item_type == '行业':\n                industry_cash_growth_2024 = float(item.get('2024', 0))\n                industry_cash_growth_2023 = float(item.get('2023', 0))\n        \n        # 检查数据完整性\n        if (enterprise_revenue_growth_2024 is None or enterprise_revenue_growth_2023 is None or\n            enterprise_cash_growth_2024 is None or enterprise_cash_growth_2023 is None or\n            industry_revenue_growth_2024 is None or industry_revenue_growth_2023 is None or\n            industry_cash_growth_2024 is None or industry_cash_growth_2023 is None):\n            return False\n        \n        # 验证条件1: 本年行业营业收入增长率 > 行业销售商品、提供劳务收到的现金增长率\n        condition1 = industry_revenue_growth_2024 > industry_cash_growth_2024\n        \n        # 验证条件2: (本年行业营业收入增长率 - 行业销售商品、提供劳务收到的现金增长率) > (上年行业营业收入增长率 - 上年行业销售商品、提供劳务收到的现金增长率)\n        industry_diff_2024 = industry_revenue_growth_2024 - industry_cash_growth_2024\n        industry_diff_2023 = industry_revenue_growth_2023 - industry_cash_growth_2023\n        condition2 = industry_diff_2024 > industry_diff_2023\n        \n        # 验证条件3: 本年企业营业收入增长率 > 企业销售商品、提供劳务收到的现金增长率\n        condition3 = enterprise_revenue_growth_2024 > enterprise_cash_growth_2024\n        \n        # 验证条件4: (本年企业营业收入增长率 - 企业销售商品、提供劳务收到的现金增长率) > (上年企业营业收入增长率 - 上年企业销售商品、提供劳务收到的现金增长率)\n        enterprise_diff_2024 = enterprise_revenue_growth_2024 - enterprise_cash_growth_2024\n        enterprise_diff_2023 = enterprise_revenue_growth_2023 - enterprise_cash_growth_2023\n        condition4 = enterprise_diff_2024 > enterprise_diff_2023\n        \n        # 验证条件5: (本年企业营业收入增长率 - 企业销售商品、提供劳务收到的现金增长率) - (本年行业营业收入增长率 - 行业销售商品、提供劳务收到的现金增长率) > 5\n        condition5 = (enterprise_diff_2024 - industry_diff_2024) > 5\n        \n        # 所有条件必须同时满足才存在风险\n        return condition1 and condition2 and condition3 and condition4 and condition5\n        \n    except (ValueError, TypeError, AttributeError, KeyError):\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业应收账款周转率降低，存货周转率提高，营业收入增长超过20%。（模型公式编号：191101035）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 从data_dict中获取model_items\n        model_items = data_dict.get('model_items', [])\n        \n        # 初始化所需变量\n        ar_turnover_2023 = None\n        ar_turnover_2024 = None\n        inventory_turnover_2023 = None\n        inventory_turnover_2024 = None\n        revenue_growth_2024 = None\n        \n        # 遍历model_items提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            # 只处理企业类型的数据\n            if item_type != '企业':\n                continue\n                \n            # 提取应收账款周转率数据\n            if '应收票据、应收账款、应收款项融资及合同资产周转率' in item_name:\n                ar_turnover_2023 = float(item.get('2023', 0))\n                ar_turnover_2024 = float(item.get('2024', 0))\n            \n            # 提取存货周转率数据\n            elif '存货周转率' in item_name:\n                inventory_turnover_2023 = float(item.get('2023', 0))\n                inventory_turnover_2024 = float(item.get('2024', 0))\n            \n            # 提取营业收入增长率数据\n            elif '营业收入增长率' in item_name:\n                revenue_growth_2024 = float(item.get('2024', 0))\n        \n        # 检查所有必需数据是否都存在\n        if (ar_turnover_2023 is None or ar_turnover_2024 is None or \n            inventory_turnover_2023 is None or inventory_turnover_2024 is None or \n            revenue_growth_2024 is None):\n            return False\n        \n        # 验证风险条件\n        # 1. 本年应收账款周转率降低\n        ar_turnover_decreased = ar_turnover_2024 < ar_turnover_2023\n        \n        # 2. 存货周转率提高\n        inventory_turnover_increased = inventory_turnover_2024 > inventory_turnover_2023\n        \n        # 3. 营业收入增长率超过20%\n        revenue_growth_exceeds = revenue_growth_2024 > 20\n        \n        # 所有条件同时满足时存在风险\n        risk_exists = ar_turnover_decreased and inventory_turnover_increased and revenue_growth_exceeds\n        \n        return risk_exists\n        \n    except (ValueError, TypeError, KeyError, AttributeError):\n        # 处理数据转换错误、类型错误、键错误等异常情况\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业股本较上年无变动，长期股权投资变动不超过5%，营业收入增长超过30%。（模型公式编号：191101112）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 提取所需指标的企业数据\n        equity_growth = None\n        long_term_investment_growth = None\n        revenue_growth = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_type == '企业':\n                if item_name == '股本增长率':\n                    equity_growth = item.get('2024')\n                elif item_name == '长期股权投资增长率':\n                    long_term_investment_growth = item.get('2024')\n                elif item_name == '营业收入增长率':\n                    revenue_growth = item.get('2024')\n        \n        # 检查数据完整性\n        if equity_growth is None or long_term_investment_growth is None or revenue_growth is None:\n            return False\n        \n        # 转换为浮点数\n        equity_growth_val = float(equity_growth)\n        long_term_investment_growth_val = float(long_term_investment_growth)\n        revenue_growth_val = float(revenue_growth)\n        \n        # 验证三个条件是否同时满足\n        condition1 = abs(equity_growth_val - 0.00) < 0.001  # 股本较上年无变动\n        condition2 = abs(long_term_investment_growth_val) <= 5.00  # 长期股权投资变动不超过5%\n        condition3 = revenue_growth_val > 30.00  # 营业收入增长超过30%\n        \n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, AttributeError):\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "关联方占用资金",
    "risk_description": "本年企业预付账款增长超过50%，且占流动资产比重高于行业总体样本中85%的企业。（模型公式编号：200301004）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据\n        prepayment_growth_rate = None\n        prepayment_current_ratio = None\n        industry_ratio = None\n        \n        for item in model_items:\n            if item['项目名称'] == '预付款项增长率' and item['类型'] == '企业':\n                prepayment_growth_rate = float(item['2024'])\n            elif item['项目名称'] == '预付款项占流动资产合计比(%)':\n                if item['类型'] == '企业':\n                    prepayment_current_ratio = float(item['2024'])\n                elif item['类型'] == '行业':\n                    industry_ratio = float(item['2024'])\n        \n        # 检查数据完整性\n        if prepayment_growth_rate is None or prepayment_current_ratio is None or industry_ratio is None:\n            return False\n        \n        # 验证风险条件\n        condition1 = prepayment_growth_rate > 50.0\n        condition2 = prepayment_current_ratio > industry_ratio\n        \n        return condition1 and condition2\n        \n    except (ValueError, TypeError, KeyError):\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "货币资金错报",
    "risk_description": "本年企业货币资金超过“短长期债务”的5倍，股本无变动或增长不到1%，资本公积无变动或增长不到5%。（模型公式编号：191101103）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据\n        data_map = {}\n        for item in model_items:\n            name = item.get('项目名称')\n            if name in ['货币资金', '短长期债务', '股本增长率', '资本公积增长率']:\n                data_map[name] = item\n        \n        # 检查数据完整性\n        required_fields = ['货币资金', '短长期债务', '股本增长率', '资本公积增长率']\n        for field in required_fields:\n            if field not in data_map:\n                return False\n        \n        # 获取2024年数据\n        cash = float(data_map['货币资金'].get('2024', '0').replace(',', ''))\n        debt = float(data_map['短长期债务'].get('2024', '0').replace(',', ''))\n        equity_growth = float(data_map['股本增长率'].get('2024', '0'))\n        capital_reserve_growth = float(data_map['资本公积增长率'].get('2024', '0'))\n        \n        # 验证风险条件\n        condition1 = cash > 5 * debt\n        condition2 = equity_growth <= 1.0\n        condition3 = capital_reserve_growth <= 5.0\n        \n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, KeyError, AttributeError):\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "违规资金收付",
    "risk_description": "本年企业银行手续费（财务费用-利息费用+利息收入，未考虑汇兑损益影响）占经营活动现金流出小计、投资活动现金流出小计及筹资活动现金流出小计三项之和的比例超过0.5%。（模型公式编号：191101089）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        financial_expense = None\n        interest_expense = None\n        interest_income = None\n        operating_outflow = None\n        investing_outflow = None\n        financing_outflow = None\n        \n        # 提取2024年企业数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', '')\n            \n            # 只处理企业类型的数据\n            if item_type != '企业':\n                continue\n                \n            # 转换数值格式（去除逗号）\n            try:\n                numeric_value = float(str(value_2024).replace(',', '')) if value_2024 else None\n            except (ValueError, TypeError):\n                numeric_value = None\n                \n            if item_name == '财务费用':\n                financial_expense = numeric_value\n            elif item_name == '利息费用':\n                interest_expense = numeric_value\n            elif item_name == '利息收入':\n                interest_income = numeric_value\n            elif item_name == '经营活动现金流出小计':\n                operating_outflow = numeric_value\n            elif item_name == '投资活动现金流出小计':\n                investing_outflow = numeric_value\n            elif item_name == '筹资活动现金流出小计':\n                financing_outflow = numeric_value\n        \n        # 检查所有必需数据是否都存在\n        if None in [financial_expense, interest_expense, interest_income, \n                   operating_outflow, investing_outflow, financing_outflow]:\n            return False\n        \n        # 计算银行手续费（财务费用 - 利息费用 + 利息收入）\n        bank_fee = financial_expense - interest_expense + interest_income\n        \n        # 计算现金流出总额\n        total_cash_outflow = operating_outflow + investing_outflow + financing_outflow\n        \n        # 检查分母是否为0\n        if total_cash_outflow == 0:\n            return False\n        \n        # 计算银行手续费占比\n        bank_fee_ratio = bank_fee / total_cash_outflow\n        \n        # 判断风险条件：占比 > 0.5%\n        risk_condition = bank_fee_ratio > 0.005\n        \n        return risk_condition\n        \n    except Exception as e:\n        # 处理任何异常情况，返回False\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "违规资金收付",
    "risk_description": "本年企业其他流动资产增长超过40%，且占资产总计的比重超过行业总体样本中85%的企业。（模型公式编号：191101083）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 从data_dict中获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        enterprise_growth_rate_2024 = None\n        enterprise_ratio_2024 = None\n        industry_ratio_2024 = None\n        \n        # 遍历model_items提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', '')\n            \n            # 转换为数值类型\n            try:\n                numeric_value = float(value_2024) if value_2024 != '' else None\n            except (ValueError, TypeError):\n                numeric_value = None\n            \n            # 提取企业本年其他流动资产增长率\n            if item_name == '其他流动资产增长率' and item_type == '企业':\n                enterprise_growth_rate_2024 = numeric_value\n            \n            # 提取企业本年其他流动资产占资产总计比(%)\n            elif item_name == '其他流动资产占资产总计比(%)' and item_type == '企业':\n                enterprise_ratio_2024 = numeric_value\n            \n            # 提取行业本年其他流动资产占资产总计比(%)\n            elif item_name == '其他流动资产占资产总计比(%)' and item_type == '行业':\n                industry_ratio_2024 = numeric_value\n        \n        # 检查数据是否完整\n        if (enterprise_growth_rate_2024 is None or \n            enterprise_ratio_2024 is None or \n            industry_ratio_2024 is None):\n            return False\n        \n        # 验证风险条件\n        # 条件1: 本年其他流动资产增长率 > 40%\n        condition1 = enterprise_growth_rate_2024 > 40.0\n        \n        # 条件2: 本年其他流动资产占资产总计比(%) > 行业85%分位数\n        # 根据要求，直接使用行业类型的数据点值作为85%分位数\n        condition2 = enterprise_ratio_2024 > industry_ratio_2024\n        \n        # 两个条件都满足时返回True（存在风险）\n        return condition1 and condition2\n        \n    except Exception as e:\n        # 处理所有可能的异常情况\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "违规资金收付",
    "risk_description": "本年企业其他流动资产占流动资产合计的比重超过15%。（模型公式编号：191101100）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 从data_dict中获取model_items\n        model_items = data_dict.get('model_items', [])\n        \n        # 查找企业类型的数据项\n        enterprise_item = None\n        for item in model_items:\n            if item.get('类型') == '企业':\n                enterprise_item = item\n                break\n        \n        # 如果找不到企业数据项，返回False\n        if enterprise_item is None:\n            return False\n        \n        # 获取2024年的数据\n        value_2024 = enterprise_item.get('2024')\n        \n        # 检查数据是否存在\n        if value_2024 is None:\n            return False\n        \n        # 将字符串转换为浮点数\n        ratio = float(value_2024)\n        \n        # 检查比例是否超过15%\n        if ratio > 15.0:\n            return True\n        else:\n            return False\n            \n    except (ValueError, TypeError, KeyError):\n        # 处理数据转换错误、类型错误或键错误\n        return False\n    except Exception as e:\n        # 处理其他所有异常\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "违规资金收付",
    "risk_description": "以前少计、本年多计成本或费用",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 检查数据是否足够\n        if len(model_items) < 2:\n            return False\n        \n        # 提取利息费用和债务数据\n        interest_expense_data = {}\n        debt_data = {}\n        \n        for item in model_items:\n            name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2023 = item.get('2023', '0')\n            value_2024 = item.get('2024', '0')\n            \n            # 清理数据并转换为浮点数\n            def clean_value(val):\n                if isinstance(val, str):\n                    return float(val.replace(',', '').strip())\n                elif isinstance(val, (int, float)):\n                    return float(val)\n                else:\n                    return 0.0\n            \n            if name == '利息费用':\n                interest_expense_data = {\n                    '2023': clean_value(value_2023),\n                    '2024': clean_value(value_2024)\n                }\n            elif name == '短长期债务':\n                debt_data = {\n                    '2023': clean_value(value_2023),\n                    '2024': clean_value(value_2024)\n                }\n        \n        # 检查必要数据是否存在\n        if not interest_expense_data or not debt_data:\n            return False\n        \n        # 计算变动率\n        interest_growth_rate = (interest_expense_data['2024'] - interest_expense_data['2023']) / interest_expense_data['2023'] if interest_expense_data['2023'] != 0 else 0\n        debt_change_rate = (debt_data['2024'] - debt_data['2023']) / debt_data['2023'] if debt_data['2023'] != 0 else 0\n        \n        # 计算利息费用占债务比例\n        interest_debt_ratio_2023 = interest_expense_data['2023'] / debt_data['2023'] if debt_data['2023'] != 0 else 0\n        interest_debt_ratio_2024 = interest_expense_data['2024'] / debt_data['2024'] if debt_data['2024'] != 0 else 0\n        \n        # 应用风险判断条件\n        condition1 = interest_growth_rate > 0  # 利息费用同比增长\n        condition2 = debt_change_rate < 0  # 债务规模同比下降\n        condition3 = interest_debt_ratio_2024 > interest_debt_ratio_2023 * 1.2  # 利息费用占债务比例异常升高（超过20%）\n        condition4 = (interest_growth_rate > 0 and debt_change_rate < 0)  # 利息费用增加但债务减少\n        \n        # 综合判断是否存在风险\n        risk_exists = condition1 and condition2 and condition3 and condition4\n        \n        return risk_exists\n        \n    except Exception as e:\n        # 处理所有可能的异常情况\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "违规资金收付",
    "risk_description": "本年企业利息费用占“短长期债务”平均余额的比例比上年提高了3个百分点以上。（模型公式编号：191101085）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items列表\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取企业数据和行业数据\n        enterprise_data = {}\n        industry_data = {}\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2023 = item.get('2023', None)\n            value_2024 = item.get('2024', None)\n            \n            if item_type == '企业':\n                enterprise_data[item_name] = {\n                    '2023': float(value_2023) if value_2023 not in [None, ''] else None,\n                    '2024': float(value_2024) if value_2024 not in [None, ''] else None\n                }\n            elif item_type == '行业':\n                industry_data[item_name] = {\n                    '2023': float(value_2023) if value_2023 not in [None, ''] else None,\n                    '2024': float(value_2024) if value_2024 not in [None, ''] else None\n                }\n        \n        # 检查所需数据是否存在\n        required_items = [\n            '利息费用', '短期债务', '长期债务', '债务平均余额',\n            '本年利息费用', '上年利息费用', '本年短期债务期初余额', '本年短期债务期末余额',\n            '本年长期债务期初余额', '本年长期债务期末余额', '上年短期债务期初余额',\n            '上年短期债务期末余额', '上年长期债务期初余额', '上年长期债务期末余额'\n        ]\n        \n        # 检查企业数据是否完整\n        for item in required_items:\n            if item not in enterprise_data:\n                return False\n            if enterprise_data[item]['2023'] is None or enterprise_data[item]['2024'] is None:\n                return False\n        \n        # 计算本年短期债务平均余额\n        current_short_term_debt_avg = (enterprise_data['本年短期债务期初余额']['2024'] + \n                                      enterprise_data['本年短期债务期末余额']['2024']) / 2\n        \n        # 计算本年长期债务平均余额\n        current_long_term_debt_avg = (enterprise_data['本年长期债务期初余额']['2024'] + \n                                     enterprise_data['本年长期债务期末余额']['2024']) / 2\n        \n        # 计算上年短期债务平均余额\n        previous_short_term_debt_avg = (enterprise_data['上年短期债务期初余额']['2023'] + \n                                       enterprise_data['上年短期债务期末余额']['2023']) / 2\n        \n        # 计算上年长期债务平均余额\n        previous_long_term_debt_avg = (enterprise_data['上年长期债务期初余额']['2023'] + \n                                      enterprise_data['上年长期债务期末余额']['2023']) / 2\n        \n        # 获取本年利息费用和上年利息费用\n        current_interest_expense = enterprise_data['本年利息费用']['2024']\n        previous_interest_expense = enterprise_data['上年利息费用']['2023']\n        \n        # 计算本年利息费用占比\n        current_ratio = current_interest_expense / (current_short_term_debt_avg + current_long_term_debt_avg)\n        \n        # 计算上年利息费用占比\n        previous_ratio = previous_interest_expense / (previous_short_term_debt_avg + previous_long_term_debt_avg)\n        \n        # 判断风险条件：本年占比比上年提高了3个百分点以上\n        risk_condition = (current_ratio - previous_ratio) > 0.03\n        \n        return risk_condition\n        \n    except (KeyError, TypeError, ValueError, ZeroDivisionError):\n        return False"
  },
  {
    "company_name": "浙江联翔智能家居股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "本年企业“每元工资提供的营业收入”比前二年均值高1.2倍，营业收入增长超过20%。（模型公式编号：191101056）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        model_items = data_dict['model_items']\n        \n        # 提取所需数据\n        wage_revenue_data = None\n        revenue_growth_data = None\n        \n        for item in model_items:\n            if item['项目名称'] == '每元工资提供的营业收入' and item['类型'] == '企业':\n                wage_revenue_data = item\n            elif item['项目名称'] == '营业收入增长率' and item['类型'] == '企业':\n                revenue_growth_data = item\n        \n        # 检查数据是否存在\n        if wage_revenue_data is None or revenue_growth_data is None:\n            return False\n        \n        # 获取2024年数据\n        wage_revenue_2024 = float(wage_revenue_data['2024'])\n        revenue_growth_2024 = float(revenue_growth_data['2024'])\n        \n        # 获取2022和2023年数据（如果存在）\n        wage_revenue_2022 = float(wage_revenue_data['2022']) if '2022' in wage_revenue_data else None\n        wage_revenue_2023 = float(wage_revenue_data['2023']) if '2023' in wage_revenue_data else None\n        \n        # 检查是否有足够的历史数据计算前二年均值\n        if wage_revenue_2022 is None or wage_revenue_2023 is None:\n            return False\n        \n        # 计算前二年均值\n        prev_two_years_avg = (wage_revenue_2022 + wage_revenue_2023) / 2\n        \n        # 验证条件1：本年每元工资提供的营业收入 > 前二年均值 × 1.2\n        condition1 = wage_revenue_2024 > prev_two_years_avg * 1.2\n        \n        # 验证条件2：本年营业收入增长率 > 20%\n        condition2 = revenue_growth_2024 > 20.0\n        \n        # 两个条件都满足时存在风险\n        return condition1 and condition2\n        \n    except (KeyError, ValueError, TypeError, ZeroDivisionError):\n        return False"
  },
  {
    "company_name": "浙江联翔智能家居股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业营业收入增长超过20%，且大于销售商品和提供劳务收到的现金增长率，同时其差额超过行业均值的3倍。（模型公式编号：191101002）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 从data_dict中获取model_items\n        model_items = data_dict.get('model_items', [])\n        \n        # 提取所需数据\n        enterprise_revenue_growth = None\n        enterprise_cash_growth = None\n        industry_revenue_growth = None\n        industry_cash_growth = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', None)\n            \n            if value_2024 is None:\n                continue\n                \n            try:\n                value = float(value_2024)\n            except (ValueError, TypeError):\n                continue\n                \n            if item_name == '营业收入增长率':\n                if item_type == '企业':\n                    enterprise_revenue_growth = value\n                elif item_type == '行业':\n                    industry_revenue_growth = value\n            \n            elif item_name == '销售商品、提供劳务收到的现金增长率':\n                if item_type == '企业':\n                    enterprise_cash_growth = value\n                elif item_type == '行业':\n                    industry_cash_growth = value\n        \n        # 检查数据是否完整\n        if any(x is None for x in [enterprise_revenue_growth, enterprise_cash_growth, \n                                  industry_revenue_growth, industry_cash_growth]):\n            return False\n        \n        # 验证风险条件\n        condition1 = enterprise_revenue_growth > 20  # 营业收入增长超过20%\n        condition2 = enterprise_revenue_growth > enterprise_cash_growth  # 大于现金增长率\n        condition3 = (enterprise_revenue_growth - enterprise_cash_growth) > 3 * (industry_revenue_growth - industry_cash_growth)  # 差额超过行业均值的3倍\n        \n        # 所有条件同时满足时返回True\n        return condition1 and condition2 and condition3\n        \n    except Exception as e:\n        return False"
  },
  {
    "company_name": "浙江联翔智能家居股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业应收账款周转率降低，存货周转率提高，营业收入增长超过20%。（模型公式编号：191101035）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型数据项\n        model_items = data_dict.get('model_items', [])\n        \n        # 初始化所需变量\n        ar_turnover_2023 = None\n        ar_turnover_2024 = None\n        inventory_turnover_2023 = None\n        inventory_turnover_2024 = None\n        revenue_growth_2024 = None\n        \n        # 遍历数据项提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2023 = item.get('2023')\n            value_2024 = item.get('2024')\n            \n            # 只处理企业类型的数据\n            if item_type != '企业':\n                continue\n                \n            # 提取应收账款周转率数据\n            if '应收票据、应收账款、应收款项融资及合同资产周转率' in item_name:\n                if value_2023 and value_2023 != '':\n                    ar_turnover_2023 = float(value_2023)\n                if value_2024 and value_2024 != '':\n                    ar_turnover_2024 = float(value_2024)\n            \n            # 提取存货周转率数据\n            elif '存货周转率' in item_name:\n                if value_2023 and value_2023 != '':\n                    inventory_turnover_2023 = float(value_2023)\n                if value_2024 and value_2024 != '':\n                    inventory_turnover_2024 = float(value_2024)\n            \n            # 提取营业收入增长率数据\n            elif '营业收入增长率' in item_name:\n                if value_2024 and value_2024 != '':\n                    revenue_growth_2024 = float(value_2024)\n        \n        # 检查数据完整性\n        if (ar_turnover_2023 is None or ar_turnover_2024 is None or \n            inventory_turnover_2023 is None or inventory_turnover_2024 is None or \n            revenue_growth_2024 is None):\n            return False\n        \n        # 验证风险条件\n        condition1 = ar_turnover_2024 < ar_turnover_2023  # 应收账款周转率降低\n        condition2 = inventory_turnover_2024 > inventory_turnover_2023  # 存货周转率提高\n        condition3 = revenue_growth_2024 > 20  # 营业收入增长率超过20%\n        \n        # 所有条件同时满足时存在风险\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, KeyError, AttributeError):\n        # 处理任何可能的异常情况\n        return False"
  },
  {
    "company_name": "浙江联翔智能家居股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业应收账款增长额占营业收入的比重高于行业总体样本中85%的企业。（模型公式编号：191101061）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 从data_dict获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 检查数据是否足够\n        if not model_items or len(model_items) < 2:\n            return False\n        \n        # 提取企业数据和行业数据\n        enterprise_data = None\n        industry_data = None\n        \n        for item in model_items:\n            if item.get('类型') == '企业':\n                enterprise_data = item\n            elif item.get('类型') == '行业':\n                industry_data = item\n        \n        # 检查必要数据是否存在\n        if not enterprise_data or not industry_data:\n            return False\n        \n        # 获取企业2024年应收账款增长额占营业收入的比例\n        enterprise_ratio_2024 = enterprise_data.get('2024')\n        if enterprise_ratio_2024 is None:\n            return False\n        \n        # 获取行业85%分位数值（直接使用行业数据点的值）\n        industry_percentile_85 = industry_data.get('2024')\n        if industry_percentile_85 is None:\n            return False\n        \n        # 转换为数值类型\n        enterprise_ratio = float(enterprise_ratio_2024)\n        industry_threshold = float(industry_percentile_85)\n        \n        # 验证风险条件：企业比例高于行业85%分位数\n        return enterprise_ratio > industry_threshold\n        \n    except (ValueError, TypeError, KeyError):\n        # 处理数据转换错误、类型错误或键错误\n        return False\n    except Exception as e:\n        # 处理其他所有异常\n        return False"
  },
  {
    "company_name": "浙江联翔智能家居股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业营业收入增长超过20%，营业收入增长率超过销售商品和提供劳务收到的现金增长率的1.5倍。（模型公式编号：210101002）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 提取所需的企业数据\n        revenue_growth = None\n        cash_growth = None\n        \n        for item in model_items:\n            if item.get('类型') == '企业':\n                if item.get('项目名称') == '营业收入增长率':\n                    revenue_growth = item.get('2024')\n                elif item.get('项目名称') == '销售商品、提供劳务收到的现金增长率':\n                    cash_growth = item.get('2024')\n        \n        # 检查数据是否存在\n        if revenue_growth is None or cash_growth is None:\n            return False\n        \n        # 转换为数值类型\n        revenue_growth_val = float(revenue_growth)\n        cash_growth_val = float(cash_growth)\n        \n        # 验证风险条件\n        condition1 = revenue_growth_val > 20\n        condition2 = revenue_growth_val > (cash_growth_val * 1.5)\n        \n        return condition1 and condition2\n        \n    except (ValueError, TypeError, AttributeError):\n        return False\n    except Exception as e:\n        return False"
  },
  {
    "company_name": "浙江联翔智能家居股份有限公司",
    "risk_category": "少结转主营业务成本",
    "risk_description": "本年企业应收账款周转率与存货周转率均不到行业均值的90%，毛利率比行业均值高10个百分点以上。（模型公式编号：191101045）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        model_items = data_dict.get('model_items', [])\n        \n        # 提取所需数据\n        ar_turnover_company = None\n        ar_turnover_industry = None\n        inventory_turnover_company = None\n        inventory_turnover_industry = None\n        gross_margin_company = None\n        gross_margin_industry = None\n        \n        for item in model_items:\n            name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', None)\n            \n            if value_2024 is None:\n                continue\n                \n            try:\n                value = float(value_2024)\n            except (ValueError, TypeError):\n                continue\n                \n            if '应收票据、应收账款、应收款项融资及合同资产周转率' in name:\n                if item_type == '企业':\n                    ar_turnover_company = value\n                elif item_type == '行业':\n                    ar_turnover_industry = value\n                    \n            elif '存货周转率' in name:\n                if item_type == '企业':\n                    inventory_turnover_company = value\n                elif item_type == '行业':\n                    inventory_turnover_industry = value\n                    \n            elif '销售毛利率' in name:\n                if item_type == '企业':\n                    gross_margin_company = value\n                elif item_type == '行业':\n                    gross_margin_industry = value\n        \n        # 检查数据完整性\n        if (ar_turnover_company is None or ar_turnover_industry is None or\n            inventory_turnover_company is None or inventory_turnover_industry is None or\n            gross_margin_company is None or gross_margin_industry is None):\n            return False\n        \n        # 验证风险条件\n        condition1 = ar_turnover_company < (ar_turnover_industry * 0.9)\n        condition2 = inventory_turnover_company < (inventory_turnover_industry * 0.9)\n        condition3 = gross_margin_company > (gross_margin_industry + 10)\n        \n        return condition1 and condition2 and condition3\n        \n    except Exception as e:\n        return False"
  },
  {
    "company_name": "浙江联翔智能家居股份有限公司",
    "risk_category": "少结转主营业务成本",
    "risk_description": "本年企业股本较上年无变动，长期股权投资减少，营业收入增长超过30%。（模型公式编号：191101110）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 提取所需指标的企业数据\n        equity_growth_data = None\n        long_term_investment_data = None\n        revenue_growth_data = None\n        \n        for item in model_items:\n            if item['项目名称'] == '股本增长率' and item['类型'] == '企业':\n                equity_growth_data = item\n            elif item['项目名称'] == '长期股权投资增长率' and item['类型'] == '企业':\n                long_term_investment_data = item\n            elif item['项目名称'] == '营业收入增长率' and item['类型'] == '企业':\n                revenue_growth_data = item\n        \n        # 检查数据完整性\n        if not all([equity_growth_data, long_term_investment_data, revenue_growth_data]):\n            return False\n        \n        # 提取2024年数据\n        equity_growth_2024 = float(equity_growth_data['2024'])\n        long_term_investment_2024 = float(long_term_investment_data['2024'])\n        revenue_growth_2024 = float(revenue_growth_data['2024'])\n        \n        # 验证风险条件\n        condition1 = equity_growth_2024 == 0.00  # 股本增长率 = 0.00%\n        condition2 = long_term_investment_2024 < 0  # 长期股权投资增长率 < 0\n        condition3 = revenue_growth_2024 > 30  # 营业收入增长率 > 30%\n        \n        # 所有条件同时满足时存在风险\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, KeyError):\n        # 处理数据转换错误、类型错误或键缺失的情况\n        return False\n    except Exception as e:\n        # 处理其他所有异常\n        return False"
  },
  {
    "company_name": "浙江联翔智能家居股份有限公司",
    "risk_category": "少计成本或费用",
    "risk_description": "本年企业营业收入增长超过20%，“经营业务利润”增长率比营业收入增长率高30个百分点以上。（模型公式编号：191101010）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 提取所需指标的企业数据\n        revenue_growth = None\n        profit_growth = None\n        \n        for item in model_items:\n            if item.get('项目名称') == '营业收入增长率' and item.get('类型') == '企业':\n                revenue_growth = item.get('2024')\n            elif item.get('项目名称') == '经营业务利润增长率' and item.get('类型') == '企业':\n                profit_growth = item.get('2024')\n        \n        # 检查数据是否存在\n        if revenue_growth is None or profit_growth is None:\n            return False\n        \n        # 转换为浮点数\n        revenue_growth = float(revenue_growth)\n        profit_growth = float(profit_growth)\n        \n        # 验证风险条件\n        condition1 = revenue_growth > 20.0\n        condition2 = (profit_growth - revenue_growth) > 30.0\n        \n        return condition1 and condition2\n        \n    except (ValueError, TypeError, AttributeError, KeyError):\n        return False"
  },
  {
    "company_name": "浙江联翔智能家居股份有限公司",
    "risk_category": "少计成本或费用",
    "risk_description": "企业营业收入前二年持续下降，本年增长，且比本年销售费用增幅高4个百分点以上，营业利润上年为负，本年为正。（模型公式编号：191101013）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据项\n        revenue_growth_data = None\n        sales_expense_growth_data = None\n        operating_profit_data = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            if item_name == '营业收入增长率':\n                revenue_growth_data = item\n            elif item_name == '销售费用增长率':\n                sales_expense_growth_data = item\n            elif item_name == '营业利润':\n                operating_profit_data = item\n        \n        # 检查数据完整性\n        if not all([revenue_growth_data, sales_expense_growth_data, operating_profit_data]):\n            return False\n        \n        # 获取2023年和2024年数据\n        revenue_growth_2023 = float(revenue_growth_data.get('2023', 0))\n        revenue_growth_2024 = float(revenue_growth_data.get('2024', 0))\n        \n        sales_expense_growth_2024 = float(sales_expense_growth_data.get('2024', 0))\n        \n        operating_profit_2023 = float(operating_profit_data.get('2023', 0).replace(',', ''))\n        operating_profit_2024 = float(operating_profit_data.get('2024', 0).replace(',', ''))\n        \n        # 验证条件1: 2023年营业收入增长率为负\n        condition1 = revenue_growth_2023 < 0\n        \n        # 验证条件2: 2024年营业收入增长率为正\n        condition2 = revenue_growth_2024 > 0\n        \n        # 验证条件3: 2024年营业收入增长率比销售费用增长率高4个百分点以上\n        condition3 = (revenue_growth_2024 - sales_expense_growth_2024) > 4\n        \n        # 验证条件4: 2023年营业利润为负且2024年营业利润为正\n        condition4 = (operating_profit_2023 < 0) and (operating_profit_2024 > 0)\n        \n        # 所有条件都满足时返回True（存在风险）\n        return condition1 and condition2 and condition3 and condition4\n        \n    except (ValueError, TypeError, AttributeError, KeyError):\n        return False"
  },
  {
    "company_name": "浙江联翔智能家居股份有限公司",
    "risk_category": "少计成本或费用",
    "risk_description": "以前少计、本年多计信用或资产减值损失",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据\n        credit_impairment_data = {}\n        receivables_data = {}\n        prepayments_data = {}\n        other_receivables_data = {}\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2023 = item.get('2023', '')\n            value_2024 = item.get('2024', '')\n            \n            # 转换字符串为数值\n            try:\n                val_2023 = float(str(value_2023).replace(',', '')) if value_2023 else 0\n                val_2024 = float(str(value_2024).replace(',', '')) if value_2024 else 0\n            except (ValueError, TypeError):\n                continue\n            \n            if '信用减值损失' in item_name and item_type == '企业':\n                credit_impairment_data = {'2023': val_2023, '2024': val_2024}\n            \n            elif '应收票据、应收账款、应收款项融资及合同资产' in item_name and item_type == '企业':\n                receivables_data = {'2023': val_2023, '2024': val_2024}\n            \n            elif '预付款项' in item_name and item_type == '企业':\n                prepayments_data = {'2023': val_2023, '2024': val_2024}\n            \n            elif '其他应收款' in item_name and item_type == '企业':\n                other_receivables_data = {'2023': val_2023, '2024': val_2024}\n        \n        # 检查数据完整性\n        if (not credit_impairment_data or not receivables_data or \n            not prepayments_data or not other_receivables_data):\n            return False\n        \n        # 计算信用减值损失变化\n        credit_impairment_change = credit_impairment_data['2024'] - credit_impairment_data['2023']\n        \n        # 计算各项资产增长率\n        receivables_growth = (receivables_data['2024'] - receivables_data['2023']) / abs(receivables_data['2023']) if receivables_data['2023'] != 0 else 0\n        other_receivables_growth = (other_receivables_data['2024'] - other_receivables_data['2023']) / abs(other_receivables_data['2023']) if other_receivables_data['2023'] != 0 else 0\n        \n        # 风险判断条件\n        # 1. 2023年信用减值损失计提金额较小（绝对值较小）\n        condition1 = abs(credit_impairment_data['2023']) < 500000  # 阈值可根据实际情况调整\n        \n        # 2. 2024年信用减值损失大幅增加\n        condition2 = abs(credit_impairment_change) > 1000000  # 变化绝对值大于100万\n        \n        # 3. 应收账款类资产大幅增长\n        condition3 = receivables_growth > 5.0  # 增长率超过500%\n        \n        # 4. 其他应收款显著增长\n        condition4 = other_receivables_growth > 3.0  # 增长率超过300%\n        \n        # 综合判断：满足多个条件时认为存在风险\n        risk_conditions = [condition1, condition2, condition3, condition4]\n        if sum(risk_conditions) >= 3:\n            return True\n        else:\n            return False\n            \n    except Exception as e:\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "企业营业收入连续两年增长，且本年增长率高于行业总体样本中85%的企业。（模型公式编号：191101005）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 从data_dict中获取model_items\n        model_items = data_dict['model_items']\n        \n        # 提取企业数据和行业数据\n        enterprise_data = None\n        industry_data = None\n        \n        for item in model_items:\n            if item['项目名称'] == '营业收入增长率':\n                if item['类型'] == '企业':\n                    enterprise_data = item\n                elif item['类型'] == '行业':\n                    industry_data = item\n        \n        # 检查数据是否完整\n        if enterprise_data is None or industry_data is None:\n            return False\n        \n        # 获取企业2023年和2024年的增长率\n        growth_2023 = float(enterprise_data['2023'])\n        growth_2024 = float(enterprise_data['2024'])\n        \n        # 获取行业2024年的增长率（85%分位数阈值）\n        industry_threshold = float(industry_data['2024'])\n        \n        # 验证条件1：企业连续两年增长率为正值\n        condition1 = (growth_2023 > 0) and (growth_2024 > 0)\n        \n        # 验证条件2：企业2024年增长率高于行业85%分位数阈值\n        condition2 = growth_2024 > industry_threshold\n        \n        # 同时满足两个条件则存在风险\n        return condition1 and condition2\n        \n    except (KeyError, ValueError, TypeError):\n        # 处理数据缺失、类型错误或转换异常等情况\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "本年企业营业收入增长超过20%，在建工程增长超过30%，应收账款减少，或增长不到10%。（模型公式编号：191101021）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需指标的企业数据\n        revenue_growth = None\n        construction_growth = None\n        receivables_growth = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            # 只处理企业类型的数据\n            if item_type != '企业':\n                continue\n                \n            # 获取2024年数据（本年）\n            value_2024 = item.get('2024', '')\n            if not value_2024:\n                continue\n                \n            # 转换数值格式（处理千分位分隔符）\n            try:\n                numeric_value = float(str(value_2024).replace(',', ''))\n            except (ValueError, TypeError):\n                continue\n                \n            # 根据指标名称分配数值\n            if item_name == '营业收入增长率':\n                revenue_growth = numeric_value\n            elif item_name == '在建工程增长率':\n                construction_growth = numeric_value\n            elif item_name == '应收票据、应收账款、应收款项融资及合同资产增长率':\n                receivables_growth = numeric_value\n        \n        # 检查所有必需数据是否都存在\n        if revenue_growth is None or construction_growth is None or receivables_growth is None:\n            return False\n        \n        # 验证风险条件\n        condition1 = revenue_growth > 20.0  # 营业收入增长率 > 20%\n        condition2 = construction_growth > 30.0  # 在建工程增长率 > 30%\n        condition3 = receivables_growth < 10.0  # 应收相关增长率 < 10%\n        \n        # 所有条件同时满足时返回True（存在风险）\n        return condition1 and condition2 and condition3\n        \n    except Exception as e:\n        # 发生任何异常时返回False\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "本年企业“每元工资提供的营业收入”比前二年均值高1.2倍，营业收入增长超过20%。（模型公式编号：191101056）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 提取所需数据\n        revenue_per_wage_data = {}\n        revenue_growth_rate = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_name == '每元工资提供的营业收入' and item_type == '企业':\n                # 获取连续三年的数据\n                revenue_per_wage_data['2022'] = float(item.get('2022', 0)) if item.get('2022') is not None else None\n                revenue_per_wage_data['2023'] = float(item.get('2023', 0)) if item.get('2023') is not None else None\n                revenue_per_wage_data['2024'] = float(item.get('2024', 0)) if item.get('2024') is not None else None\n                \n            elif item_name == '营业收入增长率' and item_type == '企业':\n                revenue_growth_rate = float(item.get('2024', 0)) if item.get('2024') is not None else None\n        \n        # 检查数据完整性\n        if (revenue_per_wage_data.get('2022') is None or \n            revenue_per_wage_data.get('2023') is None or \n            revenue_per_wage_data.get('2024') is None or \n            revenue_growth_rate is None):\n            return False\n        \n        # 计算前两年均值\n        prev_two_years_avg = (revenue_per_wage_data['2022'] + revenue_per_wage_data['2023']) / 2\n        \n        # 验证风险条件\n        condition1 = revenue_per_wage_data['2024'] > prev_two_years_avg * 1.2\n        condition2 = revenue_growth_rate > 20\n        \n        return condition1 and condition2\n        \n    except (ValueError, TypeError, KeyError, ZeroDivisionError):\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "本年企业“每元固定资产提供的营业收入”超过上年的1.2倍，固定资产减少不到10%，营业收入增长超过20%。（模型公式编号：191101080）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据项\n        revenue_per_fixed_asset_2023 = None\n        revenue_per_fixed_asset_2024 = None\n        fixed_asset_growth_rate_2024 = None\n        revenue_growth_rate_2024 = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_name == '每元固定资产及使用权资产提供的营业收入' and item_type == '企业':\n                revenue_per_fixed_asset_2023 = float(item.get('2023', 0))\n                revenue_per_fixed_asset_2024 = float(item.get('2024', 0))\n            \n            elif item_name == '固定资产及使用权资产增长率' and item_type == '企业':\n                fixed_asset_growth_rate_2024 = float(item.get('2024', 0))\n            \n            elif item_name == '营业收入增长率' and item_type == '企业':\n                revenue_growth_rate_2024 = float(item.get('2024', 0))\n        \n        # 检查数据完整性\n        if any(x is None for x in [revenue_per_fixed_asset_2023, revenue_per_fixed_asset_2024, \n                                  fixed_asset_growth_rate_2024, revenue_growth_rate_2024]):\n            return False\n        \n        # 验证风险条件\n        condition1 = revenue_per_fixed_asset_2024 > revenue_per_fixed_asset_2023 * 1.2\n        condition2 = fixed_asset_growth_rate_2024 > -10\n        condition3 = revenue_growth_rate_2024 > 20\n        \n        # 所有条件同时满足时存在风险\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, KeyError):\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "本年企业固定资产原值增减不超过20%，“每元固定资产原值提供的营业收入”超过上年的1.5倍，营业收入增长超过20%。（模型公式编号：200201001）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n            \n        # 提取所需数据项\n        fixed_asset_growth = None\n        revenue_per_asset_prev = None\n        revenue_per_asset_curr = None\n        revenue_growth = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_name == '固定资产及使用权资产原值增长率' and item_type == '企业':\n                fixed_asset_growth = float(item.get('2024', 0))\n            elif item_name == '每元固定资产及使用权资产原值提供的营业收入' and item_type == '企业':\n                revenue_per_asset_prev = float(item.get('2023', 0))\n                revenue_per_asset_curr = float(item.get('2024', 0))\n            elif item_name == '营业收入增长率' and item_type == '企业':\n                revenue_growth = float(item.get('2024', 0))\n        \n        # 检查数据是否完整\n        if None in [fixed_asset_growth, revenue_per_asset_prev, revenue_per_asset_curr, revenue_growth]:\n            return False\n        \n        # 验证风险条件\n        condition1 = abs(fixed_asset_growth) <= 20  # 固定资产原值增减不超过20%\n        condition2 = revenue_per_asset_curr > revenue_per_asset_prev * 1.5  # 每元固定资产原值提供的营业收入超过上年的1.5倍\n        condition3 = revenue_growth > 20  # 营业收入增长超过20%\n        \n        # 所有条件同时满足时存在风险\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, KeyError):\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业营业收入增长超过20%，且大于销售商品和提供劳务收到的现金增长率，同时其差额超过行业均值的3倍。（模型公式编号：191101002）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需数据变量\n        corp_revenue_growth = None\n        corp_cash_growth = None\n        ind_revenue_growth = None\n        ind_cash_growth = None\n        \n        # 提取各项数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', None)\n            \n            if value_2024 is None:\n                continue\n                \n            try:\n                value = float(value_2024)\n            except (ValueError, TypeError):\n                continue\n                \n            if item_name == '营业收入增长率':\n                if item_type == '企业':\n                    corp_revenue_growth = value\n                elif item_type == '行业':\n                    ind_revenue_growth = value\n            \n            elif item_name == '销售商品、提供劳务收到的现金增长率':\n                if item_type == '企业':\n                    corp_cash_growth = value\n                elif item_type == '行业':\n                    ind_cash_growth = value\n        \n        # 检查数据是否完整\n        if any(x is None for x in [corp_revenue_growth, corp_cash_growth, ind_revenue_growth, ind_cash_growth]):\n            return False\n        \n        # 条件1: 企业营业收入增长率 > 20%\n        condition1 = corp_revenue_growth > 20.0\n        \n        # 条件2: 企业营业收入增长率 > 企业销售商品、提供劳务收到的现金增长率\n        condition2 = corp_revenue_growth > corp_cash_growth\n        \n        # 条件3: (企业营业收入增长率 - 企业销售商品、提供劳务收到的现金增长率) > 3 × (行业营业收入增长率 - 行业销售商品、提供劳务收到的现金增长率)\n        corp_diff = corp_revenue_growth - corp_cash_growth\n        ind_diff = ind_revenue_growth - ind_cash_growth\n        condition3 = corp_diff > (3 * ind_diff)\n        \n        # 综合判断：所有条件都满足时返回True\n        return condition1 and condition2 and condition3\n        \n    except Exception as e:\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业营业收入增长超过20%，营业收入增长率超过销售商品和提供劳务收到的现金增长率的1.5倍。（模型公式编号：210101002）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需指标的企业数据\n        revenue_growth_rate = None\n        cash_received_growth_rate = None\n        \n        for item in model_items:\n            if item.get('项目名称') == '营业收入增长率' and item.get('类型') == '企业':\n                revenue_growth_rate = item.get('2024')\n            elif item.get('项目名称') == '销售商品、提供劳务收到的现金增长率' and item.get('类型') == '企业':\n                cash_received_growth_rate = item.get('2024')\n        \n        # 检查数据是否存在\n        if revenue_growth_rate is None or cash_received_growth_rate is None:\n            return False\n        \n        # 转换为数值类型\n        revenue_growth = float(revenue_growth_rate)\n        cash_received_growth = float(cash_received_growth_rate)\n        \n        # 验证风险条件\n        condition1 = revenue_growth > 20\n        condition2 = revenue_growth > 1.5 * cash_received_growth\n        \n        return condition1 and condition2\n        \n    except (ValueError, TypeError):\n        # 处理数据类型转换错误\n        return False\n    except Exception as e:\n        # 处理其他所有异常\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "少结转主营业务成本",
    "risk_description": "本年企业存货周转率降低，应收账款周转率提高，营业收入增长超过20%。（模型公式编号：191101033）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 初始化所需变量\n        inventory_turnover_2023 = None\n        inventory_turnover_2024 = None\n        receivables_turnover_2023 = None\n        receivables_turnover_2024 = None\n        revenue_growth_2024 = None\n        \n        # 提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if '存货周转率' in item_name and item_type == '企业':\n                inventory_turnover_2023 = float(item.get('2023', 0)) if item.get('2023') not in [None, ''] else None\n                inventory_turnover_2024 = float(item.get('2024', 0)) if item.get('2024') not in [None, ''] else None\n            \n            elif ('应收' in item_name and '周转率' in item_name) and item_type == '企业':\n                receivables_turnover_2023 = float(item.get('2023', 0)) if item.get('2023') not in [None, ''] else None\n                receivables_turnover_2024 = float(item.get('2024', 0)) if item.get('2024') not in [None, ''] else None\n            \n            elif '营业收入增长率' in item_name and item_type == '企业':\n                revenue_growth_2024 = float(item.get('2024', 0)) if item.get('2024') not in [None, ''] else None\n        \n        # 检查数据完整性\n        if (inventory_turnover_2023 is None or inventory_turnover_2024 is None or \n            receivables_turnover_2023 is None or receivables_turnover_2024 is None or \n            revenue_growth_2024 is None):\n            return False\n        \n        # 验证风险条件\n        condition1 = inventory_turnover_2024 < inventory_turnover_2023  # 存货周转率降低\n        condition2 = receivables_turnover_2024 > receivables_turnover_2023  # 应收账款周转率提高\n        condition3 = revenue_growth_2024 > 20  # 营业收入增长超过20%\n        \n        # 所有条件同时满足时存在风险\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, KeyError, AttributeError):\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "少结转主营业务成本",
    "risk_description": "本年企业销售毛利增长率比营业收入增长率高10个百分点以上，存货增长超过15%。（模型公式编号：191101044）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        sales_profit_growth = None\n        revenue_growth = None\n        inventory_growth = None\n        \n        # 提取企业数据\n        for item in model_items:\n            if item.get('类型') == '企业':\n                item_name = item.get('项目名称', '')\n                value_2024 = item.get('2024')\n                \n                if value_2024 is None:\n                    continue\n                    \n                try:\n                    numeric_value = float(value_2024)\n                except (ValueError, TypeError):\n                    continue\n                \n                if item_name == '销售毛利增长率':\n                    sales_profit_growth = numeric_value\n                elif item_name == '营业收入增长率':\n                    revenue_growth = numeric_value\n                elif item_name == '存货增长率':\n                    inventory_growth = numeric_value\n        \n        # 检查数据完整性\n        if sales_profit_growth is None or revenue_growth is None or inventory_growth is None:\n            return False\n        \n        # 验证风险条件\n        condition1 = (sales_profit_growth - revenue_growth) > 10\n        condition2 = inventory_growth > 15\n        \n        # 两个条件需同时满足\n        return condition1 and condition2\n        \n    except Exception as e:\n        # 处理所有可能的异常\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "少结转主营业务成本",
    "risk_description": "本年企业应收账款周转率与存货周转率均不到行业均值的90%，毛利率比行业均值高10个百分点以上。（模型公式编号：191101045）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        enterprise_receivables_turnover = None\n        industry_receivables_turnover = None\n        enterprise_inventory_turnover = None\n        industry_inventory_turnover = None\n        enterprise_gross_margin = None\n        industry_gross_margin = None\n        \n        # 遍历model_items提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', None)\n            \n            if value_2024 is None:\n                continue\n                \n            try:\n                numeric_value = float(value_2024)\n            except (ValueError, TypeError):\n                continue\n            \n            if '应收票据、应收账款、应收款项融资及合同资产周转率' in item_name:\n                if item_type == '企业':\n                    enterprise_receivables_turnover = numeric_value\n                elif item_type == '行业':\n                    industry_receivables_turnover = numeric_value\n            \n            elif '存货周转率' in item_name:\n                if item_type == '企业':\n                    enterprise_inventory_turnover = numeric_value\n                elif item_type == '行业':\n                    industry_inventory_turnover = numeric_value\n            \n            elif '销售毛利率' in item_name:\n                if item_type == '企业':\n                    enterprise_gross_margin = numeric_value\n                elif item_type == '行业':\n                    industry_gross_margin = numeric_value\n        \n        # 检查所有必需数据是否都存在\n        if (enterprise_receivables_turnover is None or industry_receivables_turnover is None or\n            enterprise_inventory_turnover is None or industry_inventory_turnover is None or\n            enterprise_gross_margin is None or industry_gross_margin is None):\n            return False\n        \n        # 应用风险判断条件\n        condition1 = enterprise_receivables_turnover < industry_receivables_turnover * 0.9\n        condition2 = enterprise_inventory_turnover < industry_inventory_turnover * 0.9\n        condition3 = enterprise_gross_margin > industry_gross_margin + 10\n        \n        # 所有条件都满足时返回True（存在风险）\n        return condition1 and condition2 and condition3\n        \n    except Exception as e:\n        # 处理任何异常情况，返回False\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "少结转主营业务成本",
    "risk_description": "本年企业存货增长率超过营业成本增长率的1.2倍，存货期末余额超过营业成本的1.2倍。（模型公式编号：210601002）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        inventory_growth_2024 = None\n        cost_growth_2024 = None\n        inventory_balance_2024 = None\n        operating_cost_2024 = None\n        \n        # 提取企业数据\n        for item in model_items:\n            if item.get('类型') == '企业':\n                item_name = item.get('项目名称', '')\n                value_2024 = item.get('2024')\n                \n                if value_2024 is None:\n                    continue\n                    \n                # 转换数值类型\n                try:\n                    if item_name == '存货增长率':\n                        inventory_growth_2024 = float(value_2024)\n                    elif item_name == '营业成本增长率':\n                        cost_growth_2024 = float(value_2024)\n                    elif item_name == '存货':\n                        # 处理带逗号的货币金额\n                        cleaned_value = value_2024.replace(',', '')\n                        inventory_balance_2024 = float(cleaned_value)\n                    elif item_name == '营业成本':\n                        # 处理带逗号的货币金额\n                        cleaned_value = value_2024.replace(',', '')\n                        operating_cost_2024 = float(cleaned_value)\n                except (ValueError, AttributeError):\n                    continue\n        \n        # 检查所有必需数据是否都存在\n        if any(x is None for x in [inventory_growth_2024, cost_growth_2024, \n                                  inventory_balance_2024, operating_cost_2024]):\n            return False\n        \n        # 验证风险条件\n        condition1 = inventory_growth_2024 > 1.2 * cost_growth_2024\n        condition2 = inventory_balance_2024 > 1.2 * operating_cost_2024\n        \n        # 两个条件都满足时返回True（存在风险）\n        return condition1 and condition2\n        \n    except Exception as e:\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "与供应商存在潜在关联关系",
    "risk_description": "本年企业销售商品、提供劳务收到的现金超过含税营业收入，应付票据及应付账款增长，或减少不到10%。（模型公式编号：191101025）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 提取所需数据\n        operating_revenue_2024 = None\n        cash_received_2024 = None\n        payables_growth_2024 = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_name == '营业收入' and item_type == '企业':\n                operating_revenue_2024 = float(item.get('2024', '0').replace(',', ''))\n            elif item_name == '销售商品、提供劳务收到的现金' and item_type == '企业':\n                cash_received_2024 = float(item.get('2024', '0').replace(',', ''))\n            elif item_name == '应付票据及应付账款增长率' and item_type == '企业':\n                payables_growth_2024 = float(item.get('2024', '0'))\n        \n        # 检查数据完整性\n        if (operating_revenue_2024 is None or \n            cash_received_2024 is None or \n            payables_growth_2024 is None):\n            return False\n        \n        # 计算含税营业收入（增值税税率13%）\n        tax_included_revenue = operating_revenue_2024 * 1.13\n        \n        # 验证条件1：本年销售商品、提供劳务收到的现金 > 含税营业收入\n        condition1 = cash_received_2024 > tax_included_revenue\n        \n        # 验证条件2：应付票据及应付账款增长率 ≥ -10%\n        condition2 = payables_growth_2024 >= -10\n        \n        # 风险触发条件：两个条件同时满足\n        return condition1 and condition2\n        \n    except (ValueError, TypeError, AttributeError):\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "货币资金错报",
    "risk_description": "本年企业货币资金超过5000万元，货币资金占资产总计的比重超过行业均值，利息收入占本年货币资金平均余额的比例不到1%。（模型公式编号：191101073）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict['model_items']\n        \n        # 提取所需数据\n        cash_2024 = None\n        cash_ratio_company = None\n        cash_ratio_industry = None\n        interest_income_2024 = None\n        cash_2023 = None\n        \n        for item in model_items:\n            if item['项目名称'] == '货币资金' and item['类型'] == '企业':\n                cash_2024 = float(item['2024'].replace(',', '')) if item['2024'] else None\n                cash_2023 = float(item['2023'].replace(',', '')) if item['2023'] else None\n            elif item['项目名称'] == '货币资金占资产总计比(%)' and item['类型'] == '企业':\n                cash_ratio_company = float(item['2024']) if item['2024'] else None\n            elif item['项目名称'] == '货币资金占资产总计比(%)' and item['类型'] == '行业':\n                cash_ratio_industry = float(item['2024']) if item['2024'] else None\n            elif item['项目名称'] == '利息收入' and item['类型'] == '企业':\n                interest_income_2024 = float(item['2024'].replace(',', '')) if item['2024'] else None\n        \n        # 检查数据完整性\n        if None in [cash_2024, cash_ratio_company, cash_ratio_industry, interest_income_2024, cash_2023]:\n            return False\n        \n        # 条件1: 本年企业货币资金超过5000万元\n        condition1 = cash_2024 > 50000000\n        \n        # 条件2: 货币资金占资产总计的比重超过行业均值\n        condition2 = cash_ratio_company > cash_ratio_industry\n        \n        # 条件3: 利息收入占本年货币资金平均余额的比例不到1%\n        avg_cash_balance = (cash_2023 + cash_2024) / 2\n        interest_ratio = interest_income_2024 / avg_cash_balance if avg_cash_balance != 0 else 0\n        condition3 = interest_ratio < 0.01\n        \n        # 所有条件同时满足时存在风险\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, ZeroDivisionError, KeyError):\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "违规资金收付",
    "risk_description": "本年企业收到的其他与经营活动有关的现金占经营活动现金流入小计的比重高于行业总体样本中85%的企业。（模型公式编号：191101075）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取企业和行业数据\n        company_data = None\n        industry_data = None\n        \n        for item in model_items:\n            if item.get('类型') == '企业':\n                company_data = item\n            elif item.get('类型') == '行业':\n                industry_data = item\n        \n        # 检查数据完整性\n        if not company_data or not industry_data:\n            return False\n        \n        # 获取企业本年指标值\n        company_value_2024 = company_data.get('2024')\n        if company_value_2024 is None:\n            return False\n        \n        # 获取行业85%分位数值（直接使用行业数据点的值）\n        industry_percentile_value = industry_data.get('2024')\n        if industry_percentile_value is None:\n            return False\n        \n        # 转换为数值类型进行比较\n        company_value = float(company_value_2024)\n        industry_threshold = float(industry_percentile_value)\n        \n        # 判断风险条件：企业指标值 > 行业85%分位数值\n        return company_value > industry_threshold\n        \n    except (ValueError, TypeError, KeyError):\n        # 处理数据转换错误或键不存在的情况\n        return False\n    except Exception as e:\n        # 处理其他所有可能的异常\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "违规资金收付",
    "risk_description": "以前少计、本年多计成本或费用",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 检查数据是否足够\n        if len(model_items) < 2:\n            return False\n        \n        # 提取利息费用和债务数据\n        interest_expense_data = {}\n        debt_data = {}\n        \n        for item in model_items:\n            name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if name == '利息费用' and item_type == '企业':\n                interest_expense_data = item\n            elif name == '短长期债务' and item_type == '企业':\n                debt_data = item\n        \n        # 检查必要数据是否存在\n        if not interest_expense_data or not debt_data:\n            return False\n        \n        # 提取具体数值并转换为浮点数\n        interest_2023 = float(interest_expense_data.get('2023', '0').replace(',', ''))\n        interest_2024 = float(interest_expense_data.get('2024', '0').replace(',', ''))\n        debt_2023 = float(debt_data.get('2023', '0').replace(',', ''))\n        debt_2024 = float(debt_data.get('2024', '0').replace(',', ''))\n        \n        # 检查数据有效性\n        if interest_2023 <= 0 or interest_2024 <= 0 or debt_2023 <= 0 or debt_2024 <= 0:\n            return False\n        \n        # 计算利息费用占债务比率\n        ratio_2023 = interest_2023 / debt_2023\n        ratio_2024 = interest_2024 / debt_2024\n        \n        # 计算变化率\n        interest_change_rate = (interest_2024 - interest_2023) / interest_2023\n        debt_change_rate = (debt_2024 - debt_2023) / debt_2023\n        ratio_change_rate = (ratio_2024 - ratio_2023) / ratio_2023\n        \n        # 判断风险条件\n        # 利息费用大幅下降（超过50%）\n        interest_declined_significantly = interest_change_rate < -0.5\n        \n        # 债务规模大幅增加（超过20%）\n        debt_increased_significantly = debt_change_rate > 0.2\n        \n        # 利息费用占债务比率异常下降（超过50%）\n        ratio_declined_significantly = ratio_change_rate < -0.5\n        \n        # 如果三个条件都满足，则判断存在风险\n        if interest_declined_significantly and debt_increased_significantly and ratio_declined_significantly:\n            return True\n        else:\n            return False\n            \n    except (ValueError, TypeError, ZeroDivisionError):\n        return False\n    except Exception as e:\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "违规资金收付",
    "risk_description": "本年企业利息费用占“短长期债务”平均余额的比例比上年提高了3个百分点以上。（模型公式编号：191101085）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 检查数据字典是否包含必要的model_items字段\n        if 'model_items' not in data_dict:\n            return False\n            \n        model_items = data_dict['model_items']\n        \n        # 提取所需的数据\n        interest_expense_2023 = None\n        interest_expense_2024 = None\n        short_debt_avg_2023 = None\n        short_debt_avg_2024 = None\n        long_debt_avg_2023 = None\n        long_debt_avg_2024 = None\n        \n        # 遍历model_items查找所需数据\n        for item in model_items:\n            if item['项目名称'] == '利息费用' and item['类型'] == '企业':\n                interest_expense_2023 = float(item['2023'].replace(',', '')) if item.get('2023') else None\n                interest_expense_2024 = float(item['2024'].replace(',', '')) if item.get('2024') else None\n                \n            elif item['项目名称'] == '短期债务平均余额' and item['类型'] == '企业':\n                short_debt_avg_2023 = float(item['2023'].replace(',', '')) if item.get('2023') else None\n                short_debt_avg_2024 = float(item['2024'].replace(',', '')) if item.get('2024') else None\n                \n            elif item['项目名称'] == '长期债务平均余额' and item['类型'] == '企业':\n                long_debt_avg_2023 = float(item['2023'].replace(',', '')) if item.get('2023') else None\n                long_debt_avg_2024 = float(item['2024'].replace(',', '')) if item.get('2024') else None\n        \n        # 检查所有必需数据是否都存在\n        if None in [interest_expense_2023, interest_expense_2024, \n                   short_debt_avg_2023, short_debt_avg_2024,\n                   long_debt_avg_2023, long_debt_avg_2024]:\n            return False\n        \n        # 计算本年利息费用占短长期债务平均余额的比例\n        total_debt_2024 = short_debt_avg_2024 + long_debt_avg_2024\n        if total_debt_2024 == 0:\n            return False\n        ratio_2024 = (interest_expense_2024 / total_debt_2024) * 100\n        \n        # 计算上年利息费用占短长期债务平均余额的比例\n        total_debt_2023 = short_debt_avg_2023 + long_debt_avg_2023\n        if total_debt_2023 == 0:\n            return False\n        ratio_2023 = (interest_expense_2023 / total_debt_2023) * 100\n        \n        # 判断本年比例较上年是否提高超过3个百分点\n        if ratio_2024 - ratio_2023 > 3:\n            return True\n        else:\n            return False\n            \n    except (ValueError, TypeError, ZeroDivisionError, KeyError):\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "投资收益或资产处置收益错报",
    "risk_description": "企业总资产周转率连续两年低于行业均值，“经营业务利润”连续两年为负，本年营业利润较上年增长。（模型公式编号：191101019）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取数据项列表\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取企业数据和行业数据\n        enterprise_data = {}\n        industry_data = {}\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_type == '企业':\n                enterprise_data[item_name] = {\n                    '2023': float(item.get('2023', 0)) if item.get('2023') not in [None, ''] else None,\n                    '2024': float(item.get('2024', 0)) if item.get('2024') not in [None, ''] else None\n                }\n            elif item_type == '行业':\n                industry_data[item_name] = {\n                    '2023': float(item.get('2023', 0)) if item.get('2023') not in [None, ''] else None,\n                    '2024': float(item.get('2024', 0)) if item.get('2024') not in [None, ''] else None\n                }\n        \n        # 检查必需数据是否存在\n        required_enterprise = ['总资产周转率', '经营业务利润', '营业利润']\n        required_industry = ['总资产周转率']\n        \n        # 验证企业数据完整性\n        for item in required_enterprise:\n            if item not in enterprise_data:\n                return False\n            if enterprise_data[item]['2023'] is None or enterprise_data[item]['2024'] is None:\n                return False\n        \n        # 验证行业数据完整性\n        for item in required_industry:\n            if item not in industry_data:\n                return False\n            if industry_data[item]['2023'] is None or industry_data[item]['2024'] is None:\n                return False\n        \n        # 获取具体数值\n        tat_2023 = enterprise_data['总资产周转率']['2023']  # 总资产周转率2023\n        tat_2024 = enterprise_data['总资产周转率']['2024']  # 总资产周转率2024\n        operating_profit_2023 = enterprise_data['经营业务利润']['2023']  # 经营业务利润2023\n        operating_profit_2024 = enterprise_data['经营业务利润']['2024']  # 经营业务利润2024\n        industry_tat_2023 = industry_data['总资产周转率']['2023']  # 行业平均总资产周转率2023\n        industry_tat_2024 = industry_data['总资产周转率']['2024']  # 行业平均总资产周转率2024\n        \n        # 计算营业利润增长率\n        op_2023 = enterprise_data['营业利润']['2023']  # 营业利润2023\n        op_2024 = enterprise_data['营业利润']['2024']  # 营业利润2024\n        \n        if op_2023 == 0:  # 避免除零错误\n            op_growth_rate = 0\n        else:\n            op_growth_rate = (op_2024 - op_2023) / abs(op_2023) * 100\n        \n        # 风险判断条件\n        condition1 = (tat_2023 < industry_tat_2023) and (tat_2024 < industry_tat_2024)  # 总资产周转率连续两年低于行业均值\n        condition2 = (operating_profit_2023 < 0) and (operating_profit_2024 < 0)  # 经营业务利润连续两年为负\n        condition3 = op_growth_rate > 0  # 本年营业利润较上年增长\n        \n        # 所有条件都满足时存在风险\n        return condition1 and condition2 and condition3\n        \n    except (KeyError, TypeError, ValueError, ZeroDivisionError):\n        return False"
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "本年企业“每元固定资产提供的营业收入”超过上年的1.2倍，固定资产减少不到10%，营业收入增长超过20%。（模型公式编号：191101080）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需指标数据\n        fixed_asset_efficiency_2024 = None\n        fixed_asset_efficiency_2023 = None\n        fixed_asset_growth_rate_2024 = None\n        revenue_growth_rate_2024 = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_name == '每元固定资产及使用权资产提供的营业收入' and item_type == '企业':\n                fixed_asset_efficiency_2024 = float(item.get('2024', 0)) if item.get('2024') else None\n                fixed_asset_efficiency_2023 = float(item.get('2023', 0)) if item.get('2023') else None\n            \n            elif item_name == '固定资产及使用权资产增长率' and item_type == '企业':\n                fixed_asset_growth_rate_2024 = float(item.get('2024', 0)) if item.get('2024') else None\n            \n            elif item_name == '营业收入增长率' and item_type == '企业':\n                revenue_growth_rate_2024 = float(item.get('2024', 0)) if item.get('2024') else None\n        \n        # 检查数据完整性\n        if (fixed_asset_efficiency_2024 is None or \n            fixed_asset_efficiency_2023 is None or \n            fixed_asset_growth_rate_2024 is None or \n            revenue_growth_rate_2024 is None):\n            return False\n        \n        # 验证风险条件\n        condition1 = fixed_asset_efficiency_2024 > fixed_asset_efficiency_2023 * 1.2\n        condition2 = fixed_asset_growth_rate_2024 > -10\n        condition3 = revenue_growth_rate_2024 > 20\n        \n        # 所有条件都满足时返回True（存在风险）\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, KeyError, AttributeError):\n        return False"
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业应收账款周转率降低，存货周转率提高，营业收入增长超过20%。（模型公式编号：191101035）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        model_items = data_dict.get('model_items', [])\n        \n        # 提取所需数据\n        ar_turnover_2023 = None\n        ar_turnover_2024 = None\n        inventory_turnover_2023 = None\n        inventory_turnover_2024 = None\n        revenue_growth_2024 = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_type != '企业':\n                continue\n                \n            if '应收票据、应收账款、应收款项融资及合同资产周转率' in item_name:\n                ar_turnover_2023 = float(item.get('2023', 0))\n                ar_turnover_2024 = float(item.get('2024', 0))\n            elif '存货周转率' in item_name:\n                inventory_turnover_2023 = float(item.get('2023', 0))\n                inventory_turnover_2024 = float(item.get('2024', 0))\n            elif '营业收入增长率' in item_name:\n                revenue_growth_2024 = float(item.get('2024', 0))\n        \n        # 检查数据完整性\n        if (ar_turnover_2023 is None or ar_turnover_2024 is None or \n            inventory_turnover_2023 is None or inventory_turnover_2024 is None or \n            revenue_growth_2024 is None):\n            return False\n        \n        # 验证风险条件\n        condition1 = ar_turnover_2024 < ar_turnover_2023  # 应收账款周转率降低\n        condition2 = inventory_turnover_2024 > inventory_turnover_2023  # 存货周转率提高\n        condition3 = revenue_growth_2024 > 20  # 营业收入增长率超过20%\n        \n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, KeyError):\n        return False"
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "少结转主营业务成本",
    "risk_description": "本年企业销售毛利增长率比营业收入增长率高10个百分点以上，存货增长超过15%。（模型公式编号：191101044）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 从data_dict中获取model_items列表\n        model_items = data_dict.get('model_items', [])\n        \n        # 初始化所需变量\n        sales_profit_growth = None\n        revenue_growth = None\n        inventory_growth = None\n        \n        # 遍历model_items提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', None)\n            \n            # 只处理企业类型的数据\n            if item_type == '企业':\n                if item_name == '销售毛利增长率' and value_2024 is not None:\n                    sales_profit_growth = float(value_2024)\n                elif item_name == '营业收入增长率' and value_2024 is not None:\n                    revenue_growth = float(value_2024)\n                elif item_name == '存货增长率' and value_2024 is not None:\n                    inventory_growth = float(value_2024)\n        \n        # 检查所有必需数据是否都存在\n        if sales_profit_growth is None or revenue_growth is None or inventory_growth is None:\n            return False\n        \n        # 验证风险条件\n        # 条件1: 销售毛利增长率比营业收入增长率高10个百分点以上\n        condition1 = (sales_profit_growth - revenue_growth) > 10\n        \n        # 条件2: 存货增长率超过15%\n        condition2 = inventory_growth > 15\n        \n        # 两个条件都满足时返回True（存在风险）\n        return condition1 and condition2\n        \n    except (ValueError, TypeError, KeyError, AttributeError):\n        # 处理任何可能的异常情况\n        return False"
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "货币资金错报",
    "risk_description": "本年企业货币资金超过“短长期债务”的5倍，股本无变动或增长不到1%，资本公积无变动或增长不到5%。（模型公式编号：191101103）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据项\n        monetary_fund = None\n        debt = None\n        equity_growth = None\n        capital_reserve_growth = None\n        \n        # 遍历所有项目获取数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', None)\n            \n            # 只使用企业类型的数据\n            if item_type != '企业':\n                continue\n                \n            if item_name == '货币资金':\n                monetary_fund = float(value_2024.replace(',', '')) if value_2024 else None\n            elif item_name == '短长期债务':\n                debt = float(value_2024.replace(',', '')) if value_2024 else None\n            elif item_name == '股本增长率':\n                equity_growth = float(value_2024.replace(',', '')) if value_2024 else None\n            elif item_name == '资本公积增长率':\n                capital_reserve_growth = float(value_2024.replace(',', '')) if value_2024 else None\n        \n        # 检查数据完整性\n        if any(x is None for x in [monetary_fund, debt, equity_growth, capital_reserve_growth]):\n            return False\n        \n        # 验证风险条件\n        condition1 = monetary_fund > 5 * debt\n        condition2 = equity_growth <= 1.0\n        condition3 = capital_reserve_growth <= 5.0\n        \n        # 所有条件同时满足时存在风险\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, AttributeError, KeyError):\n        return False"
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "违规资金收付",
    "risk_description": "本年企业收到的其他与经营活动有关的现金占经营活动现金流入小计的比重高于行业总体样本中85%的企业。（模型公式编号：191101075）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取企业数据和行业数据\n        enterprise_data = None\n        industry_threshold = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            # 获取企业本年数据\n            if item_type == '企业' and '收到其他与经营活动有关的现金占经营活动现金流入小计比(%)' in item_name:\n                enterprise_value_2024 = item.get('2024')\n                if enterprise_value_2024 is not None:\n                    enterprise_data = float(enterprise_value_2024)\n            \n            # 获取行业85分位数阈值数据\n            elif item_type == '行业' and '85分位数' in item_name:\n                industry_threshold_value = item.get('2024')\n                if industry_threshold_value is not None:\n                    industry_threshold = float(industry_threshold_value)\n        \n        # 检查数据是否完整\n        if enterprise_data is None or industry_threshold is None:\n            return False\n        \n        # 验证风险条件：企业比例高于行业85分位数阈值\n        return enterprise_data > industry_threshold\n        \n    except (ValueError, TypeError, KeyError):\n        return False\n    except Exception as e:\n        return False"
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "少计成本或费用",
    "risk_description": "本年企业营业收入增长超过20%，“经营业务利润”增长率比营业收入增长率高30个百分点以上。（模型公式编号：191101010）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 提取所需的企业数据\n        revenue_growth = None\n        profit_growth = None\n        \n        for item in model_items:\n            if item.get('项目名称') == '营业收入增长率' and item.get('类型') == '企业':\n                revenue_growth = item.get('2024')\n            elif item.get('项目名称') == '经营业务利润增长率' and item.get('类型') == '企业':\n                profit_growth = item.get('2024')\n        \n        # 检查数据是否存在\n        if revenue_growth is None or profit_growth is None:\n            return False\n        \n        # 转换为数值类型\n        revenue_growth_val = float(revenue_growth)\n        profit_growth_val = float(profit_growth)\n        \n        # 验证风险条件\n        condition1 = revenue_growth_val > 20.0\n        condition2 = (profit_growth_val - revenue_growth_val) > 30.0\n        \n        return condition1 and condition2\n        \n    except (ValueError, TypeError, AttributeError):\n        # 处理数据转换错误或缺失数据的情况\n        return False\n    except Exception as e:\n        # 处理其他所有可能的异常\n        return False"
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "少计成本或费用",
    "risk_description": "企业总资产周转率连续两年不到行业均值的90%，本年毛利率超过行业均值的1.1倍，本年营业利润为正，且较上年增长。（模型公式编号：191101051）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        company_asset_turnover_2023 = None\n        company_asset_turnover_2024 = None\n        industry_asset_turnover_2023 = None\n        industry_asset_turnover_2024 = None\n        company_gross_margin_2024 = None\n        industry_gross_margin_2024 = None\n        company_operating_profit_2024 = None\n        company_profit_growth_rate_2024 = None\n        \n        # 遍历所有项目提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_name == '总资产周转率':\n                if item_type == '企业':\n                    company_asset_turnover_2023 = float(item.get('2023', 0))\n                    company_asset_turnover_2024 = float(item.get('2024', 0))\n                elif item_type == '行业':\n                    industry_asset_turnover_2023 = float(item.get('2023', 0))\n                    industry_asset_turnover_2024 = float(item.get('2024', 0))\n            \n            elif item_name == '销售毛利率':\n                if item_type == '企业':\n                    company_gross_margin_2024 = float(item.get('2024', 0))\n                elif item_type == '行业':\n                    industry_gross_margin_2024 = float(item.get('2024', 0))\n            \n            elif item_name == '营业利润' and item_type == '企业':\n                # 处理可能存在的逗号分隔符\n                profit_str = item.get('2024', '0').replace(',', '')\n                company_operating_profit_2024 = float(profit_str)\n            \n            elif item_name == '营业利润增长率' and item_type == '企业':\n                company_profit_growth_rate_2024 = float(item.get('2024', 0))\n        \n        # 检查所有必需数据是否都存在\n        required_data = [\n            company_asset_turnover_2023, company_asset_turnover_2024,\n            industry_asset_turnover_2023, industry_asset_turnover_2024,\n            company_gross_margin_2024, industry_gross_margin_2024,\n            company_operating_profit_2024, company_profit_growth_rate_2024\n        ]\n        \n        if any(x is None for x in required_data):\n            return False\n        \n        # 应用风险判断条件\n        condition1 = company_asset_turnover_2023 < industry_asset_turnover_2023 * 0.9\n        condition2 = company_asset_turnover_2024 < industry_asset_turnover_2024 * 0.9\n        condition3 = company_gross_margin_2024 > industry_gross_margin_2024 * 1.1\n        condition4 = company_operating_profit_2024 > 0\n        condition5 = company_profit_growth_rate_2024 > 0\n        \n        # 所有条件都必须满足才存在风险\n        return condition1 and condition2 and condition3 and condition4 and condition5\n        \n    except (ValueError, TypeError, AttributeError, KeyError):\n        return False"
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "与关联方易货交易",
    "risk_description": "本年企业销售商品、提供劳务收到的现金不到含税营业收入的80%，应付票据及应付账款减少，或增长不到10%。（模型公式编号：191101022）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据\n        operating_revenue_2024 = None\n        cash_received_2024 = None\n        payable_growth_rate_2024 = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', None)\n            \n            if item_name == '营业收入' and item_type == '企业':\n                operating_revenue_2024 = float(str(value_2024).replace(',', '')) if value_2024 else None\n            \n            elif item_name == '销售商品、提供劳务收到的现金' and item_type == '企业':\n                cash_received_2024 = float(str(value_2024).replace(',', '')) if value_2024 else None\n            \n            elif item_name == '应付票据及应付账款增长率' and item_type == '企业':\n                payable_growth_rate_2024 = float(str(value_2024).replace(',', '')) if value_2024 else None\n        \n        # 检查数据是否完整\n        if operating_revenue_2024 is None or cash_received_2024 is None or payable_growth_rate_2024 is None:\n            return False\n        \n        # 计算含税营业收入（增值税率13%）\n        tax_rate = 0.13\n        tax_included_revenue = operating_revenue_2024 * (1 + tax_rate)\n        \n        # 计算现金收入比率\n        cash_revenue_ratio = cash_received_2024 / tax_included_revenue\n        \n        # 验证风险条件\n        condition1 = cash_revenue_ratio < 0.8  # 现金收入比率小于80%\n        condition2 = payable_growth_rate_2024 < 0 or payable_growth_rate_2024 < 10  # 应付账款减少或增长率小于10%\n        \n        return condition1 and condition2\n        \n    except (ValueError, TypeError, ZeroDivisionError) as e:\n        return False\n    except Exception as e:\n        return False"
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "与关联方易货交易",
    "risk_description": "企业销售商品、提供劳务收到的现金连续两年不到含税营业收入的80%，本年应付票据及应付账款减少，或增长不到10%。（模型公式编号：191101024）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据\n        revenue_data = {}\n        cash_received_data = {}\n        payable_growth_data = {}\n        \n        for item in model_items:\n            name = item.get('项目名称')\n            if name == '营业收入':\n                revenue_data['2023'] = float(item.get('2023', 0).replace(',', ''))\n                revenue_data['2024'] = float(item.get('2024', 0).replace(',', ''))\n            elif name == '销售商品、提供劳务收到的现金':\n                cash_received_data['2023'] = float(item.get('2023', 0).replace(',', ''))\n                cash_received_data['2024'] = float(item.get('2024', 0).replace(',', ''))\n            elif name == '应付票据及应付账款增长率':\n                payable_growth_data['2024'] = float(item.get('2024', 0))\n        \n        # 检查数据完整性\n        if (not revenue_data or '2023' not in revenue_data or '2024' not in revenue_data or\n            not cash_received_data or '2023' not in cash_received_data or '2024' not in cash_received_data or\n            not payable_growth_data or '2024' not in payable_growth_data):\n            return False\n        \n        # 计算含税营业收入（假设增值税率为13%）\n        tax_rate = 0.13\n        taxable_revenue_2023 = revenue_data['2023'] * (1 + tax_rate)\n        taxable_revenue_2024 = revenue_data['2024'] * (1 + tax_rate)\n        \n        # 检查现金流与营业收入匹配度\n        cash_ratio_2023 = cash_received_data['2023'] / taxable_revenue_2023\n        cash_ratio_2024 = cash_received_data['2024'] / taxable_revenue_2024\n        \n        # 检查应付账款变动情况\n        payable_growth_2024 = payable_growth_data['2024']\n        \n        # 风险判断条件\n        cash_risk = cash_ratio_2023 < 0.8 and cash_ratio_2024 < 0.8\n        payable_risk = payable_growth_2024 < 0 or payable_growth_2024 < 10\n        \n        # 综合风险判断\n        return cash_risk and payable_risk\n        \n    except (ValueError, TypeError, ZeroDivisionError):\n        return False"
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "信用或资产减值损失错报",
    "risk_description": "本年企业资产减值损失为负值，上年为正值；或本年为正值，上年为负值。（注：由于利润表格式的变化，请自行确认该值系统取数正负号是否正确。）（模型公式编号：210601008）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 检查数据是否足够\n        if len(model_items) < 1:\n            return False\n        \n        # 查找资产减值损失项目\n        impairment_loss_item = None\n        for item in model_items:\n            if item.get('项目名称') == '资产减值损失' and item.get('类型') == '企业':\n                impairment_loss_item = item\n                break\n        \n        if impairment_loss_item is None:\n            return False\n        \n        # 提取2023年和2024年的数据\n        value_2023 = impairment_loss_item.get('2023')\n        value_2024 = impairment_loss_item.get('2024')\n        \n        # 检查数据是否存在\n        if value_2023 is None or value_2024 is None:\n            return False\n        \n        # 转换数据格式（处理千分位分隔符）\n        try:\n            if isinstance(value_2023, str):\n                value_2023 = float(value_2023.replace(',', ''))\n            else:\n                value_2023 = float(value_2023)\n                \n            if isinstance(value_2024, str):\n                value_2024 = float(value_2024.replace(',', ''))\n            else:\n                value_2024 = float(value_2024)\n        except (ValueError, TypeError):\n            return False\n        \n        # 检查符号是否相反\n        if (value_2023 > 0 and value_2024 < 0) or (value_2023 < 0 and value_2024 > 0):\n            return True\n        else:\n            return False\n            \n    except Exception as e:\n        return False"
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "信用或资产减值损失错报",
    "risk_description": "本年企业存货增长超过10%，存货周转率较上年提高，本年存货周转率高于行业总体样本中85%的企业。（模型公式编号：191101048）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        model_items = data_dict.get('model_items', [])\n        \n        # 提取所需数据\n        inventory_growth = None\n        inventory_turnover_2023 = None\n        inventory_turnover_2024 = None\n        industry_turnover_2024 = None\n        \n        for item in model_items:\n            if item.get('项目名称') == '存货增长率' and item.get('类型') == '企业':\n                inventory_growth = float(item.get('2024', 0))\n            elif item.get('项目名称') == '存货周转率【次】':\n                if item.get('类型') == '企业':\n                    inventory_turnover_2023 = float(item.get('2023', 0))\n                    inventory_turnover_2024 = float(item.get('2024', 0))\n                elif item.get('类型') == '行业':\n                    industry_turnover_2024 = float(item.get('2024', 0))\n        \n        # 检查数据完整性\n        if (inventory_growth is None or \n            inventory_turnover_2023 is None or \n            inventory_turnover_2024 is None or \n            industry_turnover_2024 is None):\n            return False\n        \n        # 验证条件1：本年存货增长率 > 10%\n        condition1 = inventory_growth > 10\n        \n        # 验证条件2：本年存货周转率 > 上年存货周转率\n        condition2 = inventory_turnover_2024 > inventory_turnover_2023\n        \n        # 验证条件3：本年企业存货周转率 > 行业85分位数存货周转率\n        # 注意：根据要求，直接使用类型为\"行业\"的数据点值作为85分位数\n        condition3 = inventory_turnover_2024 > industry_turnover_2024\n        \n        # 所有条件都满足时返回True\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, KeyError):\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "本年企业营业收入增长超过20%，应收账款周转率高于行业总体样本中85%的企业。（模型公式编号：191101030）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 提取所需数据\n        revenue_growth_rate = None\n        enterprise_receivables_turnover = None\n        industry_receivables_turnover = None\n        \n        for item in model_items:\n            if item['项目名称'] == '营业收入增长率' and item['类型'] == '企业':\n                revenue_growth_rate = float(item['2024'])\n            elif item['项目名称'] == '应收票据、应收账款、应收款项融资及合同资产周转率【次】':\n                if item['类型'] == '企业':\n                    enterprise_receivables_turnover = float(item['2024'])\n                elif item['类型'] == '行业':\n                    industry_receivables_turnover = float(item['2024'])\n        \n        # 检查数据完整性\n        if revenue_growth_rate is None or enterprise_receivables_turnover is None or industry_receivables_turnover is None:\n            return False\n        \n        # 验证风险条件\n        condition1 = revenue_growth_rate > 20.0\n        condition2 = enterprise_receivables_turnover > industry_receivables_turnover\n        \n        return condition1 and condition2\n        \n    except (ValueError, TypeError, KeyError):\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "本年企业应收账款周转率和存货周转率之比超过5，比行业均值之比大2。（模型公式编号：231201007）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 从data_dict获取model_items\n        model_items = data_dict.get('model_items', [])\n        \n        # 初始化所需变量\n        ent_rec_turnover = None\n        ent_inv_turnover = None\n        ind_rec_turnover = None\n        ind_inv_turnover = None\n        \n        # 遍历model_items提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', None)\n            \n            if value_2024 is None:\n                continue\n                \n            try:\n                value_2024 = float(value_2024)\n            except (ValueError, TypeError):\n                continue\n                \n            # 识别并提取企业应收账款周转率\n            if '应收' in item_name and '周转率' in item_name and item_type == '企业':\n                ent_rec_turnover = value_2024\n            \n            # 识别并提取企业存货周转率\n            elif '存货周转率' in item_name and item_type == '企业':\n                ent_inv_turnover = value_2024\n            \n            # 识别并提取行业应收账款周转率\n            elif '应收' in item_name and '周转率' in item_name and item_type == '行业':\n                ind_rec_turnover = value_2024\n            \n            # 识别并提取行业存货周转率\n            elif '存货周转率' in item_name and item_type == '行业':\n                ind_inv_turnover = value_2024\n        \n        # 检查所有必需数据是否都存在\n        if None in [ent_rec_turnover, ent_inv_turnover, ind_rec_turnover, ind_inv_turnover]:\n            return False\n        \n        # 计算企业应收账款周转率与存货周转率的比值\n        ent_ratio = ent_rec_turnover / ent_inv_turnover\n        \n        # 计算行业应收账款周转率与存货周转率的比值\n        ind_ratio = ind_rec_turnover / ind_inv_turnover\n        \n        # 判断风险条件\n        risk_condition_1 = ent_ratio > 5\n        risk_condition_2 = (ent_ratio - ind_ratio) > 2\n        \n        # 返回风险判断结果\n        return risk_condition_1 and risk_condition_2\n        \n    except Exception as e:\n        # 处理任何异常情况，返回False\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业营业收入增长超过20%，且高于销售商品和提供劳务收到的现金增长率的1.1倍，行业营业收入增长率均值低于销售商品和提供劳务收到的现金增长率均值。（模型公式编号：191101003）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        corp_revenue_growth_2024 = None\n        corp_cash_growth_2024 = None\n        ind_revenue_growth_2023 = None\n        ind_revenue_growth_2024 = None\n        ind_cash_growth_2023 = None\n        ind_cash_growth_2024 = None\n        \n        # 提取数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_name == '营业收入增长率' and item_type == '企业':\n                corp_revenue_growth_2024 = item.get('2024')\n            elif item_name == '销售商品、提供劳务收到的现金增长率' and item_type == '企业':\n                corp_cash_growth_2024 = item.get('2024')\n            elif item_name == '营业收入增长率' and item_type == '行业':\n                ind_revenue_growth_2023 = item.get('2023')\n                ind_revenue_growth_2024 = item.get('2024')\n            elif item_name == '销售商品、提供劳务收到的现金增长率' and item_type == '行业':\n                ind_cash_growth_2023 = item.get('2023')\n                ind_cash_growth_2024 = item.get('2024')\n        \n        # 检查数据完整性\n        if (corp_revenue_growth_2024 is None or corp_cash_growth_2024 is None or\n            ind_revenue_growth_2023 is None or ind_revenue_growth_2024 is None or\n            ind_cash_growth_2023 is None or ind_cash_growth_2024 is None):\n            return False\n        \n        # 转换数据类型\n        corp_revenue_growth_2024 = float(corp_revenue_growth_2024)\n        corp_cash_growth_2024 = float(corp_cash_growth_2024)\n        ind_revenue_growth_2023 = float(ind_revenue_growth_2023)\n        ind_revenue_growth_2024 = float(ind_revenue_growth_2024)\n        ind_cash_growth_2023 = float(ind_cash_growth_2023)\n        ind_cash_growth_2024 = float(ind_cash_growth_2024)\n        \n        # 计算行业均值\n        ind_revenue_growth_mean = np.mean([ind_revenue_growth_2023, ind_revenue_growth_2024])\n        ind_cash_growth_mean = np.mean([ind_cash_growth_2023, ind_cash_growth_2024])\n        \n        # 验证风险条件\n        condition1 = corp_revenue_growth_2024 > 20.0\n        condition2 = corp_revenue_growth_2024 > 1.1 * corp_cash_growth_2024\n        condition3 = ind_revenue_growth_mean < ind_cash_growth_mean\n        \n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, KeyError, IndexError):\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业营业收入增长超过20%，营业收入增长率超过销售商品和提供劳务收到的现金增长率的1.5倍。（模型公式编号：210101002）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需指标的企业数据\n        revenue_growth_rate = None\n        cash_growth_rate = None\n        \n        for item in model_items:\n            if item.get('项目名称') == '营业收入增长率' and item.get('类型') == '企业':\n                revenue_growth_rate = item.get('2024')\n            elif item.get('项目名称') == '销售商品、提供劳务收到的现金增长率' and item.get('类型') == '企业':\n                cash_growth_rate = item.get('2024')\n        \n        # 检查数据是否存在\n        if revenue_growth_rate is None or cash_growth_rate is None:\n            return False\n        \n        # 转换数据类型\n        revenue_growth_rate = float(revenue_growth_rate)\n        cash_growth_rate = float(cash_growth_rate)\n        \n        # 验证风险条件\n        condition1 = revenue_growth_rate > 20.0\n        condition2 = revenue_growth_rate > 1.5 * cash_growth_rate\n        \n        return condition1 and condition2\n        \n    except (ValueError, TypeError, KeyError):\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "持续经营假设不合理",
    "risk_description": "企业经营活动产生的现金流量净额连续三年为负，本年营业利润较上年增长。（模型公式编号：191101053）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据\n        cash_flow_data = {}\n        operating_profit_data = {}\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_name == '经营活动产生的现金流量净额' and item_type == '企业':\n                cash_flow_data['2023'] = float(item.get('2023', '0').replace(',', ''))\n                cash_flow_data['2024'] = float(item.get('2024', '0').replace(',', ''))\n            \n            elif item_name == '营业利润增长率' and item_type == '企业':\n                # 尝试获取营业利润增长率数据\n                if '2023' in item:\n                    operating_profit_data['2023'] = float(item.get('2023', '0').replace(',', ''))\n                if '2024' in item:\n                    operating_profit_data['2024'] = float(item.get('2024', '0').replace(',', ''))\n        \n        # 检查数据完整性\n        # 条件1：经营活动产生的现金流量净额连续三年为负（2022-2024年）\n        # 由于缺少2022年数据，且要求数据不足时返回False\n        if len(cash_flow_data) < 2:  # 缺少2023或2024年数据\n            return False\n        \n        # 条件2：本年（2024年）营业利润较上年（2023年）实现正增长\n        # 由于营业利润增长率数据缺失，且要求数据不足时返回False\n        if len(operating_profit_data) < 2:  # 缺少2023或2024年营业利润增长率数据\n            return False\n        \n        # 验证条件1：现金流量净额连续三年为负\n        # 由于缺少2022年数据，无法验证连续三年为负的条件\n        # 根据要求，数据不足时返回False\n        return False\n        \n    except (ValueError, TypeError, AttributeError, KeyError):\n        return False\n    except Exception as e:\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "与供应商存在潜在关联关系",
    "risk_description": "本年企业不含税应付票据及应付账款超过存货，在建工程减少或增长不到10%，且应付票据及应付账款占总资产比重超过行业均值。（模型公式编号：191101101）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 从data_dict中获取model_items\n        model_items = data_dict['model_items']\n        \n        # 初始化所需变量\n        accounts_payable_2024 = None\n        inventory_2024 = None\n        construction_in_progress_2023 = None\n        construction_in_progress_2024 = None\n        total_assets_2024 = None\n        industry_avg_ratio = None\n        \n        # 遍历model_items提取所需数据\n        for item in model_items:\n            item_name = item['项目名称']\n            item_type = item['类型']\n            \n            if item_name == '应付票据及应付账款（不含税）' and item_type == '企业':\n                accounts_payable_2024 = float(item['2024'].replace(',', '')) if item['2024'] else None\n            \n            elif item_name == '存货' and item_type == '企业':\n                inventory_2024 = float(item['2024'].replace(',', '')) if item['2024'] else None\n            \n            elif item_name == '在建工程' and item_type == '企业':\n                construction_in_progress_2023 = float(item['2023'].replace(',', '')) if item['2023'] else None\n                construction_in_progress_2024 = float(item['2024'].replace(',', '')) if item['2024'] else None\n            \n            elif item_name == '总资产' and item_type == '企业':\n                total_assets_2024 = float(item['2024'].replace(',', '')) if item['2024'] else None\n            \n            elif item_name == '应付票据及应付账款占总资产比重' and item_type == '行业':\n                industry_avg_ratio = float(item['2024'].replace(',', '')) if item['2024'] else None\n        \n        # 检查数据完整性\n        if (accounts_payable_2024 is None or inventory_2024 is None or \n            construction_in_progress_2023 is None or construction_in_progress_2024 is None or \n            total_assets_2024 is None or industry_avg_ratio is None):\n            return False\n        \n        # 计算条件1：本年企业不含税应付票据及应付账款 > 存货\n        condition1 = accounts_payable_2024 > inventory_2024\n        \n        # 计算条件2：在建工程减少或增长不到10%（|在建工程增长率| <= 10%）\n        construction_growth_rate = ((construction_in_progress_2024 - construction_in_progress_2023) / \n                                   construction_in_progress_2023 * 100)\n        condition2 = abs(construction_growth_rate) <= 10\n        \n        # 计算条件3：应付票据及应付账款占总资产比重 > 行业均值\n        company_ratio = accounts_payable_2024 / total_assets_2024 * 100\n        condition3 = company_ratio > industry_avg_ratio\n        \n        # 所有条件同时满足时返回True，否则返回False\n        return condition1 and condition2 and condition3\n        \n    except Exception as e:\n        # 处理任何可能的异常，返回False\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "与供应商存在潜在关联关系",
    "risk_description": "本年企业应付账款占存货的比例高于行业总体样本中85%的企业。（模型公式编号：210601021）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 提取所需数据\n        enterprise_payable_2024 = None\n        enterprise_inventory_2024 = None\n        industry_85_percentile = None\n        \n        for item in model_items:\n            if item['项目名称'] == '应付票据及应付账款' and item['类型'] == '企业':\n                enterprise_payable_2024 = float(str(item['2024']).replace(',', ''))\n            elif item['项目名称'] == '存货' and item['类型'] == '企业':\n                enterprise_inventory_2024 = float(str(item['2024']).replace(',', ''))\n            elif item['项目名称'] == '应付票据及应付账款占负债和所有者权益总计比(%)' and item['类型'] == '行业':\n                industry_85_percentile = float(str(item['2024']).replace(',', ''))\n        \n        # 检查数据是否完整\n        if enterprise_payable_2024 is None or enterprise_inventory_2024 is None or industry_85_percentile is None:\n            return False\n        \n        # 计算企业应付账款占存货的比例\n        if enterprise_inventory_2024 == 0:\n            return False\n            \n        payable_inventory_ratio = enterprise_payable_2024 / enterprise_inventory_2024\n        \n        # 验证风险条件：企业比例高于行业85分位数\n        return payable_inventory_ratio > industry_85_percentile\n        \n    except (ValueError, TypeError, ZeroDivisionError):\n        return False\n    except Exception as e:\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "货币资金错报",
    "risk_description": "本年企业货币资金超过5000万元，货币资金占资产总计的比重超过行业均值，利息收入占本年货币资金平均余额的比例不到1%。（模型公式编号：191101073）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n            \n        # 提取所需数据\n        enterprise_cash_2024 = None\n        enterprise_total_assets_2024 = None\n        industry_cash_ratio_2024 = None\n        enterprise_interest_income_2024 = None\n        enterprise_avg_cash_balance_2024 = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', None)\n            \n            if value_2024 is None:\n                continue\n                \n            try:\n                numeric_value = float(value_2024)\n            except (ValueError, TypeError):\n                continue\n                \n            if item_name == '货币资金' and item_type == '企业':\n                enterprise_cash_2024 = numeric_value\n            elif item_name == '资产总计' and item_type == '企业':\n                enterprise_total_assets_2024 = numeric_value\n            elif item_name == '货币资金占资产总计的比重' and item_type == '行业':\n                industry_cash_ratio_2024 = numeric_value\n            elif item_name == '利息收入' and item_type == '企业':\n                enterprise_interest_income_2024 = numeric_value\n            elif item_name == '货币资金平均余额' and item_type == '企业':\n                enterprise_avg_cash_balance_2024 = numeric_value\n        \n        # 检查数据完整性\n        if (enterprise_cash_2024 is None or enterprise_total_assets_2024 is None or \n            industry_cash_ratio_2024 is None or enterprise_interest_income_2024 is None or \n            enterprise_avg_cash_balance_2024 is None):\n            return False\n        \n        # 条件1: 本年企业货币资金 > 5000万元\n        condition1 = enterprise_cash_2024 > 5000\n        \n        # 条件2: 货币资金占资产总计的比重 > 行业均值\n        cash_ratio = (enterprise_cash_2024 / enterprise_total_assets_2024) * 100\n        condition2 = cash_ratio > industry_cash_ratio_2024\n        \n        # 条件3: 利息收入占本年货币资金平均余额的比例 < 1%\n        interest_ratio = (enterprise_interest_income_2024 / enterprise_avg_cash_balance_2024) * 100\n        condition3 = interest_ratio < 1\n        \n        # 所有条件同时满足时存在风险\n        return condition1 and condition2 and condition3\n        \n    except Exception as e:\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "违规资金收付",
    "risk_description": "本年企业收到的其他与经营活动有关的现金占经营活动现金流入小计的比重高于行业总体样本中85%的企业。（模型公式编号：191101075）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取企业数据和行业数据\n        enterprise_data = {}\n        industry_data = {}\n        \n        for item in model_items:\n            item_type = item.get('类型', '')\n            item_name = item.get('项目名称', '')\n            \n            if item_type == '企业':\n                enterprise_data[item_name] = item\n            elif item_type == '行业':\n                industry_data[item_name] = item\n        \n        # 检查所需数据是否存在\n        required_enterprise_items = ['收到的其他与经营活动有关的现金', '经营活动现金流入小计']\n        required_industry_items = ['收到的其他与经营活动有关的现金占经营活动现金流入小计比重85分位值']\n        \n        # 验证企业数据完整性\n        for item_name in required_enterprise_items:\n            if item_name not in enterprise_data:\n                return False\n        \n        # 验证行业数据完整性\n        industry_threshold_item = None\n        for item_name in industry_data.keys():\n            if '85' in item_name and '收到的其他与经营活动有关的现金' in item_name and '经营活动现金流入小计' in item_name:\n                industry_threshold_item = item_name\n                break\n        \n        if industry_threshold_item is None:\n            return False\n        \n        # 获取企业2024年数据\n        cash_other_operating = enterprise_data['收到的其他与经营活动有关的现金'].get('2024')\n        cash_inflow_total = enterprise_data['经营活动现金流入小计'].get('2024')\n        \n        # 获取行业85分位值（2024年）\n        industry_threshold = industry_data[industry_threshold_item].get('2024')\n        \n        # 检查数据有效性\n        if (cash_other_operating is None or cash_inflow_total is None or \n            industry_threshold is None):\n            return False\n        \n        # 转换为数值类型\n        try:\n            cash_other_operating = float(str(cash_other_operating).replace(',', ''))\n            cash_inflow_total = float(str(cash_inflow_total).replace(',', ''))\n            industry_threshold = float(str(industry_threshold).replace(',', ''))\n        except (ValueError, TypeError):\n            return False\n        \n        # 计算企业占比\n        if cash_inflow_total == 0:\n            return False\n        \n        enterprise_ratio = (cash_other_operating / cash_inflow_total) * 100\n        \n        # 验证风险条件：企业占比 > 行业85分位值\n        return enterprise_ratio > industry_threshold\n        \n    except Exception as e:\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "违规资金收付",
    "risk_description": "以前少计、本年多计成本或费用",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 检查数据是否足够\n        if len(model_items) < 1:\n            return False\n        \n        # 查找所需的企业数据点\n        enterprise_data = None\n        for item in model_items:\n            if (item.get('项目名称') == '收到其他与经营活动有关的现金占经营活动现金流入小计比(%)' and \n                item.get('类型') == '企业'):\n                enterprise_data = item\n                break\n        \n        # 如果找不到企业数据，返回False\n        if enterprise_data is None:\n            return False\n        \n        # 提取2023年和2024年的数据\n        value_2023 = enterprise_data.get('2023')\n        value_2024 = enterprise_data.get('2024')\n        \n        # 检查数据是否存在\n        if value_2023 is None or value_2024 is None:\n            return False\n        \n        # 转换为数值类型\n        ratio_2023 = float(value_2023)\n        ratio_2024 = float(value_2024)\n        \n        # 计算下降比例\n        decline_ratio = (ratio_2023 - ratio_2024) / ratio_2023\n        \n        # 判断是否存在风险：比例异常下降（超过20%）\n        if decline_ratio > 0.2:\n            return True\n        else:\n            return False\n            \n    except (ValueError, TypeError, KeyError, ZeroDivisionError):\n        # 处理所有可能的异常情况\n        return False\n    except Exception as e:\n        # 处理其他未知异常\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "违规资金收付",
    "risk_description": "本年企业管理费用占营业收入的比重较上年的变动值比行业的变动值高5个百分点。（模型公式编号：191101070）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 从data_dict中获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 提取企业和行业数据\n        enterprise_data = None\n        industry_data = None\n        \n        for item in model_items:\n            if item.get('项目名称') == '管理费用占营业收入比(%)':\n                if item.get('类型') == '企业':\n                    enterprise_data = item\n                elif item.get('类型') == '行业':\n                    industry_data = item\n        \n        # 检查数据是否完整\n        if enterprise_data is None or industry_data is None:\n            return False\n        \n        # 提取具体数值并转换为浮点数\n        enterprise_2023 = float(enterprise_data.get('2023', 0))\n        enterprise_2024 = float(enterprise_data.get('2024', 0))\n        industry_2023 = float(industry_data.get('2023', 0))\n        industry_2024 = float(industry_data.get('2024', 0))\n        \n        # 计算变动值\n        enterprise_change = enterprise_2024 - enterprise_2023\n        industry_change = industry_2024 - industry_2023\n        \n        # 判断风险条件\n        risk_condition = enterprise_change - industry_change > 5\n        \n        return risk_condition\n        \n    except (ValueError, TypeError, KeyError, AttributeError):\n        # 处理所有可能的异常情况\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "信用或资产减值损失错报",
    "risk_description": "本年企业在建工程较上年变动不超过10%，在建工程占资产总计的比重高于行业总体样本中85%的企业。（模型公式编号：210601022）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据\n        construction_growth_rate = None\n        construction_ratio_company = None\n        construction_ratio_industry = None\n        \n        for item in model_items:\n            if item['项目名称'] == '在建工程增长率' and item['类型'] == '企业':\n                construction_growth_rate = float(item['2024'])\n            elif item['项目名称'] == '在建工程占资产总计比(%)' and item['类型'] == '企业':\n                construction_ratio_company = float(item['2024'])\n            elif item['项目名称'] == '在建工程占资产总计比(%)' and item['类型'] == '行业':\n                construction_ratio_industry = float(item['2024'])\n        \n        # 检查数据完整性\n        if construction_growth_rate is None or construction_ratio_company is None or construction_ratio_industry is None:\n            return False\n        \n        # 条件1: 本年企业在建工程较上年变动不超过10%\n        condition1 = abs(construction_growth_rate) <= 10\n        \n        # 条件2: 企业在建工程占资产总计的比重高于行业85%分位数\n        # 注意：根据要求，直接使用行业类型的数据点作为85%分位数\n        condition2 = construction_ratio_company > construction_ratio_industry\n        \n        # 两个条件同时满足时存在风险\n        return condition1 and condition2\n        \n    except (ValueError, TypeError, KeyError):\n        return False\n    except Exception as e:\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "投资收益或资产处置收益错报",
    "risk_description": "企业总资产周转率连续两年低于行业均值，“经营业务利润”连续两年为负，本年营业利润较上年增长。（模型公式编号：191101019）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需数据变量\n        company_tat_2023 = None\n        company_tat_2024 = None\n        industry_tat_2023 = None\n        industry_tat_2024 = None\n        company_operating_profit_2023 = None\n        company_operating_profit_2024 = None\n        profit_growth_rate_2024 = None\n        \n        # 遍历model_items提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_name == '总资产周转率':\n                if item_type == '企业':\n                    company_tat_2023 = float(item.get('2023', 0)) if item.get('2023') else None\n                    company_tat_2024 = float(item.get('2024', 0)) if item.get('2024') else None\n                elif item_type == '行业':\n                    industry_tat_2023 = float(item.get('2023', 0)) if item.get('2023') else None\n                    industry_tat_2024 = float(item.get('2024', 0)) if item.get('2024') else None\n            \n            elif item_name == '经营业务利润':\n                if item_type == '企业':\n                    # 处理带逗号的字符串格式\n                    profit_2023 = item.get('2023', '').replace(',', '') if item.get('2023') else ''\n                    profit_2024 = item.get('2024', '').replace(',', '') if item.get('2024') else ''\n                    \n                    company_operating_profit_2023 = float(profit_2023) if profit_2023 else None\n                    company_operating_profit_2024 = float(profit_2024) if profit_2024 else None\n            \n            elif item_name == '营业利润增长率':\n                if item_type == '企业':\n                    profit_growth_rate_2024 = float(item.get('2024', 0)) if item.get('2024') else None\n        \n        # 检查数据完整性\n        if (company_tat_2023 is None or company_tat_2024 is None or \n            industry_tat_2023 is None or industry_tat_2024 is None or \n            company_operating_profit_2023 is None or company_operating_profit_2024 is None or \n            profit_growth_rate_2024 is None):\n            return False\n        \n        # 验证条件1：企业总资产周转率连续两年低于行业均值\n        condition1 = (company_tat_2023 < industry_tat_2023 and \n                     company_tat_2024 < industry_tat_2024)\n        \n        # 验证条件2：企业经营业务利润连续两年为负值\n        condition2 = (company_operating_profit_2023 < 0 and \n                     company_operating_profit_2024 < 0)\n        \n        # 验证条件3：本年营业利润较上年增长（增长率为正）\n        condition3 = profit_growth_rate_2024 > 0\n        \n        # 所有条件同时满足时返回True（存在风险）\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, AttributeError):\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "非正常筹资",
    "risk_description": "本年企业短期借款、一年内到期的非流动负债、长期借款之和比上年减少，应收账款增长，取得借款收到的现金小于偿还债务支付的现金，企业财务费用增长超过50%。（模型公式编号：191101102）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 创建数据字典便于访问\n        data_map = {}\n        for item in model_items:\n            name = item.get('项目名称')\n            if name:\n                data_map[name] = item\n        \n        # 检查必要数据是否存在\n        required_fields = ['短期借款', '一年内到期的非流动负债', '长期借款', \n                          '应收票据、应收账款、应收款项融资及合同资产增长率',\n                          '取得借款收到的现金', '偿还债务支付的现金', '财务费用增长率']\n        \n        for field in required_fields:\n            if field not in data_map:\n                return False\n        \n        # 提取并转换数据\n        def parse_value(value_str):\n            if value_str == '-' or value_str is None:\n                return None\n            try:\n                # 处理带逗号的数字字符串\n                cleaned = str(value_str).replace(',', '')\n                return float(cleaned)\n            except:\n                return None\n        \n        # 获取本年借款数据\n        current_short_term_loan = parse_value(data_map['短期借款']['2024'])\n        current_current_liabilities = parse_value(data_map['一年内到期的非流动负债']['2024'])\n        current_long_term_loan = parse_value(data_map['长期借款']['2024'])\n        \n        # 获取上年借款数据\n        previous_short_term_loan = parse_value(data_map['短期借款']['2023'])\n        previous_current_liabilities = parse_value(data_map['一年内到期的非流动负债']['2023'])\n        previous_long_term_loan = parse_value(data_map['长期借款']['2023'])\n        \n        # 检查借款数据完整性\n        if None in [current_short_term_loan, current_current_liabilities, current_long_term_loan,\n                   previous_short_term_loan, previous_current_liabilities, previous_long_term_loan]:\n            return False\n        \n        # 条件1: 本年借款总额 < 上年借款总额\n        current_total_loans = current_short_term_loan + current_current_liabilities + current_long_term_loan\n        previous_total_loans = previous_short_term_loan + previous_current_liabilities + previous_long_term_loan\n        condition1 = current_total_loans < previous_total_loans\n        \n        # 条件2: 应收账款增长率 > 0\n        ar_growth_rate = parse_value(data_map['应收票据、应收账款、应收款项融资及合同资产增长率']['2024'])\n        if ar_growth_rate is None:\n            return False\n        condition2 = ar_growth_rate > 0\n        \n        # 条件3: 取得借款收到的现金 < 偿还债务支付的现金\n        loan_received = parse_value(data_map['取得借款收到的现金']['2024'])\n        debt_paid = parse_value(data_map['偿还债务支付的现金']['2024'])\n        if None in [loan_received, debt_paid]:\n            return False\n        condition3 = loan_received < debt_paid\n        \n        # 条件4: 财务费用增长率 > 50%\n        financial_expense_growth = parse_value(data_map['财务费用增长率']['2024'])\n        if financial_expense_growth is None:\n            return False\n        condition4 = financial_expense_growth > 50\n        \n        # 所有条件都满足时返回True（存在风险）\n        return condition1 and condition2 and condition3 and condition4\n        \n    except Exception as e:\n        # 处理任何异常情况\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "重大资产重组",
    "risk_description": "本年企业资产总计增长超过50%，或营业收入增长超过50%，或所有者权益合计增长超过50%。（模型公式编号：191101108）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 检查数据是否足够\n        if not model_items or len(model_items) < 3:\n            return False\n        \n        # 定义需要检查的指标名称\n        target_items = ['资产总计增长率', '营业收入增长率', '所有者权益合计增长率']\n        \n        # 遍历所有项目数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            \n            # 只处理目标指标的企业数据\n            if item_name in target_items and item.get('类型') == '企业':\n                # 获取2024年增长率数据\n                growth_rate_2024 = item.get('2024', '')\n                \n                # 检查数据是否存在且可转换为数值\n                if growth_rate_2024 == '':\n                    continue\n                \n                try:\n                    growth_rate = float(growth_rate_2024)\n                    \n                    # 检查增长率是否超过50%\n                    if growth_rate > 50.0:\n                        return True\n                        \n                except (ValueError, TypeError):\n                    continue\n        \n        # 所有指标都未超过50%阈值\n        return False\n        \n    except Exception as e:\n        # 发生任何异常时返回False\n        return False"
  }
]