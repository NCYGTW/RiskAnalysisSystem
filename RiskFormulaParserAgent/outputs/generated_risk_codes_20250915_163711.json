[
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "本年企业营业收入增长超过20%，应收账款周转率高于行业总体样本中85%的企业。（模型公式编号：191101030）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        enterprise_revenue_growth = None\n        enterprise_receivables_turnover = None\n        industry_receivables_turnover = None\n        \n        # 提取企业数据和行业数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', '')\n            \n            # 跳过空值\n            if not value_2024:\n                continue\n                \n            # 转换数值类型\n            try:\n                numeric_value = float(value_2024)\n            except (ValueError, TypeError):\n                continue\n            \n            # 识别营业收入增长率\n            if '营业收入增长率' in item_name and item_type == '企业':\n                enterprise_revenue_growth = numeric_value\n            \n            # 识别应收账款周转率（企业）\n            elif '应收票据、应收账款、应收款项融资及合同资产周转率' in item_name and item_type == '企业':\n                enterprise_receivables_turnover = numeric_value\n            \n            # 识别应收账款周转率（行业）\n            elif '应收票据、应收账款、应收款项融资及合同资产周转率' in item_name and item_type == '行业':\n                industry_receivables_turnover = numeric_value\n        \n        # 检查数据完整性\n        if (enterprise_revenue_growth is None or \n            enterprise_receivables_turnover is None or \n            industry_receivables_turnover is None):\n            return False\n        \n        # 应用风险判断条件\n        # 1. 本年营业收入增长率超过20%\n        # 2. 企业应收账款周转率高于行业85%分位数水平\n        # 注意：根据要求，行业85%分位数直接使用类型为\"行业\"的数据点值\n        if (enterprise_revenue_growth > 20 and \n            enterprise_receivables_turnover > industry_receivables_turnover):\n            return True\n        else:\n            return False\n            \n    except Exception as e:\n        # 处理所有可能的异常情况\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "本年企业“每元固定资产提供的营业收入”超过上年的1.2倍，固定资产减少不到10%，营业收入增长超过20%。（模型公式编号：191101080）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据\n        current_fixed_asset_revenue = None\n        previous_fixed_asset_revenue = None\n        fixed_asset_growth_rate = None\n        revenue_growth_rate = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_name == '每元固定资产及使用权资产提供的营业收入' and item_type == '企业':\n                current_fixed_asset_revenue = float(item.get('2024', 0))\n                previous_fixed_asset_revenue = float(item.get('2023', 0))\n            \n            elif item_name == '固定资产及使用权资产增长率' and item_type == '企业':\n                fixed_asset_growth_rate = float(item.get('2024', 0))\n            \n            elif item_name == '营业收入增长率' and item_type == '企业':\n                revenue_growth_rate = float(item.get('2024', 0))\n        \n        # 检查数据是否完整\n        if None in [current_fixed_asset_revenue, previous_fixed_asset_revenue, \n                   fixed_asset_growth_rate, revenue_growth_rate]:\n            return False\n        \n        # 验证风险条件\n        condition1 = current_fixed_asset_revenue > previous_fixed_asset_revenue * 1.2\n        condition2 = fixed_asset_growth_rate > -10  # 固定资产减少率 < 10% 等价于 增长率 > -10%\n        condition3 = revenue_growth_rate > 20\n        \n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, KeyError):\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业营业收入增长超过20%，且大于销售商品和提供劳务收到的现金增长率，同时其差额超过行业均值的3倍。（模型公式编号：191101002）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 从data_dict获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 如果数据为空，返回False\n        if not model_items:\n            return False\n        \n        # 初始化各指标变量\n        company_revenue_growth_2024 = None\n        company_cash_growth_2024 = None\n        industry_revenue_growth_2024 = None\n        industry_cash_growth_2024 = None\n        \n        # 遍历model_items提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', None)\n            \n            # 转换2024年值为浮点数\n            if value_2024 is not None:\n                try:\n                    value_2024 = float(value_2024)\n                except (ValueError, TypeError):\n                    continue\n            \n            # 根据项目名称和类型提取对应数据\n            if item_name == '营业收入增长率':\n                if item_type == '企业':\n                    company_revenue_growth_2024 = value_2024\n                elif item_type == '行业':\n                    industry_revenue_growth_2024 = value_2024\n            \n            elif item_name == '销售商品、提供劳务收到的现金增长率':\n                if item_type == '企业':\n                    company_cash_growth_2024 = value_2024\n                elif item_type == '行业':\n                    industry_cash_growth_2024 = value_2024\n        \n        # 检查所有必需数据是否都存在\n        if (company_revenue_growth_2024 is None or \n            company_cash_growth_2024 is None or \n            industry_revenue_growth_2024 is None or \n            industry_cash_growth_2024 is None):\n            return False\n        \n        # 应用风险判断条件\n        condition1 = company_revenue_growth_2024 > 20\n        condition2 = company_revenue_growth_2024 > company_cash_growth_2024\n        condition3 = (company_revenue_growth_2024 - company_cash_growth_2024) > 3 * (industry_revenue_growth_2024 - industry_cash_growth_2024)\n        \n        # 所有条件都满足时返回True（存在风险）\n        return condition1 and condition2 and condition3\n        \n    except Exception as e as e:\n        # 处理任何异常情况，返回False\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年行业营业收入增长率高于销售商品、提供劳务收到的现金增长率，且其差额和上年比扩大；同时，本年企业营业收入增长率高于销售商品、提供劳务收到的现金增长率且和上年比差异扩大；且企业本年营业收入增长率和销售商品、提供劳务收到的现金增长率的差额比行业高5个百分点以上。（模型公式编号：191101018）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        model_items = data_dict.get('model_items', [])\n        \n        # 初始化所有需要的变量\n        company_revenue_growth_2024 = None\n        company_revenue_growth_2023 = None\n        company_cash_growth_2024 = None\n        company_cash_growth_2023 = None\n        industry_revenue_growth_2024 = None\n        industry_revenue_growth_2023 = None\n        industry_cash_growth_2024 = None\n        industry_cash_growth_2023 = None\n        \n        # 从model_items中提取数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_type == '企业':\n                if item_name == '营业收入增长率':\n                    company_revenue_growth_2024 = float(item.get('2024', 0))\n                    company_revenue_growth_2023 = float(item.get('2023', 0))\n                elif item_name == '销售商品、提供劳务收到的现金增长率':\n                    company_cash_growth_2024 = float(item.get('2024', 0))\n                    company_cash_growth_2023 = float(item.get('2023', 0))\n            \n            elif item_type == '行业':\n                if item_name == '营业收入增长率':\n                    industry_revenue_growth_2024 = float(item.get('2024', 0))\n                    industry_revenue_growth_2023 = float(item.get('2023', 0))\n                elif item_name == '销售商品、提供劳务收到的现金增长率':\n                    industry_cash_growth_2024 = float(item.get('2024', 0))\n                    industry_cash_growth_2023 = float(item.get('2023', 0))\n        \n        # 检查是否有任何数据缺失\n        if (company_revenue_growth_2024 is None or company_revenue_growth_2023 is None or\n            company_cash_growth_2024 is None or company_cash_growth_2023 is None or\n            industry_revenue_growth_2024 is None or industry_revenue_growth_2023 is None or\n            industry_cash_growth_2024 is None or industry_cash_growth_2023 is None):\n            return False\n        \n        # 验证条件1：本年行业营业收入增长率 > 行业销售商品、提供劳务收到的现金增长率\n        condition1 = industry_revenue_growth_2024 > industry_cash_growth_2024\n        \n        # 验证条件2：(本年行业营业收入增长率 - 行业销售商品、提供劳务收到的现金增长率) > (上年行业营业收入增长率 - 上年行业销售商品、提供劳务收到的现金增长率)\n        industry_diff_2024 = industry_revenue_growth_2024 - industry_cash_growth_2024\n        industry_diff_2023 = industry_revenue_growth_2023 - industry_cash_growth_2023\n        condition2 = industry_diff_2024 > industry_diff_2023\n        \n        # 验证条件3：本年企业营业收入增长率 > 企业销售商品、提供劳务收到的现金增长率\n        condition3 = company_revenue_growth_2024 > company_cash_growth_2024\n        \n        # 验证条件4：(本年企业营业收入增长率 - 企业销售商品、提供劳务收到的现金增长率) > (上年企业营业收入增长率 - 上年企业销售商品、提供劳务收到的现金增长率)\n        company_diff_2024 = company_revenue_growth_2024 - company_cash_growth_2024\n        company_diff_2023 = company_revenue_growth_2023 - company_cash_growth_2023\n        condition4 = company_diff_2024 > company_diff_2023\n        \n        # 验证条件5：(本年企业营业收入增长率 - 企业销售商品、提供劳务收到的现金增长率) - (本年行业营业收入增长率 - 行业销售商品、提供劳务收到的现金增长率) > 5\n        condition5 = (company_diff_2024 - industry_diff_2024) > 5\n        \n        # 所有条件都满足时返回True，否则返回False\n        return condition1 and condition2 and condition3 and condition4 and condition5\n        \n    except (ValueError, TypeError, KeyError, AttributeError):\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业应收账款周转率降低，存货周转率提高，营业收入增长超过20%。（模型公式编号：191101035）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n            \n        # 提取所需数据\n        ar_turnover_2023 = None\n        ar_turnover_2024 = None\n        inventory_turnover_2023 = None\n        inventory_turnover_2024 = None\n        revenue_growth_2024 = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if '应收票据、应收账款、应收款项融资及合同资产周转率' in item_name and item_type == '企业':\n                ar_turnover_2023 = float(item.get('2023', 0))\n                ar_turnover_2024 = float(item.get('2024', 0))\n            \n            elif '存货周转率' in item_name and item_type == '企业':\n                inventory_turnover_2023 = float(item.get('2023', 0))\n                inventory_turnover_2024 = float(item.get('2024', 0))\n            \n            elif '营业收入增长率' in item_name and item_type == '企业':\n                revenue_growth_2024 = float(item.get('2024', 0))\n        \n        # 检查数据完整性\n        if (ar_turnover_2023 is None or ar_turnover_2024 is None or \n            inventory_turnover_2023 is None or inventory_turnover_2024 is None or \n            revenue_growth_2024 is None):\n            return False\n        \n        # 验证风险条件\n        condition1 = ar_turnover_2024 < ar_turnover_2023  # 应收账款周转率降低\n        condition2 = inventory_turnover_2024 > inventory_turnover_2023  # 存货周转率提高\n        condition3 = revenue_growth_2024 > 20  # 营业收入增长率超过20%\n        \n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, KeyError):\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业股本较上年无变动，长期股权投资变动不超过5%，营业收入增长超过30%。（模型公式编号：191101112）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 如果数据缺失或不足，返回False\n        if not model_items or len(model_items) < 3:\n            return False\n        \n        # 提取所需指标的企业数据\n        equity_growth = None\n        investment_growth = None\n        revenue_growth = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            # 只处理企业类型的数据\n            if item_type == '企业':\n                if item_name == '股本增长率':\n                    equity_growth = item.get('2024')\n                elif item_name == '长期股权投资增长率':\n                    investment_growth = item.get('2024')\n                elif item_name == '营业收入增长率':\n                    revenue_growth = item.get('2024')\n        \n        # 检查是否所有必要数据都存在\n        if equity_growth is None or investment_growth is None or revenue_growth is None:\n            return False\n        \n        # 转换为数值类型\n        equity_growth_val = float(equity_growth)\n        investment_growth_val = float(investment_growth)\n        revenue_growth_val = float(revenue_growth)\n        \n        # 验证风险条件\n        condition1 = equity_growth_val == 0.00  # 股本增长率等于0.00\n        condition2 = investment_growth_val <= 5.00  # 长期股权投资增长率不超过5%\n        condition3 = revenue_growth_val > 30.00  # 营业收入增长率超过30%\n        \n        # 所有条件同时满足时存在风险\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, KeyError, AttributeError):\n        # 处理所有可能的异常情况\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "关联方占用资金",
    "risk_description": "本年企业预付账款增长超过50%，且占流动资产比重高于行业总体样本中85%的企业。（模型公式编号：200301004）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据\n        prepayment_growth_rate = None\n        prepayment_current_ratio = None\n        industry_prepayment_ratio = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', None)\n            \n            if item_name == '预付款项增长率' and item_type == '企业':\n                prepayment_growth_rate = float(value_2024) if value_2024 is not None else None\n            \n            elif item_name == '预付款项占流动资产合计比(%)' and item_type == '企业':\n                prepayment_current_ratio = float(value_2024) if value_2024 is not None else None\n            \n            elif item_name == '预付款项占流动资产合计比(%)' and item_type == '行业':\n                industry_prepayment_ratio = float(value_2024) if value_2024 is not None else None\n        \n        # 检查数据是否完整\n        if prepayment_growth_rate is None or prepayment_current_ratio is None or industry_prepayment_ratio is None:\n            return False\n        \n        # 验证风险条件\n        condition1 = prepayment_growth_rate > 50\n        condition2 = prepayment_current_ratio > industry_prepayment_ratio\n        \n        return condition1 and condition2\n        \n    except (ValueError, TypeError, KeyError, AttributeError):\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "违规资金收付",
    "risk_description": "本年企业银行手续费（财务费用-利息费用+利息收入，未考虑汇兑损益影响）占经营活动现金流出小计、投资活动现金流出小计及筹资活动现金流出小计三项之和的比例超过0.5%。（模型公式编号：191101089）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取2024年企业数据\n        data_2024 = {}\n        required_fields = ['财务费用', '利息费用', '利息收入', \n                          '经营活动现金流出小计', '投资活动现金流出小计', '筹资活动现金流出小计']\n        \n        # 检查所有必需字段是否存在\n        for item in model_items:\n            if item['项目名称'] in required_fields and item['类型'] == '企业':\n                value_2024 = item.get('2024')\n                if value_2024 is None:\n                    return False\n                # 转换字符串为浮点数（去除逗号）\n                try:\n                    data_2024[item['项目名称']] = float(str(value_2024).replace(',', ''))\n                except (ValueError, TypeError):\n                    return False\n        \n        # 验证是否所有必需字段都存在\n        if len(data_2024) != len(required_fields):\n            return False\n        \n        # 计算银行手续费\n        bank_fee = data_2024['财务费用'] - data_2024['利息费用'] + data_2024['利息收入']\n        \n        # 计算现金流出总额\n        cash_outflow_total = (data_2024['经营活动现金流出小计'] + \n                             data_2024['投资活动现金流出小计'] + \n                             data_2024['筹资活动现金流出小计'])\n        \n        # 避免除零错误\n        if abs(cash_outflow_total) < 1e-10:\n            return False\n        \n        # 计算占比\n        ratio = bank_fee / cash_outflow_total\n        \n        # 判断风险（占比 > 0.5%）\n        return ratio > 0.005\n        \n    except Exception as e:\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "违规资金收付",
    "risk_description": "本年企业其他流动资产增长超过40%，且占资产总计的比重超过行业总体样本中85%的企业。（模型公式编号：191101083）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据\n        growth_rate_2024 = None\n        ratio_2024 = None\n        industry_ratio_2024 = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024')\n            \n            if value_2024 is None:\n                continue\n                \n            try:\n                numeric_value = float(value_2024)\n            except (ValueError, TypeError):\n                continue\n                \n            if item_name == '其他流动资产增长率' and item_type == '企业':\n                growth_rate_2024 = numeric_value\n            elif item_name == '其他流动资产占资产总计比(%)' and item_type == '企业':\n                ratio_2024 = numeric_value\n            elif item_name == '其他流动资产占资产总计比(%)' and item_type == '行业':\n                industry_ratio_2024 = numeric_value\n        \n        # 检查数据是否完整\n        if growth_rate_2024 is None or ratio_2024 is None or industry_ratio_2024 is None:\n            return False\n        \n        # 验证风险条件\n        condition1 = growth_rate_2024 > 40\n        condition2 = ratio_2024 > industry_ratio_2024\n        \n        return condition1 and condition2\n        \n    except Exception as e:\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "违规资金收付",
    "risk_description": "本年企业其他流动资产占流动资产合计的比重超过15%。（模型公式编号：191101100）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 查找本年度的企业其他流动资产占流动资产合计比数据\n        enterprise_value = None\n        \n        for item in model_items:\n            if (item.get('项目名称') == '其他流动资产占流动资产合计比(%)' and \n                item.get('类型') == '企业'):\n                enterprise_value = item.get('2024')\n                break\n        \n        # 如果数据缺失，返回False\n        if enterprise_value is None:\n            return False\n            \n        # 转换为数值类型\n        ratio = float(enterprise_value)\n        \n        # 检查是否超过15%\n        if ratio > 15.0:\n            return True\n        else:\n            return False\n            \n    except (ValueError, TypeError, KeyError, AttributeError):\n        # 处理所有可能的异常情况\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "违规资金收付",
    "risk_description": "以前少计、本年多计成本或费用",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 提取所需数据\n        interest_expense_data = {}\n        debt_data = {}\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_name == '利息费用':\n                if item_type == '企业':\n                    interest_expense_data['2023'] = float(item.get('2023', '0').replace(',', ''))\n                    interest_expense_data['2024'] = float(item.get('2024', '0').replace(',', ''))\n            \n            elif item_name == '短长期债务':\n                if item_type == '企业':\n                    debt_data['2023'] = float(item.get('2023', '0').replace(',', ''))\n                    debt_data['2024'] = float(item.get('2024', '0').replace(',', ''))\n        \n        # 检查数据完整性\n        if (len(interest_expense_data) != 2 or len(debt_data) != 2 or\n            interest_expense_data['2023'] == 0 or interest_expense_data['2024'] == 0 or\n            debt_data['2023'] == 0 or debt_data['2024'] == 0):\n            return False\n        \n        # 计算增长率\n        interest_growth_rate = (interest_expense_data['2024'] - interest_expense_data['2023']) / interest_expense_data['2023']\n        debt_growth_rate = (debt_data['2024'] - debt_data['2023']) / debt_data['2023']\n        \n        # 判断风险条件：利息费用增长率显著高于债务规模变化率\n        # 这里使用2倍作为显著差异的阈值\n        if interest_growth_rate > debt_growth_rate * 2:\n            return True\n        else:\n            return False\n            \n    except (ValueError, TypeError, ZeroDivisionError, KeyError):\n        return False\n    except Exception as e:\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "违规资金收付",
    "risk_description": "本年企业利息费用占“短长期债务”平均余额的比例比上年提高了3个百分点以上。（模型公式编号：191101085）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n            \n        # 提取企业数据和行业数据\n        enterprise_data = None\n        industry_data = None\n        \n        for item in model_items:\n            if item.get('类型') == '企业':\n                enterprise_data = item\n            elif item.get('类型') == '行业':\n                industry_data = item\n        \n        # 如果缺少企业数据，返回False\n        if enterprise_data is None:\n            return False\n        \n        # 提取所需数据字段\n        # 本年利息费用（2024年）\n        interest_expense_current = float(enterprise_data.get('2024', 0))\n        \n        # 上年利息费用（2023年）\n        interest_expense_previous = float(enterprise_data.get('2023', 0))\n        \n        # 本年短期债务期初余额和期末余额\n        # 假设这些字段存在于数据中，实际使用时需要根据具体字段名调整\n        short_debt_begin_current = float(enterprise_data.get('本年短期债务期初余额', 0))\n        short_debt_end_current = float(enterprise_data.get('本年短期债务期末余额', 0))\n        \n        # 本年长期债务期初余额和期末余额\n        long_debt_begin_current = float(enterprise_data.get('本年长期债务期初余额', 0))\n        long_debt_end_current = float(enterprise_data.get('本年长期债务期末余额', 0))\n        \n        # 上年短期债务期初余额和期末余额\n        short_debt_begin_previous = float(enterprise_data.get('上年短期债务期初余额', 0))\n        short_debt_end_previous = float(enterprise_data.get('上年短期债务期末余额', 0))\n        \n        # 上年长期债务期初余额和期末余额\n        long_debt_begin_previous = float(enterprise_data.get('上年长期债务期初余额', 0))\n        long_debt_end_previous = float(enterprise_data.get('上年长期债务期末余额', 0))\n        \n        # 检查是否有零值，避免除零错误\n        if (short_debt_begin_current == 0 and short_debt_end_current == 0 and\n            long_debt_begin_current == 0 and long_debt_end_current == 0):\n            return False\n        \n        if (short_debt_begin_previous == 0 and short_debt_end_previous == 0 and\n            long_debt_begin_previous == 0 and long_debt_end_previous == 0):\n            return False\n        \n        # 计算本年短期债务平均余额\n        short_debt_avg_current = (short_debt_begin_current + short_debt_end_current) / 2\n        \n        # 计算本年长期债务平均余额\n        long_debt_avg_current = (long_debt_begin_current + long_debt_end_current) / 2\n        \n        # 计算本年债务平均余额总额\n        total_debt_avg_current = short_debt_avg_current + long_debt_avg_current\n        \n        # 计算本年利息费用占比\n        if total_debt_avg_current == 0:\n            return False\n        interest_ratio_current = interest_expense_current / total_debt_avg_current\n        \n        # 计算上年短期债务平均余额\n        short_debt_avg_previous = (short_debt_begin_previous + short_debt_end_previous) / 2\n        \n        # 计算上年长期债务平均余额\n        long_debt_avg_previous = (long_debt_begin_previous + long_debt_end_previous) / 2\n        \n        # 计算上年债务平均余额总额\n        total_debt_avg_previous = short_debt_avg_previous + long_debt_avg_previous\n        \n        # 计算上年利息费用占比\n        if total_debt_avg_previous == 0:\n            return False\n        interest_ratio_previous = interest_expense_previous / total_debt_avg_previous\n        \n        # 计算占比变化\n        ratio_change = interest_ratio_current - interest_ratio_previous\n        \n        # 判断占比变化是否大于3%\n        return ratio_change > 0.03\n        \n    except (ValueError, TypeError, KeyError, ZeroDivisionError):\n        return False"
  },
  {
    "company_name": "浙江联翔智能家居股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "本年企业“每元工资提供的营业收入”比前二年均值高1.2倍，营业收入增长超过20%。（模型公式编号：191101056）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        revenue_per_wage_2024 = None\n        revenue_per_wage_2023 = None\n        revenue_per_wage_2022 = None\n        revenue_growth_rate_2024 = None\n        \n        # 从数据中提取所需指标\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_name == '每元工资提供的营业收入' and item_type == '企业':\n                revenue_per_wage_2024 = item.get('2024')\n                revenue_per_wage_2023 = item.get('2023')\n                revenue_per_wage_2022 = item.get('2022')\n            \n            elif item_name == '营业收入增长率' and item_type == '企业':\n                revenue_growth_rate_2024 = item.get('2024')\n        \n        # 检查数据完整性\n        if (revenue_per_wage_2024 is None or revenue_per_wage_2023 is None or \n            revenue_per_wage_2022 is None or revenue_growth_rate_2024 is None):\n            return False\n        \n        # 转换数据类型\n        revenue_per_wage_2024 = float(revenue_per_wage_2024)\n        revenue_per_wage_2023 = float(revenue_per_wage_2023)\n        revenue_per_wage_2022 = float(revenue_per_wage_2022)\n        revenue_growth_rate_2024 = float(revenue_growth_rate_2024)\n        \n        # 计算前两年均值\n        prev_two_years_avg = (revenue_per_wage_2023 + revenue_per_wage_2022) / 2\n        \n        # 验证风险条件\n        condition1 = revenue_per_wage_2024 > prev_two_years_avg * 1.2\n        condition2 = revenue_growth_rate_2024 > 20\n        \n        return condition1 and condition2\n        \n    except (ValueError, TypeError, KeyError):\n        return False"
  },
  {
    "company_name": "浙江联翔智能家居股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业营业收入增长超过20%，且大于销售商品和提供劳务收到的现金增长率，同时其差额超过行业均值的3倍。（模型公式编号：191101002）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 从data_dict中获取model_items\n        model_items = data_dict.get('model_items', [])\n        \n        # 初始化所需变量\n        enterprise_revenue_growth = None\n        enterprise_cash_growth = None\n        industry_revenue_growth = None\n        industry_cash_growth = None\n        \n        # 遍历model_items提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', None)\n            \n            if value_2024 is None:\n                continue\n                \n            try:\n                numeric_value = float(value_2024)\n            except (ValueError, TypeError):\n                continue\n                \n            if item_name == '营业收入增长率':\n                if item_type == '企业':\n                    enterprise_revenue_growth = numeric_value\n                elif item_type == '行业':\n                    industry_revenue_growth = numeric_value\n            \n            elif item_name == '销售商品、提供劳务收到的现金增长率':\n                if item_type == '企业':\n                    enterprise_cash_growth = numeric_value\n                elif item_type == '行业':\n                    industry_cash_growth = numeric_value\n        \n        # 检查所有必需数据是否都存在\n        if (enterprise_revenue_growth is None or \n            enterprise_cash_growth is None or \n            industry_revenue_growth is None or \n            industry_cash_growth is None):\n            return False\n        \n        # 验证风险条件\n        condition1 = enterprise_revenue_growth > 20.0\n        condition2 = enterprise_revenue_growth > enterprise_cash_growth\n        condition3 = (enterprise_revenue_growth - enterprise_cash_growth) > 3 * (industry_revenue_growth - industry_cash_growth)\n        \n        # 所有条件都满足时返回True，否则返回False\n        return condition1 and condition2 and condition3\n        \n    except Exception as e:\n        return False"
  },
  {
    "company_name": "浙江联翔智能家居股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业应收账款周转率降低，存货周转率提高，营业收入增长超过20%。（模型公式编号：191101035）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict['model_items']\n        \n        # 提取所需指标数据\n        ar_turnover_2023 = None\n        ar_turnover_2024 = None\n        inventory_turnover_2023 = None\n        inventory_turnover_2024 = None\n        revenue_growth_2024 = None\n        \n        for item in model_items:\n            item_name = item['项目名称']\n            item_type = item['类型']\n            value_2023 = item.get('2023')\n            value_2024 = item.get('2024')\n            \n            if item_type == '企业':\n                if '应收' in item_name and '周转率' in item_name:\n                    if value_2023 is not None:\n                        ar_turnover_2023 = float(value_2023)\n                    if value_2024 is not None:\n                        ar_turnover_2024 = float(value_2024)\n                \n                elif '存货周转率' in item_name:\n                    if value_2023 is not None:\n                        inventory_turnover_2023 = float(value_2023)\n                    if value_2024 is not None:\n                        inventory_turnover_2024 = float(value_2024)\n                \n                elif '营业收入增长率' in item_name:\n                    if value_2024 is not None:\n                        revenue_growth_2024 = float(value_2024)\n        \n        # 检查数据完整性\n        if (ar_turnover_2023 is None or ar_turnover_2024 is None or \n            inventory_turnover_2023 is None or inventory_turnover_2024 is None or \n            revenue_growth_2024 is None):\n            return False\n        \n        # 验证风险条件\n        # 条件1: 应收账款周转率降低\n        ar_turnover_decreased = ar_turnover_2024 < ar_turnover_2023\n        \n        # 条件2: 存货周转率提高\n        inventory_turnover_increased = inventory_turnover_2024 > inventory_turnover_2023\n        \n        # 条件3: 营业收入增长率超过20%\n        revenue_growth_exceeded = revenue_growth_2024 > 20\n        \n        # 所有条件同时满足时存在风险\n        risk_exists = ar_turnover_decreased and inventory_turnover_increased and revenue_growth_exceeded\n        \n        return risk_exists\n        \n    except (KeyError, ValueError, TypeError, AttributeError):\n        return False"
  },
  {
    "company_name": "浙江联翔智能家居股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业应收账款增长额占营业收入的比重高于行业总体样本中85%的企业。（模型公式编号：191101061）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取企业数据和行业数据\n        enterprise_data = None\n        industry_threshold = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            # 获取企业应收账款增长额占营业收入的比例（2024年）\n            if item_type == '企业' and '应收票据、应收账款、应收款项融资及合同资产增长额占营业收入的比例' in item_name:\n                enterprise_ratio_2024 = float(item.get('2024', 0))\n                enterprise_data = enterprise_ratio_2024\n            \n            # 获取行业85%分位数阈值（2024年）\n            elif item_type == '行业' and '85%分位数' in item_name:\n                industry_threshold = float(item.get('2024', 0))\n        \n        # 检查数据是否完整\n        if enterprise_data is None or industry_threshold is None:\n            return False\n        \n        # 验证风险条件：企业比例大于行业85%分位数\n        return enterprise_data > industry_threshold\n        \n    except (ValueError, TypeError, KeyError):\n        return False"
  },
  {
    "company_name": "浙江联翔智能家居股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业营业收入增长超过20%，营业收入增长率超过销售商品和提供劳务收到的现金增长率的1.5倍。（模型公式编号：210101002）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 从data_dict中获取model_items\n        model_items = data_dict.get('model_items', [])\n        \n        # 提取所需的企业数据\n        revenue_growth_rate = None\n        cash_received_growth_rate = None\n        \n        for item in model_items:\n            if item.get('项目名称') == '营业收入增长率' and item.get('类型') == '企业':\n                revenue_growth_rate = item.get('2024')\n            elif item.get('项目名称') == '销售商品、提供劳务收到的现金增长率' and item.get('类型') == '企业':\n                cash_received_growth_rate = item.get('2024')\n        \n        # 检查数据是否存在\n        if revenue_growth_rate is None or cash_received_growth_rate is None:\n            return False\n        \n        # 转换为数值类型\n        revenue_growth_rate = float(revenue_growth_rate)\n        cash_received_growth_rate = float(cash_received_growth_rate)\n        \n        # 验证风险条件\n        condition1 = revenue_growth_rate > 20.0\n        condition2 = revenue_growth_rate > 1.5 * cash_received_growth_rate\n        \n        return condition1 and condition2\n        \n    except (ValueError, TypeError, KeyError):\n        return False\n    except Exception as e:\n        return False"
  },
  {
    "company_name": "浙江联翔智能家居股份有限公司",
    "risk_category": "少结转主营业务成本",
    "risk_description": "本年企业股本较上年无变动，长期股权投资减少，营业收入增长超过30%。（模型公式编号：191101110）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 从data_dict获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 提取所需的企业数据\n        equity_growth = None\n        investment_growth = None\n        revenue_growth = None\n        \n        for item in model_items:\n            if item.get('项目名称') == '股本增长率' and item.get('类型') == '企业':\n                equity_growth = item.get('2024')\n            elif item.get('项目名称') == '长期股权投资增长率' and item.get('类型') == '企业':\n                investment_growth = item.get('2024')\n            elif item.get('项目名称') == '营业收入增长率' and item.get('类型') == '企业':\n                revenue_growth = item.get('2024')\n        \n        # 检查数据是否存在\n        if equity_growth is None or investment_growth is None or revenue_growth is None:\n            return False\n        \n        # 转换数据类型\n        equity_growth = float(equity_growth)\n        investment_growth = float(investment_growth)\n        revenue_growth = float(revenue_growth)\n        \n        # 验证三个条件是否同时满足\n        condition1 = np.isclose(equity_growth, 0.0)  # 股本增长率 = 0%\n        condition2 = investment_growth < 0.0  # 长期股权投资增长率 < 0%\n        condition3 = revenue_growth > 30.0  # 营业收入增长率 > 30%\n        \n        # 返回风险判断结果\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, KeyError):\n        # 处理数据转换错误、类型错误或键不存在的情况\n        return False\n    except Exception as e:\n        # 处理其他所有可能的异常\n        return False"
  },
  {
    "company_name": "浙江联翔智能家居股份有限公司",
    "risk_category": "少计成本或费用",
    "risk_description": "本年企业营业收入增长超过20%，“经营业务利润”增长率比营业收入增长率高30个百分点以上。（模型公式编号：191101010）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据\n        revenue_growth = None\n        profit_growth = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', None)\n            \n            if item_name == '营业收入增长率' and item_type == '企业' and value_2024 is not None:\n                revenue_growth = float(value_2024)\n            elif item_name == '经营业务利润增长率' and item_type == '企业' and value_2024 is not None:\n                profit_growth = float(value_2024)\n        \n        # 检查数据是否完整\n        if revenue_growth is None or profit_growth is None:\n            return False\n        \n        # 验证风险条件\n        condition1 = revenue_growth > 20.0\n        condition2 = (profit_growth - revenue_growth) > 30.0\n        \n        return condition1 and condition2\n        \n    except (ValueError, TypeError, KeyError):\n        return False\n    except Exception as e:\n        return False"
  },
  {
    "company_name": "浙江联翔智能家居股份有限公司",
    "risk_category": "少计成本或费用",
    "risk_description": "企业营业收入前二年持续下降，本年增长，且比本年销售费用增幅高4个百分点以上，营业利润上年为负，本年为正。（模型公式编号：191101013）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        model_items = data_dict['model_items']\n        \n        # 提取所需数据\n        revenue_growth_data = {}\n        expense_growth_data = {}\n        operating_profit_data = {}\n        \n        for item in model_items:\n            if item['项目名称'] == '营业收入增长率' and item['类型'] == '企业':\n                revenue_growth_data = item\n            elif item['项目名称'] == '销售费用增长率' and item['类型'] == '企业':\n                expense_growth_data = item\n            elif item['项目名称'] == '营业利润' and item['类型'] == '企业':\n                operating_profit_data = item\n        \n        # 检查数据完整性\n        if not revenue_growth_data or not expense_growth_data or not operating_profit_data:\n            return False\n        \n        # 获取具体数值\n        revenue_growth_2023 = float(revenue_growth_data['2023'])\n        revenue_growth_2024 = float(revenue_growth_data['2024'])\n        expense_growth_2024 = float(expense_growth_data['2024'])\n        profit_2023 = float(operating_profit_data['2023'].replace(',', ''))\n        profit_2024 = float(operating_profit_data['2024'].replace(',', ''))\n        \n        # 验证条件1: 前两年营业收入持续下降（2022-2023年下降）\n        # 由于没有2022年数据，我们只能验证2023年下降\n        if revenue_growth_2023 >= 0:\n            return False\n        \n        # 验证条件2: 本年营业收入增长（2024年增长率为正）\n        if revenue_growth_2024 <= 0:\n            return False\n        \n        # 验证条件3: 本年营业收入增长率比销售费用增长率高4个百分点以上\n        if revenue_growth_2024 - expense_growth_2024 <= 4:\n            return False\n        \n        # 验证条件4: 上年营业利润为负（2023年为负）\n        if profit_2023 >= 0:\n            return False\n        \n        # 验证条件5: 本年营业利润为正（2024年为正）\n        if profit_2024 <= 0:\n            return False\n        \n        # 所有条件都满足，存在风险\n        return True\n        \n    except (KeyError, ValueError, TypeError, AttributeError):\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "企业营业收入连续两年增长，且本年增长率高于行业总体样本中85%的企业。（模型公式编号：191101005）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 提取企业数据和行业数据\n        enterprise_data = None\n        industry_data = None\n        \n        for item in model_items:\n            if item.get('项目名称') == '营业收入增长率':\n                if item.get('类型') == '企业':\n                    enterprise_data = item\n                elif item.get('类型') == '行业':\n                    industry_data = item\n        \n        # 检查数据完整性\n        if enterprise_data is None or industry_data is None:\n            return False\n        \n        # 获取企业连续两年的增长率\n        growth_2023 = float(enterprise_data.get('2023', 0))\n        growth_2024 = float(enterprise_data.get('2024', 0))\n        \n        # 获取行业85分位数值（直接使用行业数据点的值）\n        industry_85_percentile = float(industry_data.get('2024', 0))\n        \n        # 验证条件：企业连续两年增长率为正，且本年增长率高于行业85分位数值\n        if (growth_2023 > 0 and \n            growth_2024 > 0 and \n            growth_2024 > industry_85_percentile):\n            return True\n        else:\n            return False\n            \n    except (ValueError, TypeError, KeyError, AttributeError):\n        # 处理所有可能的异常情况\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "本年企业营业收入增长超过20%，在建工程增长超过30%，应收账款减少，或增长不到10%。（模型公式编号：191101021）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict['model_items']\n        \n        # 提取所需增长率数据\n        revenue_growth = None\n        construction_growth = None\n        receivables_growth = None\n        \n        for item in model_items:\n            if item['项目名称'] == '营业收入增长率' and item['类型'] == '企业':\n                revenue_growth = float(str(item['2024']).replace(',', ''))\n            elif item['项目名称'] == '在建工程增长率' and item['类型'] == '企业':\n                construction_growth = float(str(item['2024']).replace(',', ''))\n            elif item['项目名称'] == '应收票据、应收账款、应收款项融资及合同资产增长率' and item['类型'] == '企业':\n                receivables_growth = float(str(item['2024']).replace(',', ''))\n        \n        # 检查数据是否完整\n        if revenue_growth is None or construction_growth is None or receivables_growth is None:\n            return False\n        \n        # 验证风险条件\n        condition1 = revenue_growth > 20.0  # 营业收入增长率 > 20%\n        condition2 = construction_growth > 30.0  # 在建工程增长率 > 30%\n        condition3 = receivables_growth < 10.0  # 应收账款增长率 < 10% 或负增长\n        \n        # 所有条件同时满足时存在风险\n        return condition1 and condition2 and condition3\n        \n    except (KeyError, ValueError, TypeError):\n        # 处理数据缺失、格式错误等异常情况\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "本年企业“每元工资提供的营业收入”比前二年均值高1.2倍，营业收入增长超过20%。（模型公式编号：191101056）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型数据项\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据\n        wage_revenue_data = {}\n        revenue_growth_data = {}\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_name == '每元工资提供的营业收入' and item_type == '企业':\n                wage_revenue_data = item\n            elif item_name == '营业收入增长率' and item_type == '企业':\n                revenue_growth_data = item\n        \n        # 检查数据完整性\n        if not wage_revenue_data or not revenue_growth_data:\n            return False\n        \n        # 获取具体数值\n        wage_revenue_2022 = wage_revenue_data.get('2022')\n        wage_revenue_2023 = wage_revenue_data.get('2023')\n        wage_revenue_2024 = wage_revenue_data.get('2024')\n        revenue_growth_2024 = revenue_growth_data.get('2024')\n        \n        # 检查数据是否存在\n        if any(val is None for val in [wage_revenue_2022, wage_revenue_2023, wage_revenue_2024, revenue_growth_2024]):\n            return False\n        \n        # 转换为数值类型\n        wage_revenue_2022 = float(wage_revenue_2022)\n        wage_revenue_2023 = float(wage_revenue_2023)\n        wage_revenue_2024 = float(wage_revenue_2024)\n        revenue_growth_2024 = float(revenue_growth_2024)\n        \n        # 计算前两年均值\n        prev_two_years_avg = (wage_revenue_2022 + wage_revenue_2023) / 2\n        \n        # 验证条件1：本年每元工资提供的营业收入 > 前二年均值 × 1.2\n        condition1 = wage_revenue_2024 > prev_two_years_avg * 1.2\n        \n        # 验证条件2：营业收入增长率 > 20%\n        condition2 = revenue_growth_2024 > 20\n        \n        # 两个条件同时满足时触发风险\n        return condition1 and condition2\n        \n    except (ValueError, TypeError, KeyError, AttributeError):\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "本年企业“每元固定资产提供的营业收入”超过上年的1.2倍，固定资产减少不到10%，营业收入增长超过20%。（模型公式编号：191101080）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        model_items = data_dict.get('model_items', [])\n        \n        # 提取所需数据\n        revenue_per_fixed_asset_2023 = None\n        revenue_per_fixed_asset_2024 = None\n        fixed_asset_growth_2023 = None\n        fixed_asset_growth_2024 = None\n        revenue_growth_2023 = None\n        revenue_growth_2024 = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_name == '每元固定资产及使用权资产提供的营业收入' and item_type == '企业':\n                revenue_per_fixed_asset_2023 = float(item.get('2023', 0))\n                revenue_per_fixed_asset_2024 = float(item.get('2024', 0))\n            \n            elif item_name == '固定资产及使用权资产增长率' and item_type == '企业':\n                fixed_asset_growth_2023 = float(item.get('2023', 0))\n                fixed_asset_growth_2024 = float(item.get('2024', 0))\n            \n            elif item_name == '营业收入增长率' and item_type == '企业':\n                revenue_growth_2023 = float(item.get('2023', 0))\n                revenue_growth_2024 = float(item.get('2024', 0))\n        \n        # 检查数据完整性\n        if (revenue_per_fixed_asset_2023 is None or revenue_per_fixed_asset_2024 is None or\n            fixed_asset_growth_2023 is None or fixed_asset_growth_2024 is None or\n            revenue_growth_2023 is None or revenue_growth_2024 is None):\n            return False\n        \n        # 验证风险条件\n        condition1 = revenue_per_fixed_asset_2024 > revenue_per_fixed_asset_2023 * 1.2\n        condition2 = fixed_asset_growth_2024 > -10  # 减少幅度小于10%等价于增长率大于-10%\n        condition3 = revenue_growth_2024 > 20\n        \n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, KeyError):\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "本年企业固定资产原值增减不超过20%，“每元固定资产原值提供的营业收入”超过上年的1.5倍，营业收入增长超过20%。（模型公式编号：200201001）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据\n        fixed_asset_growth = None\n        revenue_per_asset = None\n        revenue_growth = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_type == '企业':\n                if item_name == '固定资产及使用权资产原值增长率':\n                    fixed_asset_growth = item.get('2024')\n                elif item_name == '每元固定资产及使用权资产原值提供的营业收入':\n                    revenue_per_asset_2024 = item.get('2024')\n                    revenue_per_asset_2023 = item.get('2023')\n                elif item_name == '营业收入增长率':\n                    revenue_growth = item.get('2024')\n        \n        # 检查数据完整性\n        if (fixed_asset_growth is None or revenue_per_asset_2024 is None or \n            revenue_per_asset_2023 is None or revenue_growth is None):\n            return False\n        \n        # 转换为数值类型\n        fixed_asset_growth = float(fixed_asset_growth)\n        revenue_per_asset_2024 = float(revenue_per_asset_2024)\n        revenue_per_asset_2023 = float(revenue_per_asset_2023)\n        revenue_growth = float(revenue_growth)\n        \n        # 验证三个条件\n        condition1 = abs(fixed_asset_growth) <= 20  # 固定资产原值增长率绝对值不超过20%\n        condition2 = revenue_per_asset_2024 > revenue_per_asset_2023 * 1.5  # 本年每元固定资产原值提供的营业收入超过上年的1.5倍\n        condition3 = revenue_growth > 20  # 营业收入增长率超过20%\n        \n        # 同时满足三个条件则存在风险\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, KeyError):\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业营业收入增长超过20%，且大于销售商品和提供劳务收到的现金增长率，同时其差额超过行业均值的3倍。（模型公式编号：191101002）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        corp_revenue_growth = None\n        corp_cash_growth = None\n        ind_revenue_growth = None\n        ind_cash_growth = None\n        \n        # 提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', '')\n            \n            if not value_2024:\n                continue\n                \n            try:\n                value = float(value_2024)\n            except (ValueError, TypeError):\n                continue\n                \n            if item_name == '营业收入增长率' and item_type == '企业':\n                corp_revenue_growth = value\n            elif item_name == '销售商品、提供劳务收到的现金增长率' and item_type == '企业':\n                corp_cash_growth = value\n            elif item_name == '营业收入增长率' and item_type == '行业':\n                ind_revenue_growth = value\n            elif item_name == '销售商品、提供劳务收到的现金增长率' and item_type == '行业':\n                ind_cash_growth = value\n        \n        # 检查数据是否完整\n        if any(x is None for x in [corp_revenue_growth, corp_cash_growth, ind_revenue_growth, ind_cash_growth]):\n            return False\n        \n        # 验证风险条件\n        condition1 = corp_revenue_growth > 20\n        condition2 = corp_revenue_growth > corp_cash_growth\n        condition3 = (corp_revenue_growth - corp_cash_growth) > 3 * (ind_revenue_growth - ind_cash_growth)\n        \n        return condition1 and condition2 and condition3\n        \n    except Exception as e:\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业营业收入增长超过20%，营业收入增长率超过销售商品和提供劳务收到的现金增长率的1.5倍。（模型公式编号：210101002）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 从data_dict获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 提取所需的企业数据\n        revenue_growth_rate = None\n        cash_receipts_growth_rate = None\n        \n        for item in model_items:\n            if item.get('类型') == '企业':\n                if item.get('项目名称') == '营业收入增长率':\n                    revenue_growth_rate = item.get('2024')\n                elif item.get('项目名称') == '销售商品、提供劳务收到的现金增长率':\n                    cash_receipts_growth_rate = item.get('2024')\n        \n        # 检查数据是否完整\n        if revenue_growth_rate is None or cash_receipts_growth_rate is None:\n            return False\n        \n        # 转换为数值类型\n        revenue_growth = float(revenue_growth_rate)\n        cash_growth = float(cash_receipts_growth_rate)\n        \n        # 验证风险条件\n        condition1 = revenue_growth > 20\n        condition2 = revenue_growth > 1.5 * cash_growth\n        \n        return condition1 and condition2\n        \n    except (ValueError, TypeError, AttributeError):\n        # 处理数据转换错误或缺失数据的情况\n        return False\n    except Exception as e:\n        # 处理其他所有可能的异常\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "少结转主营业务成本",
    "risk_description": "本年企业存货周转率降低，应收账款周转率提高，营业收入增长超过20%。（模型公式编号：191101033）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        model_items = data_dict.get('model_items', [])\n        \n        # 提取所需数据\n        inventory_turnover_2023 = None\n        inventory_turnover_2024 = None\n        receivables_turnover_2023 = None\n        receivables_turnover_2024 = None\n        revenue_growth_2024 = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if '存货周转率' in item_name and item_type == '企业':\n                inventory_turnover_2023 = float(item.get('2023', 0))\n                inventory_turnover_2024 = float(item.get('2024', 0))\n            \n            elif ('应收账款周转率' in item_name or \n                  '应收票据' in item_name or \n                  '应收款项融资' in item_name or \n                  '合同资产周转率' in item_name) and item_type == '企业':\n                receivables_turnover_2023 = float(item.get('2023', 0))\n                receivables_turnover_2024 = float(item.get('2024', 0))\n            \n            elif '营业收入增长率' in item_name and item_type == '企业':\n                revenue_growth_2024 = float(item.get('2024', 0))\n        \n        # 检查数据完整性\n        if (inventory_turnover_2023 is None or inventory_turnover_2024 is None or\n            receivables_turnover_2023 is None or receivables_turnover_2024 is None or\n            revenue_growth_2024 is None):\n            return False\n        \n        # 验证风险条件\n        condition1 = inventory_turnover_2024 < inventory_turnover_2023  # 存货周转率降低\n        condition2 = receivables_turnover_2024 > receivables_turnover_2023  # 应收账款周转率提高\n        condition3 = revenue_growth_2024 > 20.0  # 营业收入增长率超过20%\n        \n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, KeyError):\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "少结转主营业务成本",
    "risk_description": "本年企业销售毛利增长率比营业收入增长率高10个百分点以上，存货增长超过15%。（模型公式编号：191101044）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 如果数据缺失或不足，返回False\n        if not model_items or len(model_items) < 3:\n            return False\n        \n        # 提取所需指标数据\n        sales_gross_profit_growth = None\n        operating_revenue_growth = None\n        inventory_growth = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', '')\n            \n            # 只使用企业类型的数据\n            if item_type != '企业':\n                continue\n                \n            if item_name == '销售毛利增长率':\n                sales_gross_profit_growth = float(value_2024)\n            elif item_name == '营业收入增长率':\n                operating_revenue_growth = float(value_2024)\n            elif item_name == '存货增长率':\n                inventory_growth = float(value_2024)\n        \n        # 检查是否所有必需数据都存在\n        if (sales_gross_profit_growth is None or \n            operating_revenue_growth is None or \n            inventory_growth is None):\n            return False\n        \n        # 验证风险条件\n        condition1 = (sales_gross_profit_growth - operating_revenue_growth) > 10\n        condition2 = inventory_growth > 15\n        \n        return condition1 and condition2\n        \n    except (ValueError, TypeError, KeyError):\n        # 处理数据转换错误或键不存在的情况\n        return False\n    except Exception as e:\n        # 处理其他所有异常\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "少结转主营业务成本",
    "risk_description": "本年企业应收账款周转率与存货周转率均不到行业均值的90%，毛利率比行业均值高10个百分点以上。（模型公式编号：191101045）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据\n        ar_turnover_company = None\n        ar_turnover_industry = None\n        inventory_turnover_company = None\n        inventory_turnover_industry = None\n        gross_margin_company = None\n        gross_margin_industry = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', None)\n            \n            if value_2024 is None:\n                continue\n                \n            try:\n                value = float(value_2024)\n            except (ValueError, TypeError):\n                continue\n                \n            if '应收票据、应收账款、应收款项融资及合同资产周转率' in item_name:\n                if item_type == '企业':\n                    ar_turnover_company = value\n                elif item_type == '行业':\n                    ar_turnover_industry = value\n            \n            elif '存货周转率' in item_name:\n                if item_type == '企业':\n                    inventory_turnover_company = value\n                elif item_type == '行业':\n                    inventory_turnover_industry = value\n            \n            elif '销售毛利率' in item_name:\n                if item_type == '企业':\n                    gross_margin_company = value\n                elif item_type == '行业':\n                    gross_margin_industry = value\n        \n        # 检查数据完整性\n        if (ar_turnover_company is None or ar_turnover_industry is None or\n            inventory_turnover_company is None or inventory_turnover_industry is None or\n            gross_margin_company is None or gross_margin_industry is None):\n            return False\n        \n        # 验证风险条件\n        condition1 = ar_turnover_company < ar_turnover_industry * 0.9\n        condition2 = inventory_turnover_company < inventory_turnover_industry * 0.9\n        condition3 = gross_margin_company > gross_margin_industry + 10\n        \n        return condition1 and condition2 and condition3\n        \n    except Exception as e:\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "违规资金收付",
    "risk_description": "本年企业利息费用占“短长期债务”平均余额的比例比上年提高了3个百分点以上。（模型公式编号：191101085）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        current_interest_expense = None\n        previous_interest_expense = None\n        current_short_debt = None\n        previous_short_debt = None\n        current_long_debt = None\n        previous_long_debt = None\n        \n        # 提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            # 只关注企业类型的数据\n            if item_type != '企业':\n                continue\n                \n            if item_name == '利息费用':\n                current_interest_expense = float(item.get('2024', '0').replace(',', ''))\n                previous_interest_expense = float(item.get('2023', '0').replace(',', ''))\n            elif item_name == '短期债务':\n                current_short_debt = float(item.get('2024', '0').replace(',', ''))\n                previous_short_debt = float(item.get('2023', '0').replace(',', ''))\n            elif item_name == '长期债务':\n                current_long_debt = float(item.get('2024', '0').replace(',', ''))\n                previous_long_debt = float(item.get('2023', '0').replace(',', ''))\n        \n        # 检查数据完整性\n        if None in [current_interest_expense, previous_interest_expense, \n                   current_short_debt, previous_short_debt, \n                   current_long_debt, previous_long_debt]:\n            return False\n        \n        # 计算本年短长期债务平均余额\n        current_avg_debt = (current_short_debt + current_long_debt) / 2\n        previous_avg_debt = (previous_short_debt + previous_long_debt) / 2\n        \n        # 避免除零错误\n        if current_avg_debt == 0 or previous_avg_debt == 0:\n            return False\n        \n        # 计算利息费用占比\n        current_ratio = current_interest_expense / current_avg_debt\n        previous_ratio = previous_interest_expense / previous_avg_debt\n        \n        # 判断风险条件：本年占比比上年提高了3个百分点以上\n        risk_condition = (current_ratio - previous_ratio) > 0.03\n        \n        return bool(risk_condition)\n        \n    except (ValueError, TypeError, ZeroDivisionError):\n        return False\n    except Exception as e:\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "投资收益或资产处置收益错报",
    "risk_description": "企业总资产周转率连续两年低于行业均值，“经营业务利润”连续两年为负，本年营业利润较上年增长。（模型公式编号：191101019）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据项\n        total_asset_turnover_enterprise = {}\n        total_asset_turnover_industry = {}\n        operating_profit = {}\n        operating_profit_growth = {}\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_name == '总资产周转率':\n                if item_type == '企业':\n                    total_asset_turnover_enterprise['2023'] = float(item.get('2023', 0))\n                    total_asset_turnover_enterprise['2024'] = float(item.get('2024', 0))\n                elif item_type == '行业':\n                    total_asset_turnover_industry['2023'] = float(item.get('2023', 0))\n                    total_asset_turnover_industry['2024'] = float(item.get('2024', 0))\n            \n            elif item_name == '经营业务利润':\n                if item_type == '企业':\n                    operating_profit['2023'] = float(item.get('2023', 0))\n                    operating_profit['2024'] = float(item.get('2024', 0))\n            \n            elif item_name == '营业利润':\n                if item_type == '企业':\n                    operating_profit_growth['2023'] = float(item.get('2023', 0))\n                    operating_profit_growth['2024'] = float(item.get('2024', 0))\n        \n        # 检查数据完整性\n        if (not total_asset_turnover_enterprise or not total_asset_turnover_industry or \n            not operating_profit or not operating_profit_growth):\n            return False\n        \n        # 条件1: 总资产周转率连续两年低于行业均值\n        condition1 = (total_asset_turnover_enterprise['2023'] < total_asset_turnover_industry['2023'] and \n                     total_asset_turnover_enterprise['2024'] < total_asset_turnover_industry['2024'])\n        \n        # 条件2: 经营业务利润连续两年为负\n        condition2 = (operating_profit['2023'] < 0 and operating_profit['2024'] < 0)\n        \n        # 条件3: 本年营业利润较上年实现正增长\n        condition3 = operating_profit_growth['2024'] > operating_profit_growth['2023']\n        \n        # 所有条件同时满足时存在风险\n        return condition1 and condition2 and condition3\n        \n    except (KeyError, ValueError, TypeError):\n        return False"
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "本年企业“每元固定资产提供的营业收入”超过上年的1.2倍，固定资产减少不到10%，营业收入增长超过20%。（模型公式编号：191101080）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        model_items = data_dict.get('model_items', [])\n        \n        # 提取所需数据\n        current_revenue_per_fixed_asset = None\n        previous_revenue_per_fixed_asset = None\n        fixed_asset_growth_rate = None\n        revenue_growth_rate = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            # 只使用企业类型的数据\n            if item_type != '企业':\n                continue\n                \n            if item_name == '每元固定资产及使用权资产提供的营业收入':\n                current_revenue_per_fixed_asset = float(item.get('2024', 0))\n                previous_revenue_per_fixed_asset = float(item.get('2023', 0))\n            elif item_name == '固定资产及使用权资产增长率':\n                fixed_asset_growth_rate = float(item.get('2024', 0))\n            elif item_name == '营业收入增长率':\n                revenue_growth_rate = float(item.get('2024', 0))\n        \n        # 检查数据是否完整\n        if (current_revenue_per_fixed_asset is None or \n            previous_revenue_per_fixed_asset is None or \n            fixed_asset_growth_rate is None or \n            revenue_growth_rate is None):\n            return False\n        \n        # 验证风险条件\n        condition1 = current_revenue_per_fixed_asset > previous_revenue_per_fixed_asset * 1.2\n        condition2 = fixed_asset_growth_rate > -10  # 增长率大于-10%意味着减少幅度小于10%\n        condition3 = revenue_growth_rate > 20\n        \n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, KeyError, AttributeError):\n        return False"
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业应收账款周转率降低，存货周转率提高，营业收入增长超过20%。（模型公式编号：191101035）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据\n        ar_turnover_2023 = None\n        ar_turnover_2024 = None\n        inventory_turnover_2023 = None\n        inventory_turnover_2024 = None\n        revenue_growth_2023 = None\n        revenue_growth_2024 = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            # 只处理企业类型的数据\n            if item_type != '企业':\n                continue\n                \n            if '应收票据、应收账款、应收款项融资及合同资产周转率' in item_name:\n                ar_turnover_2023 = float(item.get('2023', 0))\n                ar_turnover_2024 = float(item.get('2024', 0))\n            elif '存货周转率' in item_name:\n                inventory_turnover_2023 = float(item.get('2023', 0))\n                inventory_turnover_2024 = float(item.get('2024', 0))\n            elif '营业收入增长率' in item_name:\n                revenue_growth_2023 = float(item.get('2023', 0))\n                revenue_growth_2024 = float(item.get('2024', 0))\n        \n        # 检查数据完整性\n        if (ar_turnover_2023 is None or ar_turnover_2024 is None or \n            inventory_turnover_2023 is None or inventory_turnover_2024 is None or \n            revenue_growth_2023 is None or revenue_growth_2024 is None):\n            return False\n        \n        # 验证风险条件\n        # 1. 应收账款周转率降低\n        ar_decreased = ar_turnover_2024 < ar_turnover_2023\n        \n        # 2. 存货周转率提高\n        inventory_increased = inventory_turnover_2024 > inventory_turnover_2023\n        \n        # 3. 营业收入增长率增长超过20%\n        revenue_growth_exceeded = revenue_growth_2024 - revenue_growth_2023 > 20\n        \n        # 所有条件同时满足时存在风险\n        return ar_decreased and inventory_increased and revenue_growth_exceeded\n        \n    except (ValueError, TypeError, KeyError):\n        return False"
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "货币资金错报",
    "risk_description": "本年企业货币资金超过“短长期债务”的5倍，股本无变动或增长不到1%，资本公积无变动或增长不到5%。（模型公式编号：191101103）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据\n        data_map = {}\n        for item in model_items:\n            name = item.get('项目名称')\n            if name in ['货币资金', '短长期债务', '股本增长率', '资本公积增长率']:\n                data_map[name] = item\n        \n        # 检查数据完整性\n        required_fields = ['货币资金', '短长期债务', '股本增长率', '资本公积增长率']\n        for field in required_fields:\n            if field not in data_map:\n                return False\n        \n        # 获取2024年数据\n        monetary_fund_2024 = float(data_map['货币资金'].get('2024', '0').replace(',', ''))\n        short_long_debt_2024 = float(data_map['短长期债务'].get('2024', '0').replace(',', ''))\n        equity_growth_2024 = float(data_map['股本增长率'].get('2024', '0').replace(',', ''))\n        capital_reserve_growth_2024 = float(data_map['资本公积增长率'].get('2024', '0').replace(',', ''))\n        \n        # 验证风险条件\n        condition1 = monetary_fund_2024 > 5 * short_long_debt_2024\n        condition2 = equity_growth_2024 <= 1.0\n        condition3 = capital_reserve_growth_2024 <= 5.0\n        \n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, AttributeError, KeyError):\n        return False"
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "少计成本或费用",
    "risk_description": "企业总资产周转率连续两年不到行业均值的90%，本年毛利率超过行业均值的1.1倍，本年营业利润为正，且较上年增长。（模型公式编号：191101051）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n            \n        # 提取企业数据和行业数据\n        company_data = {}\n        industry_data = {}\n        \n        for item in model_items:\n            item_name = item.get('项目名称')\n            item_type = item.get('类型')\n            if not item_name or not item_type:\n                continue\n                \n            if item_type == '企业':\n                company_data[item_name] = item\n            elif item_type == '行业':\n                industry_data[item_name] = item\n        \n        # 检查所需数据是否存在\n        required_company_items = ['总资产周转率', '销售毛利率', '营业利润', '营业利润增长率']\n        required_industry_items = ['总资产周转率', '销售毛利率']\n        \n        for item in required_company_items:\n            if item not in company_data:\n                return False\n                \n        for item in required_industry_items:\n            if item not in industry_data:\n                return False\n        \n        # 获取企业数据\n        company_tat_2023 = float(company_data['总资产周转率'].get('2023', 0))\n        company_tat_2024 = float(company_data['总资产周转率'].get('2024', 0))\n        company_gross_margin_2024 = float(company_data['销售毛利率'].get('2024', 0))\n        company_op_profit_2024 = float(str(company_data['营业利润'].get('2024', 0)).replace(',', ''))\n        company_op_profit_growth_2024 = float(company_data['营业利润增长率'].get('2024', 0))\n        \n        # 获取行业数据\n        industry_tat_2023 = float(industry_data['总资产周转率'].get('2023', 0))\n        industry_tat_2024 = float(industry_data['总资产周转率'].get('2024', 0))\n        industry_gross_margin_2024 = float(industry_data['销售毛利率'].get('2024', 0))\n        \n        # 条件1: 企业总资产周转率连续两年低于行业均值的90%\n        condition1 = (company_tat_2023 < industry_tat_2023 * 0.9 and \n                     company_tat_2024 < industry_tat_2024 * 0.9)\n        \n        # 条件2: 本年销售毛利率超过行业均值的1.1倍\n        condition2 = company_gross_margin_2024 > industry_gross_margin_2024 * 1.1\n        \n        # 条件3: 本年营业利润为正\n        condition3 = company_op_profit_2024 > 0\n        \n        # 条件4: 本年营业利润较上年增长\n        condition4 = company_op_profit_growth_2024 > 0\n        \n        # 所有条件都满足时返回True（存在风险）\n        return condition1 and condition2 and condition3 and condition4\n        \n    except (ValueError, TypeError, KeyError, AttributeError):\n        return False"
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "与关联方易货交易",
    "risk_description": "本年企业销售商品、提供劳务收到的现金不到含税营业收入的80%，应付票据及应付账款减少，或增长不到10%。（模型公式编号：191101022）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 如果数据缺失或不足，返回False\n        if not model_items or len(model_items) < 3:\n            return False\n        \n        # 提取所需数据\n        revenue_2024 = None\n        cash_received_2024 = None\n        payables_growth_2024 = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', None)\n            \n            if value_2024 is None:\n                continue\n                \n            # 转换为数值类型\n            try:\n                numeric_value = float(str(value_2024).replace(',', ''))\n            except (ValueError, TypeError):\n                continue\n            \n            if item_name == '营业收入' and item_type == '企业':\n                revenue_2024 = numeric_value\n            elif item_name == '销售商品、提供劳务收到的现金' and item_type == '企业':\n                cash_received_2024 = numeric_value\n            elif item_name == '应付票据及应付账款增长率' and item_type == '企业':\n                payables_growth_2024 = numeric_value\n        \n        # 检查是否所有必要数据都存在\n        if revenue_2024 is None or cash_received_2024 is None or payables_growth_2024 is None:\n            return False\n        \n        # 验证风险条件\n        # 条件1: 销售商品、提供劳务收到的现金 / 营业收入 < 0.8\n        cash_revenue_ratio = cash_received_2024 / revenue_2024 if revenue_2024 != 0 else float('inf')\n        condition1 = cash_revenue_ratio < 0.8\n        \n        # 条件2: 应付票据及应付账款增长率 < 0.1 (包含负增长)\n        condition2 = payables_growth_2024 < 0.1\n        \n        # 两个条件都满足时存在风险\n        return condition1 and condition2\n        \n    except Exception as e as e:\n        # 处理所有可能的异常情况\n        return False"
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "与关联方易货交易",
    "risk_description": "企业销售商品、提供劳务收到的现金连续两年不到含税营业收入的80%，本年应付票据及应付账款减少，或增长不到10%。（模型公式编号：191101024）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据项\n        revenue_data = None\n        cash_received_data = None\n        payables_growth_data = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            if item_name == '营业收入':\n                revenue_data = item\n            elif item_name == '销售商品、提供劳务收到的现金':\n                cash_received_data = item\n            elif item_name == '应付票据及应付账款增长率':\n                payables_growth_data = item\n        \n        # 检查数据完整性\n        if not revenue_data or not cash_received_data or not payables_growth_data:\n            return False\n        \n        # 获取连续两年的营业收入数据\n        revenue_2023 = float(revenue_data.get('2023', 0))\n        revenue_2024 = float(revenue_data.get('2024', 0))\n        \n        # 获取连续两年的销售商品、提供劳务收到的现金数据\n        cash_2023 = float(cash_received_data.get('2023', 0))\n        cash_2024 = float(cash_received_data.get('2024', 0))\n        \n        # 获取本年的应付票据及应付账款增长率数据\n        payables_growth_2024 = float(payables_growth_data.get('2024', 0))\n        \n        # 检查数据有效性（避免除数为0）\n        if revenue_2023 <= 0 or revenue_2024 <= 0:\n            return False\n        \n        # 计算现金收入比\n        cash_revenue_ratio_2023 = cash_2023 / revenue_2023\n        cash_revenue_ratio_2024 = cash_2024 / revenue_2024\n        \n        # 验证条件1：销售商品、提供劳务收到的现金 / 营业收入 < 80% (连续两年)\n        condition1 = (cash_revenue_ratio_2023 < 0.8) and (cash_revenue_ratio_2024 < 0.8)\n        \n        # 验证条件2：应付票据及应付账款增长率 < 10% (本年)\n        condition2 = payables_growth_2024 < 10\n        \n        # 两个条件同时满足时返回True（存在风险）\n        return condition1 and condition2\n        \n    except (ValueError, TypeError, ZeroDivisionError):\n        return False"
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "信用或资产减值损失错报",
    "risk_description": "本年企业资产减值损失为负值，上年为正值；或本年为正值，上年为负值。（注：由于利润表格式的变化，请自行确认该值系统取数正负号是否正确。）（模型公式编号：210601008）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取企业2023和2024年的资产减值损失数据\n        enterprise_data = None\n        for item in model_items:\n            if (item.get('项目名称') == '资产减值损失' and \n                item.get('类型') == '企业'):\n                enterprise_data = item\n                break\n        \n        if not enterprise_data:\n            return False\n        \n        # 获取2023年和2024年的值\n        value_2023 = enterprise_data.get('2023')\n        value_2024 = enterprise_data.get('2024')\n        \n        if value_2023 is None or value_2024 is None:\n            return False\n        \n        # 转换数据格式（处理千分位分隔符）\n        try:\n            val_2023 = float(str(value_2023).replace(',', ''))\n            val_2024 = float(str(value_2024).replace(',', ''))\n        except (ValueError, TypeError):\n            return False\n        \n        # 检查符号变化：本年与上年符号相反\n        if (val_2023 > 0 and val_2024 < 0) or (val_2023 < 0 and val_2024 > 0):\n            return True\n        else:\n            return False\n            \n    except Exception as e:\n        return False"
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "信用或资产减值损失错报",
    "risk_description": "本年企业存货增长超过10%，存货周转率较上年提高，本年存货周转率高于行业总体样本中85%的企业。（模型公式编号：191101048）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 从data_dict中获取model_items\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据\n        inventory_growth_rate_enterprise = None\n        inventory_turnover_enterprise_2023 = None\n        inventory_turnover_enterprise_2024 = None\n        inventory_turnover_industry_2024 = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_name == '存货增长率' and item_type == '企业':\n                inventory_growth_rate_enterprise = float(item.get('2024', 0))\n            \n            elif item_name == '存货周转率【次】':\n                if item_type == '企业':\n                    inventory_turnover_enterprise_2023 = float(item.get('2023', 0))\n                    inventory_turnover_enterprise_2024 = float(item.get('2024', 0))\n                elif item_type == '行业':\n                    inventory_turnover_industry_2024 = float(item.get('2024', 0))\n        \n        # 检查数据完整性\n        if (inventory_growth_rate_enterprise is None or \n            inventory_turnover_enterprise_2023 is None or \n            inventory_turnover_enterprise_2024 is None or \n            inventory_turnover_industry_2024 is None):\n            return False\n        \n        # 验证风险条件\n        condition1 = inventory_growth_rate_enterprise > 10  # 本年存货增长率 > 10%\n        condition2 = inventory_turnover_enterprise_2024 > inventory_turnover_enterprise_2023  # 本年存货周转率 > 上年存货周转率\n        condition3 = inventory_turnover_enterprise_2024 > inventory_turnover_industry_2024  # 本年企业存货周转率 > 行业值\n        \n        # 所有条件都满足时存在风险\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, KeyError):\n        return False\n    except Exception as e:\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "本年企业营业收入增长超过20%，应收账款周转率高于行业总体样本中85%的企业。（模型公式编号：191101030）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        model_items = data_dict['model_items']\n        \n        # 提取所需数据\n        revenue_growth = None\n        ar_turnover_company = None\n        ar_turnover_industry = None\n        \n        for item in model_items:\n            if item['项目名称'] == '营业收入增长率' and item['类型'] == '企业':\n                revenue_growth = float(item['2024'])\n            elif item['项目名称'] == '应收票据、应收账款、应收款项融资及合同资产周转率【次】':\n                if item['类型'] == '企业':\n                    ar_turnover_company = float(item['2024'])\n                elif item['类型'] == '行业':\n                    ar_turnover_industry = float(item['2024'])\n        \n        # 检查数据是否完整\n        if revenue_growth is None or ar_turnover_company is None or ar_turnover_industry is None:\n            return False\n        \n        # 验证风险条件\n        industry_85_percentile = ar_turnover_industry  # 直接使用行业值作为85%分位数\n        \n        if revenue_growth > 20 and ar_turnover_company > industry_85_percentile:\n            return True\n        else:\n            return False\n            \n    except (KeyError, TypeError, ValueError):\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "本年企业应收账款周转率和存货周转率之比超过5，比行业均值之比大2。（模型公式编号：231201007）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items列表\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化变量\n        enterprise_receivables_turnover = None\n        enterprise_inventory_turnover = None\n        industry_receivables_turnover = None\n        industry_inventory_turnover = None\n        \n        # 遍历model_items提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            year_2024 = item.get('2024', '')\n            \n            # 跳过空值\n            if not year_2024:\n                continue\n                \n            # 转换数据类型\n            try:\n                value = float(year_2024)\n            except (ValueError, TypeError):\n                continue\n            \n            # 根据项目名称和类型提取对应数据\n            if '应收账款周转率' in item_name and item_type == '企业':\n                enterprise_receivables_turnover = value\n            elif '存货周转率' in item_name and item_type == '企业':\n                enterprise_inventory_turnover = value\n            elif '应收账款周转率' in item_name and item_type == '行业':\n                industry_receivables_turnover = value\n            elif '存货周转率' in item_name and item_type == '行业':\n                industry_inventory_turnover = value\n        \n        # 检查所有必需数据是否都存在\n        if (enterprise_receivables_turnover is None or \n            enterprise_inventory_turnover is None or \n            industry_receivables_turnover is None or \n            industry_inventory_turnover is None):\n            return False\n        \n        # 计算企业应收账款周转率与存货周转率的比值\n        enterprise_ratio = enterprise_receivables_turnover / enterprise_inventory_turnover\n        \n        # 计算行业应收账款周转率与存货周转率的比值（行业均值）\n        industry_ratio = industry_receivables_turnover / industry_inventory_turnover\n        \n        # 验证风险条件\n        condition1 = enterprise_ratio > 5\n        condition2 = enterprise_ratio > (industry_ratio + 2)\n        \n        # 返回结果：两个条件必须同时满足\n        return condition1 and condition2\n        \n    except Exception as e as e:\n        # 处理任何异常情况，返回False\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业营业收入增长超过20%，且高于销售商品和提供劳务收到的现金增长率的1.1倍，行业营业收入增长率均值低于销售商品和提供劳务收到的现金增长率均值。（模型公式编号：191101003）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 从data_dict中获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 如果数据为空，返回False\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        enterprise_revenue_growth = None\n        enterprise_cash_growth = None\n        industry_revenue_growth = None\n        industry_cash_growth = None\n        \n        # 遍历model_items提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', None)\n            \n            # 跳过缺失2024年数据的项目\n            if value_2024 is None:\n                continue\n                \n            # 转换值为浮点数\n            try:\n                value = float(value_2024)\n            except (ValueError, TypeError):\n                continue\n            \n            # 根据项目名称和类型提取对应数据\n            if item_name == '营业收入增长率':\n                if item_type == '企业':\n                    enterprise_revenue_growth = value\n                elif item_type == '行业':\n                    industry_revenue_growth = value\n            \n            elif item_name == '销售商品、提供劳务收到的现金增长率':\n                if item_type == '企业':\n                    enterprise_cash_growth = value\n                elif item_type == '行业':\n                    industry_cash_growth = value\n        \n        # 检查所有必需数据是否都存在\n        if (enterprise_revenue_growth is None or \n            enterprise_cash_growth is None or \n            industry_revenue_growth is None or \n            industry_cash_growth is None):\n            return False\n        \n        # 验证风险条件\n        condition1 = enterprise_revenue_growth > 20  # 企业营业收入增长超过20%\n        condition2 = enterprise_revenue_growth > 1.1 * enterprise_cash_growth  # 高于现金增长率的1.1倍\n        condition3 = industry_revenue_growth < industry_cash_growth  # 行业收入增长率低于现金增长率\n        \n        # 所有条件都满足时返回True，否则返回False\n        return condition1 and condition2 and condition3\n        \n    except Exception as e as e:\n        # 处理任何异常情况，返回False\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "持续经营假设不合理",
    "risk_description": "企业经营活动产生的现金流量净额连续三年为负，本年营业利润较上年增长。（模型公式编号：191101053）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需数据变量\n        cash_flow_2022 = None\n        cash_flow_2023 = None\n        cash_flow_2024 = None\n        profit_2023 = None\n        profit_2024 = None\n        \n        # 提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            # 只使用企业类型的数据\n            if item_type != '企业':\n                continue\n                \n            if item_name == '经营活动产生的现金流量净额':\n                # 尝试获取2022-2024年数据\n                cash_flow_2022 = item.get('2022')\n                cash_flow_2023 = item.get('2023')\n                cash_flow_2024 = item.get('2024')\n                \n            elif item_name == '营业利润':\n                # 尝试获取2023-2024年数据\n                profit_2023 = item.get('2023')\n                profit_2024 = item.get('2024')\n        \n        # 检查数据完整性\n        if (cash_flow_2022 is None or cash_flow_2023 is None or cash_flow_2024 is None or\n            profit_2023 is None or profit_2024 is None):\n            return False\n        \n        # 转换数据类型\n        try:\n            cash_flow_2022 = float(str(cash_flow_2022).replace(',', ''))\n            cash_flow_2023 = float(str(cash_flow_2023).replace(',', ''))\n            cash_flow_2024 = float(str(cash_flow_2024).replace(',', ''))\n            profit_2023 = float(str(profit_2023).replace(',', ''))\n            profit_2024 = float(str(profit_2024).replace(',', ''))\n        except (ValueError, TypeError):\n            return False\n        \n        # 条件1：经营活动产生的现金流量净额连续三年为负值\n        condition1 = (cash_flow_2022 < 0 and \n                      cash_flow_2023 < 0 and \n                      cash_flow_2024 < 0)\n        \n        # 条件2：本年（2024）营业利润较上年（2023）实现增长\n        condition2 = profit_2024 > profit_2023\n        \n        # 两个条件同时满足时触发风险预警\n        return condition1 and condition2\n        \n    except Exception as e:\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "与供应商存在潜在关联关系",
    "risk_description": "本年企业不含税应付票据及应付账款超过存货，在建工程减少或增长不到10%，且应付票据及应付账款占总资产比重超过行业均值。（模型公式编号：191101101）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        enterprise_payables_2024 = None\n        enterprise_inventory_2024 = None\n        enterprise_construction_2023 = None\n        enterprise_construction_2024 = None\n        enterprise_total_assets_2024 = None\n        industry_payables_ratio = None\n        \n        # 遍历数据项提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2023 = item.get('2023', '')\n            value_2024 = item.get('2024', '')\n            \n            # 转换数值格式（去除逗号）\n            def convert_value(value):\n                if isinstance(value, str):\n                    value = value.replace(',', '')\n                try:\n                    return float(value)\n                except (ValueError, TypeError):\n                    return None\n            \n            # 提取企业数据\n            if item_type == '企业':\n                if '应付票据及应付账款' in item_name:\n                    enterprise_payables_2024 = convert_value(value_2024)\n                elif '存货' in item_name:\n                    enterprise_inventory_2024 = convert_value(value_2024)\n                elif '在建工程' in item_name:\n                    enterprise_construction_2023 = convert_value(value_2023)\n                    enterprise_construction_2024 = convert_value(value_2024)\n                elif '总资产' in item_name:\n                    enterprise_total_assets_2024 = convert_value(value_2024)\n            \n            # 提取行业数据（应付票据及应付账款占总资产比重）\n            if item_type == '行业' and '应付票据及应付账款占总资产比重' in item_name:\n                industry_payables_ratio = convert_value(value_2024)\n        \n        # 检查数据完整性\n        if (enterprise_payables_2024 is None or enterprise_inventory_2024 is None or \n            enterprise_construction_2023 is None or enterprise_construction_2024 is None or \n            enterprise_total_assets_2024 is None or industry_payables_ratio is None):\n            return False\n        \n        # 条件1: 本年企业不含税应付票据及应付账款 > 存货\n        condition1 = enterprise_payables_2024 > enterprise_inventory_2024\n        \n        # 条件2: 在建工程同比变化率 ∈ [-10%, 10%]\n        construction_growth_rate = ((enterprise_construction_2024 - enterprise_construction_2023) / \n                                   enterprise_construction_2023 * 100)\n        condition2 = -10 <= construction_growth_rate <= 10\n        \n        # 条件3: 应付票据及应付账款占总资产比重 > 行业均值\n        enterprise_payables_ratio = (enterprise_payables_2024 / enterprise_total_assets_2024) * 100\n        condition3 = enterprise_payables_ratio > industry_payables_ratio\n        \n        # 所有条件同时满足时返回True（存在风险）\n        return condition1 and condition2 and condition3\n        \n    except Exception as e as e:\n        # 处理所有可能的异常情况\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "与供应商存在潜在关联关系",
    "risk_description": "本年企业应付账款占存货的比例高于行业总体样本中85%的企业。（模型公式编号：210601021）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取企业应付账款和存货数据\n        enterprise_payables = None\n        enterprise_inventory = None\n        industry_percentile = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', '')\n            \n            # 转换数值格式（去除逗号并转为浮点数）\n            if value_2024 and isinstance(value_2024, str):\n                try:\n                    numeric_value = float(value_2024.replace(',', ''))\n                except ValueError:\n                    continue\n            \n            if item_type == '企业':\n                if item_name == '应付票据及应付账款':\n                    enterprise_payables = numeric_value\n                elif item_name == '存货':\n                    enterprise_inventory = numeric_value\n            \n            elif item_type == '行业':\n                if '应付票据及应付账款占负债和所有者权益总计比(%)' in item_name:\n                    industry_percentile = numeric_value\n        \n        # 检查数据完整性\n        if enterprise_payables is None or enterprise_inventory is None or industry_percentile is None:\n            return False\n        \n        # 计算企业应付账款占存货的比例\n        enterprise_ratio = enterprise_payables / enterprise_inventory\n        \n        # 判断风险：企业比例是否高于行业85分位数\n        risk_exists = enterprise_ratio > industry_percentile\n        \n        return bool(risk_exists)\n        \n    except (KeyError, TypeError, ValueError, ZeroDivisionError) as e:\n        # 处理所有可能的异常情况\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "货币资金错报",
    "risk_description": "本年企业货币资金超过5000万元，货币资金占资产总计的比重超过行业均值，利息收入占本年货币资金平均余额的比例不到1%。（模型公式编号：191101073）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 从data_dict中获取model_items\n        model_items = data_dict.get('model_items', [])\n        \n        # 如果没有数据项，返回False\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        enterprise_cash = None\n        enterprise_total_assets = None\n        industry_cash_ratio = None\n        enterprise_interest_income = None\n        enterprise_avg_cash_balance = None\n        \n        # 遍历所有数据项，提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', None)\n            \n            # 跳过缺失2024年数据的项\n            if value_2024 is None:\n                continue\n            \n            try:\n                numeric_value = float(value_2024)\n            except (ValueError, TypeError):\n                continue\n            \n            # 根据项目名称和类型提取数据\n            if item_name == '货币资金' and item_type == '企业':\n                enterprise_cash = numeric_value\n            \n            elif item_name == '资产总计' and item_type == '企业':\n                enterprise_total_assets = numeric_value\n            \n            elif item_name == '货币资金占资产总计的比重' and item_type == '行业':\n                industry_cash_ratio = numeric_value\n            \n            elif item_name == '利息收入' and item_type == '企业':\n                enterprise_interest_income = numeric_value\n            \n            elif item_name == '货币资金平均余额' and item_type == '企业':\n                enterprise_avg_cash_balance = numeric_value\n        \n        # 检查所有必需数据是否都存在\n        if (enterprise_cash is None or enterprise_total_assets is None or \n            industry_cash_ratio is None or enterprise_interest_income is None or \n            enterprise_avg_cash_balance is None):\n            return False\n        \n        # 条件1：本年企业货币资金超过5000万元\n        condition1 = enterprise_cash > 5000\n        \n        # 条件2：货币资金占资产总计的比重超过行业均值\n        cash_ratio = enterprise_cash / enterprise_total_assets * 100\n        condition2 = cash_ratio > industry_cash_ratio\n        \n        # 条件3：利息收入占本年货币资金平均余额的比例不到1%\n        interest_ratio = enterprise_interest_income / enterprise_avg_cash_balance * 100\n        condition3 = interest_ratio < 1\n        \n        # 所有条件都满足时返回True（存在风险）\n        return condition1 and condition2 and condition3\n        \n    except Exception as e as e:\n        # 处理任何异常情况，返回False\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "违规资金收付",
    "risk_description": "本年企业收到的其他与经营活动有关的现金占经营活动现金流入小计的比重高于行业总体样本中85%的企业。（模型公式编号：191101075）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        model_items = data_dict.get('model_items', [])\n        \n        # 获取企业数据\n        enterprise_other_cash = None\n        enterprise_operating_inflow = None\n        \n        # 获取行业85%分位数数据\n        industry_percentile_85 = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', None)\n            \n            if item_type == '企业':\n                if item_name == '收到的其他与经营活动有关的现金':\n                    enterprise_other_cash = float(str(value_2024).replace(',', '')) if value_2024 else None\n                elif item_name == '经营活动现金流入小计':\n                    enterprise_operating_inflow = float(str(value_2024).replace(',', '')) if value_2024 else None\n            \n            elif item_type == '行业':\n                if '85%' in item_name or '85分位' in item_name or '八十五分位' in item_name:\n                    industry_percentile_85 = float(str(value_2024).replace(',', '')) if value_2024 else None\n        \n        # 检查数据完整性\n        if enterprise_other_cash is None or enterprise_operating_inflow is None or industry_percentile_85 is None:\n            return False\n        \n        # 计算企业占比\n        enterprise_ratio = enterprise_other_cash / enterprise_operating_inflow\n        \n        # 验证风险条件\n        return enterprise_ratio > industry_percentile_85\n        \n    except (ValueError, TypeError, ZeroDivisionError, AttributeError, KeyError):\n        return False\n    except Exception as e:\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "违规资金收付",
    "risk_description": "以前少计、本年多计成本或费用",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 检查数据是否足够\n        if len(model_items) < 1:\n            return False\n        \n        # 提取企业数据\n        enterprise_data = None\n        for item in model_items:\n            if item.get('类型') == '企业':\n                enterprise_data = item\n                break\n        \n        if enterprise_data is None:\n            return False\n        \n        # 获取2023年和2024年数据\n        value_2023 = enterprise_data.get('2023')\n        value_2024 = enterprise_data.get('2024')\n        \n        # 检查数据是否存在\n        if value_2023 is None or value_2024 is None:\n            return False\n        \n        # 转换为数值类型\n        ratio_2023 = float(value_2023)\n        ratio_2024 = float(value_2024)\n        \n        # 计算变化率\n        change_rate = (ratio_2024 - ratio_2023) / ratio_2023 if ratio_2023 != 0 else 0\n        \n        # 判断条件：本年相比上年显著下降（下降幅度超过20%）\n        if change_rate < -0.2:\n            return True\n        else:\n            return False\n            \n    except (ValueError, TypeError, ZeroDivisionError):\n        return False\n    except Exception as e:\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "违规资金收付",
    "risk_description": "本年企业管理费用占营业收入的比重较上年的变动值比行业的变动值高5个百分点。（模型公式编号：191101070）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        model_items = data_dict.get('model_items', [])\n        \n        # 提取企业数据和行业数据\n        enterprise_data = None\n        industry_data = None\n        \n        for item in model_items:\n            if item.get('项目名称') == '管理费用占营业收入比(%)':\n                if item.get('类型') == '企业':\n                    enterprise_data = item\n                elif item.get('类型') == '行业':\n                    industry_data = item\n        \n        # 检查数据完整性\n        if enterprise_data is None or industry_data is None:\n            return False\n        \n        # 提取具体数值\n        enterprise_2023 = float(enterprise_data.get('2023'))\n        enterprise_2024 = float(enterprise_data.get('2024'))\n        industry_2023 = float(industry_data.get('2023'))\n        industry_2024 = float(industry_data.get('2024'))\n        \n        # 计算变动值\n        enterprise_change = enterprise_2024 - enterprise_2023\n        industry_change = industry_2024 - industry_2023\n        \n        # 判断风险条件\n        risk_condition = enterprise_change - industry_change > 5\n        \n        return risk_condition\n        \n    except (TypeError, ValueError, KeyError, AttributeError):\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "信用或资产减值损失错报",
    "risk_description": "本年企业在建工程较上年变动不超过10%，在建工程占资产总计的比重高于行业总体样本中85%的企业。（模型公式编号：210601022）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 从data_dict中获取model_items\n        model_items = data_dict.get('model_items', [])\n        \n        # 提取所需数据\n        growth_rate_item = None\n        ratio_item_company = None\n        ratio_item_industry = None\n        \n        for item in model_items:\n            if item.get('项目名称') == '在建工程增长率' and item.get('类型') == '企业':\n                growth_rate_item = item\n            elif item.get('项目名称') == '在建工程占资产总计比(%)' and item.get('类型') == '企业':\n                ratio_item_company = item\n            elif item.get('项目名称') == '在建工程占资产总计比(%)' and item.get('类型') == '行业':\n                ratio_item_industry = item\n        \n        # 检查数据是否完整\n        if not all([growth_rate_item, ratio_item_company, ratio_item_industry]):\n            return False\n        \n        # 获取增长率数据（2024年相对于2023年的变动率）\n        growth_rate_2024 = float(growth_rate_item.get('2024', 0))\n        \n        # 获取企业在建工程占资产总计比（2024年）\n        company_ratio_2024 = float(ratio_item_company.get('2024', 0))\n        \n        # 获取行业在建工程占资产总计比（2024年）- 直接使用行业值作为85分位数\n        industry_85_percentile = float(ratio_item_industry.get('2024', 0))\n        \n        # 验证条件1：增长率绝对值不超过10%\n        condition1 = abs(growth_rate_2024) <= 10\n        \n        # 验证条件2：企业比率高于行业85分位数\n        condition2 = company_ratio_2024 > industry_85_percentile\n        \n        # 两个条件同时满足时存在风险\n        return condition1 and condition2\n        \n    except (ValueError, TypeError, KeyError, AttributeError):\n        # 处理任何可能的异常情况\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "投资收益或资产处置收益错报",
    "risk_description": "企业总资产周转率连续两年低于行业均值，“经营业务利润”连续两年为负，本年营业利润较上年增长。（模型公式编号：191101019）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 如果数据为空，返回False\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        company_asset_turnover_2023 = None\n        company_asset_turnover_2024 = None\n        industry_asset_turnover_2023 = None\n        industry_asset_turnover_2024 = None\n        company_operating_profit_2023 = None\n        company_operating_profit_2024 = None\n        company_profit_growth_2024 = None\n        \n        # 遍历模型项目提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            # 提取总资产周转率数据\n            if item_name == '总资产周转率':\n                if item_type == '企业':\n                    company_asset_turnover_2023 = float(item.get('2023', 0))\n                    company_asset_turnover_2024 = float(item.get('2024', 0))\n                elif item_type == '行业':\n                    industry_asset_turnover_2023 = float(item.get('2023', 0))\n                    industry_asset_turnover_2024 = float(item.get('2024', 0))\n            \n            # 提取经营业务利润数据\n            elif item_name == '经营业务利润':\n                if item_type == '企业':\n                    # 处理带逗号的数字字符串\n                    profit_2023 = item.get('2023', '0').replace(',', '')\n                    profit_2024 = item.get('2024', '0').replace(',', '')\n                    company_operating_profit_2023 = float(profit_2023)\n                    company_operating_profit_2024 = float(profit_2024)\n            \n            # 提取营业利润增长率数据\n            elif item_name == '营业利润增长率':\n                if item_type == '企业':\n                    company_profit_growth_2024 = float(item.get('2024', 0))\n        \n        # 检查是否有任何必需数据缺失\n        if (company_asset_turnover_2023 is None or company_asset_turnover_2024 is None or\n            industry_asset_turnover_2023 is None or industry_asset_turnover_2024 is None or\n            company_operating_profit_2023 is None or company_operating_profit_2024 is None or\n            company_profit_growth_2024 is None):\n            return False\n        \n        # 验证风险条件\n        condition1 = company_asset_turnover_2023 < industry_asset_turnover_2023\n        condition2 = company_asset_turnover_2024 < industry_asset_turnover_2024\n        condition3 = company_operating_profit_2023 < 0\n        condition4 = company_operating_profit_2024 < 0\n        condition5 = company_profit_growth_2024 > 0\n        \n        # 所有条件都满足时返回True（存在风险）\n        return condition1 and condition2 and condition3 and condition4 and condition5\n        \n    except (ValueError, TypeError, AttributeError) as e:\n        # 处理数据转换错误或其他异常\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "非正常筹资",
    "risk_description": "本年企业短期借款、一年内到期的非流动负债、长期借款之和比上年减少，应收账款增长，取得借款收到的现金小于偿还债务支付的现金，企业财务费用增长超过50%。（模型公式编号：191101102）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 创建数据字典便于访问\n        data_map = {}\n        for item in model_items:\n            name = item.get('项目名称')\n            if name:\n                data_map[name] = item\n        \n        # 提取所需数据\n        # 1. 计算借款总额（短期借款+一年内到期的非流动负债+长期借款）\n        short_loan_2023 = float(data_map.get('短期借款', {}).get('2023', '0').replace(',', '')) if data_map.get('短期借款', {}).get('2023') != '-' else 0\n        short_loan_2024 = float(data_map.get('短期借款', {}).get('2024', '0').replace(',', '')) if data_map.get('短期借款', {}).get('2024') != '-' else 0\n        \n        current_debt_2023 = float(data_map.get('一年内到期的非流动负债', {}).get('2023', '0').replace(',', '')) if data_map.get('一年内到期的非流动负债', {}).get('2023') != '-' else 0\n        current_debt_2024 = float(data_map.get('一年内到期的非流动负债', {}).get('2024', '0').replace(',', '')) if data_map.get('一年内到期的非流动负债', {}).get('2024') != '-' else 0\n        \n        long_loan_2023 = float(data_map.get('长期借款', {}).get('2023', '0').replace(',', '')) if data_map.get('长期借款', {}).get('2023') != '-' else 0\n        long_loan_2024 = float(data_map.get('长期借款', {}).get('2024', '0').replace(',', '')) if data_map.get('长期借款', {}).get('2024') != '-' else 0\n        \n        total_loan_2023 = short_loan_2023 + current_debt_2023 + long_loan_2023\n        total_loan_2024 = short_loan_2024 + current_debt_2024 + long_loan_2024\n        \n        # 2. 应收账款增长率\n        ar_growth_2023 = float(data_map.get('应收票据、应收账款、应收款项融资及合同资产增长率', {}).get('2023', '0')) if data_map.get('应收票据、应收账款、应收款项融资及合同资产增长率', {}).get('2023') != '-' else 0\n        ar_growth_2024 = float(data_map.get('应收票据、应收账款、应收款项融资及合同资产增长率', {}).get('2024', '0')) if data_map.get('应收票据、应收账款、应收款项融资及合同资产增长率', {}).get('2024') != '-' else 0\n        \n        # 3. 借款现金流\n        loan_received_2024 = float(data_map.get('取得借款收到的现金', {}).get('2024', '0').replace(',', '')) if data_map.get('取得借款收到的现金', {}).get('2024') != '-' else 0\n        debt_paid_2024 = float(data_map.get('偿还债务支付的现金', {}).get('2024', '0').replace(',', '')) if data_map.get('偿还债务支付的现金', {}).get('2024') != '-' else 0\n        \n        # 4. 财务费用增长率\n        finance_cost_growth_2024 = float(data_map.get('财务费用增长率', {}).get('2024', '0')) if data_map.get('财务费用增长率', {}).get('2024') != '-' else 0\n        \n        # 验证风险条件\n        condition1 = total_loan_2024 < total_loan_2023  # 借款总额减少\n        condition2 = ar_growth_2024 > 0  # 应收账款增长\n        condition3 = loan_received_2024 < debt_paid_2024  # 借款收到的现金小于偿还债务支付的现金\n        condition4 = finance_cost_growth_2024 > 50  # 财务费用增长超过50%\n        \n        # 所有条件都满足时返回True\n        return condition1 and condition2 and condition3 and condition4\n        \n    except (ValueError, TypeError, AttributeError, KeyError) as e:\n        # 处理数据缺失或格式错误的情况\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "重大资产重组",
    "risk_description": "本年企业资产总计增长超过50%，或营业收入增长超过50%，或所有者权益合计增长超过50%。（模型公式编号：191101108）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 定义需要检查的指标名称\n        target_items = ['资产总计增长率', '营业收入增长率', '所有者权益合计增长率']\n        \n        # 检查数据是否足够\n        if not model_items:\n            return False\n        \n        # 查找企业数据\n        enterprise_data = {}\n        for item in model_items:\n            if item.get('类型') == '企业' and item.get('项目名称') in target_items:\n                enterprise_data[item['项目名称']] = item\n        \n        # 检查是否所有必需数据都存在\n        if len(enterprise_data) != len(target_items):\n            return False\n        \n        # 检查每个指标是否超过50%增长率阈值\n        for item_name in target_items:\n            item_data = enterprise_data[item_name]\n            # 获取2024年数据\n            value_2024 = float(item_data.get('2024', 0))\n            \n            # 检查是否超过50%\n            if value_2024 > 50.0:\n                return True\n        \n        # 所有指标都未超过阈值\n        return False\n        \n    except (KeyError, ValueError, TypeError, AttributeError):\n        # 处理任何可能的异常情况\n        return False"
  }
]