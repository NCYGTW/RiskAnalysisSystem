[
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "本年企业营业收入增长超过20%，应收账款周转率高于行业总体样本中85%的企业。（模型公式编号：191101030）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化变量\n        enterprise_revenue_growth = None\n        enterprise_receivable_turnover = None\n        industry_receivable_turnover = None\n        \n        # 遍历所有项目提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', '')\n            \n            # 跳过空值\n            if not value_2024:\n                continue\n                \n            # 提取企业营业收入增长率\n            if item_name == '营业收入增长率' and item_type == '企业':\n                enterprise_revenue_growth = float(value_2024)\n            \n            # 提取企业应收账款周转率\n            elif (item_name == '应收票据、应收账款、应收款项融资及合同资产周转率【次】' \n                  and item_type == '企业'):\n                enterprise_receivable_turnover = float(value_2024)\n            \n            # 提取行业应收账款周转率（85%分位数直接使用行业值）\n            elif (item_name == '应收票据、应收账款、应收款项融资及合同资产周转率【次】' \n                  and item_type == '行业'):\n                industry_receivable_turnover = float(value_2024)\n        \n        # 检查所有必需数据是否都存在\n        if (enterprise_revenue_growth is None or \n            enterprise_receivable_turnover is None or \n            industry_receivable_turnover is None):\n            return False\n        \n        # 验证风险条件\n        # 条件1：企业营业收入增长率 > 20%\n        condition1 = enterprise_revenue_growth > 20.0\n        \n        # 条件2：企业应收账款周转率 > 行业应收账款周转率的85%分位数\n        # 根据要求，直接使用行业值作为85%分位数\n        condition2 = enterprise_receivable_turnover > industry_receivable_turnover\n        \n        # 两个条件都满足时存在风险\n        return condition1 and condition2\n        \n    except (ValueError, TypeError) as e:\n        # 处理数据类型转换错误\n        return False\n    except ZeroDivisionError as e:\n        # 处理除零错误\n        return False\n    except Exception as e:\n        # 处理其他所有异常\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "本年企业“每元固定资产提供的营业收入”超过上年的1.2倍，固定资产减少不到10%，营业收入增长超过20%。（模型公式编号：191101080）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        current_revenue_per_asset = None\n        previous_revenue_per_asset = None\n        asset_growth_rate = None\n        revenue_growth_rate = None\n        \n        # 从model_items中提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            # 只使用企业类型的数据\n            if item_type != '企业':\n                continue\n                \n            if item_name == '每元固定资产及使用权资产提供的营业收入':\n                current_revenue_per_asset = item.get('2024')\n                previous_revenue_per_asset = item.get('2023')\n            elif item_name == '固定资产及使用权资产增长率':\n                asset_growth_rate = item.get('2024')\n            elif item_name == '营业收入增长率':\n                revenue_growth_rate = item.get('2024')\n        \n        # 检查数据是否完整\n        if None in [current_revenue_per_asset, previous_revenue_per_asset, asset_growth_rate, revenue_growth_rate]:\n            return False\n        \n        # 转换数据类型\n        current_revenue_per_asset = float(current_revenue_per_asset)\n        previous_revenue_per_asset = float(previous_revenue_per_asset)\n        asset_growth_rate = float(asset_growth_rate)\n        revenue_growth_rate = float(revenue_growth_rate)\n        \n        # 验证风险条件\n        condition1 = current_revenue_per_asset > previous_revenue_per_asset * 1.2\n        condition2 = asset_growth_rate > -10  # 固定资产减少率 < 10% 等价于 增长率 > -10%\n        condition3 = revenue_growth_rate > 20\n        \n        # 所有条件都满足时返回True\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError):\n        # 处理数据类型转换错误\n        return False\n    except ZeroDivisionError:\n        # 处理除零错误\n        return False\n    except Exception as e:\n        # 处理其他所有异常\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业营业收入增长超过20%，且大于销售商品和提供劳务收到的现金增长率，同时其差额超过行业均值的3倍。（模型公式编号：191101002）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        enterprise_revenue_growth = None\n        enterprise_cash_growth = None\n        industry_revenue_growth = None\n        industry_cash_growth = None\n        \n        # 遍历model_items提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', '')\n            \n            # 跳过空值\n            if not value_2024:\n                continue\n                \n            # 转换数据类型\n            try:\n                numeric_value = float(value_2024)\n            except (ValueError, TypeError):\n                continue\n            \n            # 根据项目名称和类型提取对应数据\n            if item_name == '营业收入增长率':\n                if item_type == '企业':\n                    enterprise_revenue_growth = numeric_value\n                elif item_type == '行业':\n                    industry_revenue_growth = numeric_value\n            \n            elif item_name == '销售商品、提供劳务收到的现金增长率':\n                if item_type == '企业':\n                    enterprise_cash_growth = numeric_value\n                elif item_type == '行业':\n                    industry_cash_growth = numeric_value\n        \n        # 检查所有必需数据是否都存在\n        if (enterprise_revenue_growth is None or \n            enterprise_cash_growth is None or \n            industry_revenue_growth is None or \n            industry_cash_growth is None):\n            return False\n        \n        # 验证风险条件\n        condition1 = enterprise_revenue_growth > 20.0\n        condition2 = enterprise_revenue_growth > enterprise_cash_growth\n        condition3 = (enterprise_revenue_growth - enterprise_cash_growth) > 3 * (industry_revenue_growth - industry_cash_growth)\n        \n        # 所有条件都满足时返回True\n        return condition1 and condition2 and condition3\n        \n    except Exception as e:\n        # 捕获所有其他异常，确保函数不会崩溃\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年行业营业收入增长率高于销售商品、提供劳务收到的现金增长率，且其差额和上年比扩大；同时，本年企业营业收入增长率高于销售商品、提供劳务收到的现金增长率且和上年比差异扩大；且企业本年营业收入增长率和销售商品、提供劳务收到的现金增长率的差额比行业高5个百分点以上。（模型公式编号：191101018）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所有需要的变量\n        corp_rev_growth_2023 = None\n        corp_rev_growth_2024 = None\n        corp_cash_growth_2023 = None\n        corp_cash_growth_2024 = None\n        ind_rev_growth_2023 = None\n        ind_rev_growth_2024 = None\n        ind_cash_growth_2023 = None\n        ind_cash_growth_2024 = None\n        \n        # 提取数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2023 = item.get('2023', '')\n            value_2024 = item.get('2024', '')\n            \n            if item_name == '营业收入增长率' and item_type == '企业':\n                corp_rev_growth_2023 = float(value_2023) if value_2023 != '' else None\n                corp_rev_growth_2024 = float(value_2024) if value_2024 != '' else None\n            elif item_name == '销售商品、提供劳务收到的现金增长率' and item_type == '企业':\n                corp_cash_growth_2023 = float(value_2023) if value_2023 != '' else None\n                corp_cash_growth_2024 = float(value_2024) if value_2024 != '' else None\n            elif item_name == '营业收入增长率' and item_type == '行业':\n                ind_rev_growth_2023 = float(value_2023) if value_2023 != '' else None\n                ind_rev_growth_2024 = float(value_2024) if value_2024 != '' else None\n            elif item_name == '销售商品、提供劳务收到的现金增长率' and item_type == '行业':\n                ind_cash_growth_2023 = float(value_2023) if value_2023 != '' else None\n                ind_cash_growth_2024 = float(value_2024) if value_2024 != '' else None\n        \n        # 检查数据完整性\n        if (corp_rev_growth_2023 is None or corp_rev_growth_2024 is None or \n            corp_cash_growth_2023 is None or corp_cash_growth_2024 is None or\n            ind_rev_growth_2023 is None or ind_rev_growth_2024 is None or\n            ind_cash_growth_2023 is None or ind_cash_growth_2024 is None):\n            return False\n        \n        # 条件1: 本年行业营业收入增长率高于销售商品、提供劳务收到的现金增长率，且其差额和上年比扩大\n        ind_diff_2024 = ind_rev_growth_2024 - ind_cash_growth_2024\n        ind_diff_2023 = ind_rev_growth_2023 - ind_cash_growth_2023\n        condition1 = (ind_rev_growth_2024 > ind_cash_growth_2024) and (ind_diff_2024 > ind_diff_2023)\n        \n        # 条件2: 本年企业营业收入增长率高于销售商品、提供劳务收到的现金增长率且和上年比差异扩大\n        corp_diff_2024 = corp_rev_growth_2024 - corp_cash_growth_2024\n        corp_diff_2023 = corp_rev_growth_2023 - corp_cash_growth_2023\n        condition2 = (corp_rev_growth_2024 > corp_cash_growth_2024) and (corp_diff_2024 > corp_diff_2023)\n        \n        # 条件3: 企业本年营业收入增长率和销售商品、提供劳务收到的现金增长率的差额比行业高5个百分点以上\n        condition3 = (corp_diff_2024 - ind_diff_2024) > 5\n        \n        # 所有条件同时满足时返回True\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, ZeroDivisionError) as e:\n        # 处理数据类型转换错误和其他常见异常\n        return False\n    except Exception as e:\n        # 处理其他未知异常\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业应收账款周转率降低，存货周转率提高，营业收入增长超过20%。（模型公式编号：191101035）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        ar_turnover_2023 = None\n        ar_turnover_2024 = None\n        inventory_turnover_2023 = None\n        inventory_turnover_2024 = None\n        revenue_growth_2024 = None\n        \n        # 遍历model_items提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            # 只处理企业类型的数据\n            if item_type != '企业':\n                continue\n                \n            if '应收票据、应收账款、应收款项融资及合同资产周转率' in item_name:\n                ar_turnover_2023 = float(item.get('2023', 0))\n                ar_turnover_2024 = float(item.get('2024', 0))\n            elif '存货周转率' in item_name:\n                inventory_turnover_2023 = float(item.get('2023', 0))\n                inventory_turnover_2024 = float(item.get('2024', 0))\n            elif '营业收入增长率' in item_name:\n                revenue_growth_2024 = float(item.get('2024', 0))\n        \n        # 检查所有必要数据是否都存在\n        if (ar_turnover_2023 is None or ar_turnover_2024 is None or \n            inventory_turnover_2023 is None or inventory_turnover_2024 is None or \n            revenue_growth_2024 is None):\n            return False\n        \n        # 验证风险条件\n        # 1. 应收账款周转率2024年较2023年降低\n        condition1 = ar_turnover_2024 < ar_turnover_2023\n        \n        # 2. 存货周转率2024年较2023年显著提高\n        condition2 = inventory_turnover_2024 > inventory_turnover_2023\n        \n        # 3. 营业收入增长率2024年超过20%阈值\n        condition3 = revenue_growth_2024 > 20.0\n        \n        # 三项指标同时满足时返回True（存在风险）\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, ZeroDivisionError) as e:\n        # 处理数据类型转换错误、类型错误、除零错误等\n        return False\n    except Exception as e:\n        # 处理其他可能的异常\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业股本较上年无变动，长期股权投资变动不超过5%，营业收入增长超过30%。（模型公式编号：191101112）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items列表\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需的企业数据\n        equity_growth_data = None\n        longterm_investment_data = None\n        revenue_growth_data = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_name == '股本增长率' and item_type == '企业':\n                equity_growth_data = item\n            elif item_name == '长期股权投资增长率' and item_type == '企业':\n                longterm_investment_data = item\n            elif item_name == '营业收入增长率' and item_type == '企业':\n                revenue_growth_data = item\n        \n        # 检查数据是否完整\n        if not all([equity_growth_data, longterm_investment_data, revenue_growth_data]):\n            return False\n        \n        # 提取2024年数据并转换为浮点数\n        equity_growth_2024 = float(equity_growth_data.get('2024', 0))\n        longterm_investment_2024 = float(longterm_investment_data.get('2024', 0))\n        revenue_growth_2024 = float(revenue_growth_data.get('2024', 0))\n        \n        # 应用风险判断条件\n        condition1 = abs(equity_growth_2024 - 0.00) < 0.01  # 股本增长率等于0.00（考虑浮点数精度）\n        condition2 = longterm_investment_2024 <= 5.00  # 长期股权投资增长率不超过5%\n        condition3 = revenue_growth_2024 > 30.00  # 营业收入增长率超过30%\n        \n        # 所有条件同时满足时存在风险\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, KeyError, ZeroDivisionError) as e:\n        # 处理数据类型转换错误、键错误、除零错误等异常\n        return False\n    except Exception as e:\n        # 处理其他未知异常\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "关联方占用资金",
    "risk_description": "本年企业预付账款增长超过50%，且占流动资产比重高于行业总体样本中85%的企业。（模型公式编号：200301004）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据\n        growth_rate_2024 = None\n        company_ratio_2024 = None\n        industry_ratio_2024 = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', '')\n            \n            if item_name == '预付款项增长率' and item_type == '企业':\n                growth_rate_2024 = value_2024\n            elif item_name == '预付款项占流动资产合计比(%)' and item_type == '企业':\n                company_ratio_2024 = value_2024\n            elif item_name == '预付款项占流动资产合计比(%)' and item_type == '行业':\n                industry_ratio_2024 = value_2024\n        \n        # 检查数据完整性\n        if growth_rate_2024 is None or company_ratio_2024 is None or industry_ratio_2024 is None:\n            return False\n        \n        # 数据类型转换\n        growth_rate = float(growth_rate_2024)\n        company_ratio = float(company_ratio_2024)\n        industry_85_percentile = float(industry_ratio_2024)  # 直接使用行业值作为85分位值\n        \n        # 验证条件1：本年预付款项增长率 > 50%\n        condition1 = growth_rate > 50\n        \n        # 验证条件2：本年预付款项占流动资产比 > 行业85分位值\n        condition2 = company_ratio > industry_85_percentile\n        \n        # 同时满足两个条件则存在风险\n        return condition1 and condition2\n        \n    except (ValueError, TypeError) as e:\n        # 处理数据类型转换错误\n        return False\n    except ZeroDivisionError as e:\n        # 处理除零错误\n        return False\n    except Exception as e:\n        # 处理其他异常\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "货币资金错报",
    "risk_description": "本年企业货币资金超过“短长期债务”的5倍，股本无变动或增长不到1%，资本公积无变动或增长不到5%。（模型公式编号：191101103）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据\n        monetary_fund_2024 = None\n        short_long_debt_2024 = None\n        equity_growth_rate_2024 = None\n        capital_reserve_growth_rate_2024 = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', '')\n            \n            if item_name == '货币资金' and item_type == '企业':\n                monetary_fund_2024 = float(str(value_2024).replace(',', '')) if value_2024 else None\n            elif item_name == '短长期债务' and item_type == '企业':\n                short_long_debt_2024 = float(str(value_2024).replace(',', '')) if value_2024 else None\n            elif item_name == '股本增长率' and item_type == '企业':\n                equity_growth_rate_2024 = float(str(value_2024).replace(',', '')) if value_2024 else None\n            elif item_name == '资本公积增长率' and item_type == '企业':\n                capital_reserve_growth_rate_2024 = float(str(value_2024).replace(',', '')) if value_2024 else None\n        \n        # 检查数据完整性\n        if any(x is None for x in [monetary_fund_2024, short_long_debt_2024, equity_growth_rate_2024, capital_reserve_growth_rate_2024]):\n            return False\n        \n        # 验证风险条件\n        condition1 = monetary_fund_2024 > short_long_debt_2024 * 5\n        condition2 = equity_growth_rate_2024 <= 1.0\n        condition3 = capital_reserve_growth_rate_2024 <= 5.0\n        \n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, ZeroDivisionError) as e:\n        # 处理数据类型转换、除零错误等异常\n        return False\n    except Exception as e:\n        # 处理其他可能的异常\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "违规资金收付",
    "risk_description": "本年企业银行手续费（财务费用-利息费用+利息收入，未考虑汇兑损益影响）占经营活动现金流出小计、投资活动现金流出小计及筹资活动现金流出小计三项之和的比例超过0.5%。（模型公式编号：191101089）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items列表\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        financial_expense = None\n        interest_expense = None\n        interest_income = None\n        operating_outflow = None\n        investing_outflow = None\n        financing_outflow = None\n        \n        # 提取2024年数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_value_2024 = item.get('2024', '')\n            \n            # 跳过空值\n            if not item_value_2024:\n                continue\n                \n            # 转换字符串为浮点数（处理逗号分隔符）\n            try:\n                numeric_value = float(str(item_value_2024).replace(',', ''))\n            except (ValueError, TypeError):\n                continue\n            \n            # 根据项目名称分配值\n            if item_name == '财务费用':\n                financial_expense = numeric_value\n            elif item_name == '利息费用':\n                interest_expense = numeric_value\n            elif item_name == '利息收入':\n                interest_income = numeric_value\n            elif item_name == '经营活动现金流出小计':\n                operating_outflow = numeric_value\n            elif item_name == '投资活动现金流出小计':\n                investing_outflow = numeric_value\n            elif item_name == '筹资活动现金流出小计':\n                financing_outflow = numeric_value\n        \n        # 检查所有必需数据是否都存在\n        if None in [financial_expense, interest_expense, interest_income, \n                   operating_outflow, investing_outflow, financing_outflow]:\n            return False\n        \n        # 计算银行手续费（财务费用 - 利息费用 + 利息收入）\n        bank_fee = financial_expense - interest_expense + interest_income\n        \n        # 计算现金流出总额\n        total_cash_outflow = operating_outflow + investing_outflow + financing_outflow\n        \n        # 检查除零错误\n        if total_cash_outflow == 0:\n            return False\n        \n        # 计算比例\n        ratio = bank_fee / total_cash_outflow\n        \n        # 判断风险：比例大于0.5%（0.005）则存在风险\n        return ratio > 0.005\n        \n    except (ValueError, TypeError, ZeroDivisionError) as e:\n        # 处理可能的异常情况\n        return False\n    except Exception as e:\n        # 处理其他未知异常\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "违规资金收付",
    "risk_description": "本年企业其他流动资产增长超过40%，且占资产总计的比重超过行业总体样本中85%的企业。（模型公式编号：191101083）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据\n        growth_rate_2024 = None\n        company_ratio_2024 = None\n        industry_ratio_2024 = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', '')\n            \n            if item_name == '其他流动资产增长率' and item_type == '企业':\n                growth_rate_2024 = float(value_2024) if value_2024 else None\n            elif item_name == '其他流动资产占资产总计比(%)' and item_type == '企业':\n                company_ratio_2024 = float(value_2024) if value_2024 else None\n            elif item_name == '其他流动资产占资产总计比(%)' and item_type == '行业':\n                industry_ratio_2024 = float(value_2024) if value_2024 else None\n        \n        # 检查数据完整性\n        if growth_rate_2024 is None or company_ratio_2024 is None or industry_ratio_2024 is None:\n            return False\n        \n        # 验证风险条件\n        condition1 = growth_rate_2024 > 40\n        condition2 = company_ratio_2024 > industry_ratio_2024\n        \n        return condition1 and condition2\n        \n    except (ValueError, TypeError):\n        # 处理数据类型转换错误\n        return False\n    except ZeroDivisionError:\n        # 处理除零错误\n        return False\n    except Exception as e:\n        # 处理其他所有异常\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "违规资金收付",
    "risk_description": "本年企业其他流动资产占流动资产合计的比重超过15%。（模型公式编号：191101100）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 检查数据是否足够\n        if not model_items or len(model_items) < 1:\n            return False\n        \n        # 查找企业数据点\n        enterprise_item = None\n        for item in model_items:\n            if item.get('类型') == '企业':\n                enterprise_item = item\n                break\n        \n        # 如果找不到企业数据点，返回False\n        if enterprise_item is None:\n            return False\n        \n        # 获取2024年企业其他流动资产占流动资产合计比\n        ratio_2024 = enterprise_item.get('2024')\n        \n        # 检查数据是否存在\n        if ratio_2024 is None:\n            return False\n        \n        # 转换为浮点数\n        ratio_value = float(ratio_2024)\n        \n        # 判断风险条件：比例 > 15%\n        return ratio_value > 15.0\n        \n    except (ValueError, TypeError) as e:\n        # 处理数据类型转换错误\n        return False\n    except ZeroDivisionError as e:\n        # 处理除零错误\n        return False\n    except Exception as e:\n        # 处理其他所有异常\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "以前少计、本年多计成本或费用",
    "risk_description": "本年企业利息费用占“短长期债务”平均余额的比例比上年提高了3个百分点以上。（模型公式编号：191101085）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据\n        interest_expense_2023 = None\n        interest_expense_2024 = None\n        debt_2023 = None\n        debt_2024 = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_name == '利息费用' and item_type == '企业':\n                interest_expense_2023 = item.get('2023')\n                interest_expense_2024 = item.get('2024')\n            elif item_name == '短长期债务' and item_type == '企业':\n                debt_2023 = item.get('2023')\n                debt_2024 = item.get('2024')\n        \n        # 检查数据完整性\n        if None in [interest_expense_2023, interest_expense_2024, debt_2023, debt_2024]:\n            return False\n        \n        # 数据清洗和转换\n        def clean_numeric_value(value):\n            if isinstance(value, str):\n                # 移除逗号和空格\n                value = value.replace(',', '').replace(' ', '')\n            return float(value)\n        \n        interest_expense_2023 = clean_numeric_value(interest_expense_2023)\n        interest_expense_2024 = clean_numeric_value(interest_expense_2024)\n        debt_2023 = clean_numeric_value(debt_2023)\n        debt_2024 = clean_numeric_value(debt_2024)\n        \n        # 检查除零错误\n        if debt_2023 == 0 or debt_2024 == 0:\n            return False\n        \n        # 计算利息保障比率\n        ratio_2023 = interest_expense_2023 / debt_2023\n        ratio_2024 = interest_expense_2024 / debt_2024\n        \n        # 计算比率变化（转换为百分比）\n        ratio_change = (ratio_2024 - ratio_2023) * 100\n        \n        # 判断风险：比率变化是否 ≥ 3%\n        return ratio_change >= 3.0\n        \n    except (ValueError, TypeError, ZeroDivisionError) as e:\n        # 处理数据类型转换错误、除零错误等\n        return False\n    except Exception as e:\n        # 处理其他可能的异常\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "以前少计、本年多计成本或费用",
    "risk_description": "本年企业利息费用占“短长期债务”平均余额的比例比上年提高了3个百分点以上。（模型公式编号：191101085）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 检查数据字典是否包含必要的字段\n        if 'model_items' not in data_dict:\n            return False\n        \n        model_items = data_dict['model_items']\n        \n        # 初始化所需变量\n        interest_2023 = None\n        interest_2024 = None\n        debt_2023 = None\n        debt_2024 = None\n        \n        # 从model_items中提取数据\n        for item in model_items:\n            if item['项目名称'] == '利息费用' and item['类型'] == '企业':\n                try:\n                    interest_2023 = float(str(item['2023']).replace(',', '')) if '2023' in item and item['2023'] else None\n                    interest_2024 = float(str(item['2024']).replace(',', '')) if '2024' in item and item['2024'] else None\n                except (ValueError, TypeError):\n                    return False\n            \n            elif item['项目名称'] == '短长期债务' and item['类型'] == '企业':\n                try:\n                    debt_2023 = float(str(item['2023']).replace(',', '')) if '2023' in item and item['2023'] else None\n                    debt_2024 = float(str(item['2024']).replace(',', '')) if '2024' in item and item['2024'] else None\n                except (ValueError, TypeError):\n                    return False\n        \n        # 检查所有必需数据是否都存在\n        if None in [interest_2023, interest_2024, debt_2023, debt_2024]:\n            return False\n        \n        # 计算两年的利息费用占比\n        try:\n            ratio_2023 = interest_2023 / debt_2023\n            ratio_2024 = interest_2024 / debt_2024\n        except ZeroDivisionError:\n            return False\n        \n        # 计算比例变化（转换为百分比）\n        ratio_change = (ratio_2024 - ratio_2023) * 100\n        \n        # 判断是否风险：本年比例比上年提高了3个百分点以上\n        return ratio_change > 3\n        \n    except Exception as e:\n        # 捕获其他未预期的异常\n        return False",
    "is_retry": true
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "递延所得税资产错报",
    "risk_description": "本年企业递延所得税资产减少超过50%。（模型公式编号：191101098）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 查找递延所得税资产增长率的企业数据\n        enterprise_data = None\n        for item in model_items:\n            if (item.get('项目名称') == '递延所得税资产增长率' and \n                item.get('类型') == '企业'):\n                enterprise_data = item\n                break\n        \n        if enterprise_data is None:\n            return False\n        \n        # 获取2024年数据\n        growth_rate_2024 = enterprise_data.get('2024')\n        if growth_rate_2024 is None:\n            return False\n        \n        # 转换为浮点数并验证\n        growth_rate = float(growth_rate_2024)\n        \n        # 判断风险条件：增长率小于-50%\n        if growth_rate < -50.0:\n            return True\n        else:\n            return False\n            \n    except (ValueError, TypeError) as e:\n        # 处理数据类型转换错误\n        return False\n    except ZeroDivisionError as e:\n        # 处理除零错误\n        return False\n    except Exception as e:\n        # 处理其他所有异常\n        return False"
  },
  {
    "company_name": "浙江联翔智能家居股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "本年企业“每元工资提供的营业收入”比前一年均值高1.2倍，营业收入增长超过20%。（模型公式编号：191101056）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据\n        wage_revenue_data = {}\n        revenue_growth_data = {}\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_name == '每元工资提供的营业收入':\n                if item_type == '企业':\n                    wage_revenue_data['2023'] = item.get('2023')\n                    wage_revenue_data['2024'] = item.get('2024')\n            \n            elif item_name == '营业收入增长率':\n                if item_type == '企业':\n                    revenue_growth_data['2024'] = item.get('2024')\n        \n        # 检查数据完整性\n        if not wage_revenue_data or not revenue_growth_data:\n            return False\n        \n        # 转换数据类型并验证\n        try:\n            # 获取本年每元工资提供的营业收入\n            current_wage_revenue = float(wage_revenue_data['2024'])\n            \n            # 获取前一年每元工资提供的营业收入均值\n            prev_wage_revenue = float(wage_revenue_data['2023'])\n            \n            # 获取本年营业收入增长率\n            current_revenue_growth = float(revenue_growth_data['2024'])\n            \n        except (ValueError, TypeError):\n            return False\n        \n        # 验证风险条件\n        condition1 = current_wage_revenue > (prev_wage_revenue * 1.2)\n        condition2 = current_revenue_growth > 20.0\n        \n        return condition1 and condition2\n        \n    except Exception as e:\n        return False"
  },
  {
    "company_name": "浙江联翔智能家居股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业营业收入增长超过20%，且大于销售商品和提供劳务收到的现金增长率，同时其差额超过行业均值的3倍。（模型公式编号：191101002）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items列表\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        enterprise_revenue_growth = None\n        industry_revenue_growth = None\n        enterprise_cash_growth = None\n        industry_cash_growth = None\n        \n        # 遍历model_items提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', '')\n            \n            # 跳过空值\n            if not value_2024:\n                continue\n                \n            # 转换数据类型\n            try:\n                numeric_value = float(value_2024)\n            except (ValueError, TypeError):\n                continue\n            \n            # 根据项目名称和类型匹配数据\n            if item_name == '营业收入增长率':\n                if item_type == '企业':\n                    enterprise_revenue_growth = numeric_value\n                elif item_type == '行业':\n                    industry_revenue_growth = numeric_value\n            \n            elif item_name == '销售商品、提供劳务收到的现金增长率':\n                if item_type == '企业':\n                    enterprise_cash_growth = numeric_value\n                elif item_type == '行业':\n                    industry_cash_growth = numeric_value\n        \n        # 检查所有必需数据是否都存在\n        if any(x is None for x in [enterprise_revenue_growth, industry_revenue_growth, \n                                  enterprise_cash_growth, industry_cash_growth]):\n            return False\n        \n        # 验证风险条件\n        condition1 = enterprise_revenue_growth > 20.0\n        condition2 = enterprise_revenue_growth > enterprise_cash_growth\n        condition3 = (enterprise_revenue_growth - enterprise_cash_growth) > 3 * (industry_revenue_growth - industry_cash_growth)\n        \n        # 所有条件都满足时返回True\n        return condition1 and condition2 and condition3\n        \n    except Exception as e:\n        # 捕获所有其他异常，确保函数不会崩溃\n        return False"
  },
  {
    "company_name": "浙江联翔智能家居股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业应收账款周转率降低，存货周转率提高，营业收入增长超过20%。（模型公式编号：191101035）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        ar_turnover_2023 = None\n        ar_turnover_2024 = None\n        inventory_turnover_2023 = None\n        inventory_turnover_2024 = None\n        revenue_growth_2024 = None\n        \n        # 遍历model_items提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            # 只处理企业类型的数据\n            if item_type != '企业':\n                continue\n                \n            if '应收票据、应收账款、应收款项融资及合同资产周转率' in item_name:\n                ar_turnover_2023 = float(item.get('2023', 0))\n                ar_turnover_2024 = float(item.get('2024', 0))\n            elif '存货周转率' in item_name:\n                inventory_turnover_2023 = float(item.get('2023', 0))\n                inventory_turnover_2024 = float(item.get('2024', 0))\n            elif '营业收入增长率' in item_name:\n                revenue_growth_2024 = float(item.get('2024', 0))\n        \n        # 检查所有必需数据是否都存在\n        if (ar_turnover_2023 is None or ar_turnover_2024 is None or \n            inventory_turnover_2023 is None or inventory_turnover_2024 is None or \n            revenue_growth_2024 is None):\n            return False\n        \n        # 验证风险条件\n        # 1. 应收账款周转率显著降低\n        ar_turnover_decreased = ar_turnover_2024 < ar_turnover_2023\n        \n        # 2. 存货周转率提高\n        inventory_turnover_increased = inventory_turnover_2024 > inventory_turnover_2023\n        \n        # 3. 营业收入增长率超过20%\n        revenue_growth_exceeded = revenue_growth_2024 > 20.0\n        \n        # 所有条件同时满足时存在风险\n        risk_exists = ar_turnover_decreased and inventory_turnover_increased and revenue_growth_exceeded\n        \n        return risk_exists\n        \n    except (ValueError, TypeError, ZeroDivisionError) as e:\n        # 处理数据类型转换错误、类型错误和除零错误\n        return False\n    except Exception as e:\n        # 处理其他可能的异常\n        return False"
  },
  {
    "company_name": "浙江联翔智能家居股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业应收账款增长额占营业收入的比重高于行业总体样本中85%的企业。（模型公式编号：191101061）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取企业数据和行业数据\n        enterprise_data = None\n        industry_data = None\n        \n        for item in model_items:\n            item_type = item.get('类型', '')\n            if item_type == '企业':\n                enterprise_data = item\n            elif item_type == '行业':\n                industry_data = item\n        \n        # 检查数据是否完整\n        if not enterprise_data or not industry_data:\n            return False\n        \n        # 提取企业2024年数据（本年）\n        enterprise_ratio_2024 = enterprise_data.get('2024')\n        if enterprise_ratio_2024 is None:\n            return False\n        \n        # 提取行业85分位数值（直接使用行业数据点的值）\n        industry_85_percentile = industry_data.get('2024')\n        if industry_85_percentile is None:\n            return False\n        \n        # 数据类型转换\n        enterprise_value = float(enterprise_ratio_2024)\n        industry_benchmark = float(industry_85_percentile)\n        \n        # 风险判断：企业比例值 > 行业85分位数值\n        risk_exists = enterprise_value > industry_benchmark\n        \n        return risk_exists\n        \n    except (ValueError, TypeError):\n        # 处理数据类型转换错误\n        return False\n    except ZeroDivisionError:\n        # 处理除零错误\n        return False\n    except Exception as e:\n        # 处理其他所有异常\n        return False"
  },
  {
    "company_name": "浙江联翔智能家居股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业应收账款增长额占营业收入的比重高于行业总体样本中85%的企业。（模型公式编号：191101061）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取企业数据和行业数据\n        enterprise_data = None\n        industry_data = None\n        \n        for item in model_items:\n            if item.get('类型') == '企业':\n                enterprise_data = item\n            elif item.get('类型') == '行业':\n                industry_data = item\n        \n        # 检查数据完整性\n        if not enterprise_data or not industry_data:\n            return False\n        \n        # 获取企业本年数据（2024年）\n        enterprise_2024 = enterprise_data.get('2024')\n        if enterprise_2024 is None:\n            return False\n        \n        # 获取行业85%分位数数据（直接使用行业数据点的值）\n        industry_threshold = industry_data.get('2024')\n        if industry_threshold is None:\n            return False\n        \n        # 转换数据类型\n        enterprise_value = float(enterprise_2024)\n        threshold_value = float(industry_threshold)\n        \n        # 判断风险条件：企业值 > 行业阈值\n        risk_exists = enterprise_value > threshold_value\n        \n        return risk_exists\n        \n    except (ValueError, TypeError):\n        # 处理数据类型转换错误\n        return False\n    except ZeroDivisionError:\n        # 处理除零错误\n        return False\n    except Exception as e:\n        # 处理其他所有异常\n        return False",
    "is_retry": true
  },
  {
    "company_name": "浙江联翔智能家居股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业营业收入增长超过20%，营业收入增长率超过销售商品和提供劳务收到的现金增长率的1.5倍。（模型公式编号：210101002）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据\n        revenue_growth = None\n        cash_growth = None\n        \n        for item in model_items:\n            if item.get('项目名称') == '营业收入增长率' and item.get('类型') == '企业':\n                revenue_growth = item.get('2024')\n            elif item.get('项目名称') == '销售商品、提供劳务收到的现金增长率' and item.get('类型') == '企业':\n                cash_growth = item.get('2024')\n        \n        # 检查数据是否存在\n        if revenue_growth is None or cash_growth is None:\n            return False\n        \n        # 转换数据类型\n        revenue_growth_val = float(revenue_growth)\n        cash_growth_val = float(cash_growth)\n        \n        # 验证风险条件\n        condition1 = revenue_growth_val > 20.0\n        condition2 = revenue_growth_val > 1.5 * cash_growth_val\n        \n        return condition1 and condition2\n        \n    except (ValueError, TypeError):\n        # 处理数据类型转换错误\n        return False\n    except ZeroDivisionError:\n        # 处理除零错误\n        return False\n    except Exception as e:\n        # 处理其他异常\n        return False"
  },
  {
    "company_name": "浙江联翔智能家居股份有限公司",
    "risk_category": "少结转主营业务成本",
    "risk_description": "本年企业应收账款周转率与存货周转率均不到行业均值的90%，毛利率比行业均值高10个百分点以上。（模型公式编号：191101045）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        enterprise_ar_turnover_2024 = None\n        industry_ar_turnover_2024 = None\n        enterprise_inventory_turnover_2024 = None\n        industry_inventory_turnover_2024 = None\n        enterprise_gross_margin_2024 = None\n        industry_gross_margin_2024 = None\n        \n        # 遍历所有项目提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', '')\n            \n            # 跳过空值\n            if not value_2024:\n                continue\n                \n            # 转换数据类型\n            try:\n                numeric_value = float(value_2024)\n            except (ValueError, TypeError):\n                continue\n            \n            # 根据项目名称和类型分类存储数据\n            if '应收票据、应收账款、应收款项融资及合同资产周转率' in item_name:\n                if item_type == '企业':\n                    enterprise_ar_turnover_2024 = numeric_value\n                elif item_type == '行业':\n                    industry_ar_turnover_2024 = numeric_value\n            \n            elif '存货周转率' in item_name:\n                if item_type == '企业':\n                    enterprise_inventory_turnover_2024 = numeric_value\n                elif item_type == '行业':\n                    industry_inventory_turnover_2024 = numeric_value\n            \n            elif '销售毛利率' in item_name:\n                if item_type == '企业':\n                    enterprise_gross_margin_2024 = numeric_value\n                elif item_type == '行业':\n                    industry_gross_margin_2024 = numeric_value\n        \n        # 检查所有必需数据是否都存在\n        if (enterprise_ar_turnover_2024 is None or industry_ar_turnover_2024 is None or\n            enterprise_inventory_turnover_2024 is None or industry_inventory_turnover_2024 is None or\n            enterprise_gross_margin_2024 is None or industry_gross_margin_2024 is None):\n            return False\n        \n        # 计算比较阈值\n        ar_threshold = industry_ar_turnover_2024 * 0.9\n        inventory_threshold = industry_inventory_turnover_2024 * 0.9\n        gross_margin_threshold = industry_gross_margin_2024 + 10\n        \n        # 验证风险条件\n        condition1 = enterprise_ar_turnover_2024 < ar_threshold\n        condition2 = enterprise_inventory_turnover_2024 < inventory_threshold\n        condition3 = enterprise_gross_margin_2024 > gross_margin_threshold\n        \n        # 返回风险判断结果\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, ZeroDivisionError) as e:\n        # 处理可能的异常情况\n        return False\n    except Exception as e:\n        # 处理其他未知异常\n        return False"
  },
  {
    "company_name": "浙江联翔智能家居股份有限公司",
    "risk_category": "少结转主营业务成本",
    "risk_description": "本年企业应收账款周转率与存货周转率均不到行业均值的90%，毛利率比行业均值高10个百分点以上。（模型公式编号：191101045）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 检查数据字典是否包含必要的字段\n        if 'model_items' not in data_dict:\n            return False\n        \n        model_items = data_dict['model_items']\n        \n        # 初始化所需变量\n        enterprise_ar_turnover = None\n        industry_ar_turnover = None\n        enterprise_inventory_turnover = None\n        industry_inventory_turnover = None\n        enterprise_gross_margin = None\n        industry_gross_margin = None\n        \n        # 从model_items中提取所需数据\n        for item in model_items:\n            if item['项目名称'] == '应收票据、应收账款、应收款项融资及合同资产周转率【次】':\n                if item['类型'] == '企业':\n                    enterprise_ar_turnover = float(item['2024'])\n                elif item['类型'] == '行业':\n                    industry_ar_turnover = float(item['2024'])\n            \n            elif item['项目名称'] == '存货周转率【次】':\n                if item['类型'] == '企业':\n                    enterprise_inventory_turnover = float(item['2024'])\n                elif item['类型'] == '行业':\n                    industry_inventory_turnover = float(item['2024'])\n            \n            elif item['项目名称'] == '销售毛利率':\n                if item['类型'] == '企业':\n                    enterprise_gross_margin = float(item['2024'])\n                elif item['类型'] == '行业':\n                    industry_gross_margin = float(item['2024'])\n        \n        # 检查所有必需数据是否都存在\n        if (enterprise_ar_turnover is None or industry_ar_turnover is None or\n            enterprise_inventory_turnover is None or industry_inventory_turnover is None or\n            enterprise_gross_margin is None or industry_gross_margin is None):\n            return False\n        \n        # 应用风险判断条件\n        condition1 = enterprise_ar_turnover < industry_ar_turnover * 0.9\n        condition2 = enterprise_inventory_turnover < industry_inventory_turnover * 0.9\n        condition3 = enterprise_gross_margin > industry_gross_margin + 10\n        \n        # 所有条件都满足时返回True（存在风险）\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, ZeroDivisionError) as e:\n        # 处理数据类型转换错误、类型错误和除零错误\n        return False\n    except Exception as e:\n        # 处理其他可能的异常\n        return False",
    "is_retry": true
  },
  {
    "company_name": "浙江联翔智能家居股份有限公司",
    "risk_category": "少结转主营业务成本",
    "risk_description": "本年企业股本较上年无变动，长期股权投资减少，营业收入增长超过30%。（模型公式编号：191101110）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需指标值\n        equity_growth_rate_2024 = None\n        long_term_investment_growth_rate_2024 = None\n        revenue_growth_rate_2024 = None\n        \n        # 遍历所有项目，提取所需指标\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', '')\n            \n            if item_name == '股本增长率' and item_type == '企业':\n                equity_growth_rate_2024 = float(value_2024) if value_2024 != '-' else None\n            \n            elif item_name == '长期股权投资增长率' and item_type == '企业':\n                long_term_investment_growth_rate_2024 = float(value_2024) if value_2024 != '-' else None\n            \n            elif item_name == '营业收入增长率' and item_type == '企业':\n                revenue_growth_rate_2024 = float(value_2024) if value_2024 != '-' else None\n        \n        # 检查数据是否完整\n        if (equity_growth_rate_2024 is None or \n            long_term_investment_growth_rate_2024 is None or \n            revenue_growth_rate_2024 is None):\n            return False\n        \n        # 验证风险条件\n        condition1 = equity_growth_rate_2024 == 0  # 股本增长率为0\n        condition2 = long_term_investment_growth_rate_2024 < 0  # 长期股权投资增长率为负\n        condition3 = revenue_growth_rate_2024 > 30  # 营业收入增长率超过30%\n        \n        # 所有条件同时满足时返回True\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError) as e:\n        # 处理数据类型转换错误\n        return False\n    except ZeroDivisionError as e:\n        # 处理除零错误\n        return False\n    except Exception as e:\n        # 处理其他异常\n        return False"
  },
  {
    "company_name": "浙江联翔智能家居股份有限公司",
    "risk_category": "少计成本或费用",
    "risk_description": "本年企业营业收入增长超过20%，“经营业务利润”增长率比营业收入增长率高30个百分点以上。（模型公式编号：191101010）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 提取所需的企业数据\n        revenue_growth = None\n        profit_growth = None\n        \n        for item in model_items:\n            if item.get('类型') == '企业':\n                if item.get('项目名称') == '营业收入增长率':\n                    revenue_growth = float(item.get('2024', 0))\n                elif item.get('项目名称') == '经营业务利润增长率':\n                    profit_growth = float(item.get('2024', 0))\n        \n        # 检查数据是否完整\n        if revenue_growth is None or profit_growth is None:\n            return False\n        \n        # 验证风险条件\n        condition1 = revenue_growth > 20\n        condition2 = (profit_growth - revenue_growth) > 30\n        \n        return condition1 and condition2\n        \n    except (ValueError, TypeError) as e:\n        # 处理数据类型转换错误\n        return False\n    except ZeroDivisionError as e:\n        # 处理除零错误\n        return False\n    except Exception as e:\n        # 处理其他异常\n        return False"
  },
  {
    "company_name": "浙江联翔智能家居股份有限公司",
    "risk_category": "少计成本或费用",
    "risk_description": "企业营业收入前二年持续下降，本年增长，且比本年销售费用增幅高4个百分点以上，营业利润上年为负，本年为正。（模型公式编号：191101013）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        if 'model_items' not in data_dict:\n            return False\n            \n        model_items = data_dict['model_items']\n        if not isinstance(model_items, list) or len(model_items) == 0:\n            return False\n        \n        # 初始化所需变量\n        revenue_growth_2023 = None\n        revenue_growth_2024 = None\n        sales_expense_growth_2024 = None\n        operating_profit_2023 = None\n        operating_profit_2024 = None\n        \n        # 提取各项指标数据\n        for item in model_items:\n            if not isinstance(item, dict):\n                continue\n                \n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            # 只处理企业类型的数据\n            if item_type != '企业':\n                continue\n                \n            if item_name == '营业收入增长率':\n                revenue_growth_2023 = item.get('2023')\n                revenue_growth_2024 = item.get('2024')\n            elif item_name == '销售费用增长率':\n                sales_expense_growth_2024 = item.get('2024')\n            elif item_name == '营业利润':\n                operating_profit_2023 = item.get('2023')\n                operating_profit_2024 = item.get('2024')\n        \n        # 检查所有必需数据是否都存在\n        if (revenue_growth_2023 is None or revenue_growth_2024 is None or \n            sales_expense_growth_2024 is None or \n            operating_profit_2023 is None or operating_profit_2024 is None):\n            return False\n        \n        # 数据类型转换和验证\n        # 处理可能存在的逗号分隔符\n        def convert_to_float(value):\n            if isinstance(value, str):\n                # 移除逗号分隔符\n                value = value.replace(',', '')\n            return float(value)\n        \n        revenue_growth_2023 = convert_to_float(revenue_growth_2023)\n        revenue_growth_2024 = convert_to_float(revenue_growth_2024)\n        sales_expense_growth_2024 = convert_to_float(sales_expense_growth_2024)\n        operating_profit_2023 = convert_to_float(operating_profit_2023)\n        operating_profit_2024 = convert_to_float(operating_profit_2024)\n        \n        # 验证风险条件\n        # 1. 前两年营业收入持续下降（2023年增长率为负）\n        condition1 = revenue_growth_2023 < 0\n        \n        # 2. 本年营业收入增长（2024年增长率为正）\n        condition2 = revenue_growth_2024 > 0\n        \n        # 3. 本年营业收入增长率比销售费用增长率高4个百分点以上\n        condition3 = (revenue_growth_2024 - sales_expense_growth_2024) > 4\n        \n        # 4. 上年营业利润为负（2023年为负值）\n        condition4 = operating_profit_2023 < 0\n        \n        # 5. 本年营业利润为正（2024年为正值）\n        condition5 = operating_profit_2024 > 0\n        \n        # 所有条件都满足时存在风险\n        return condition1 and condition2 and condition3 and condition4 and condition5\n        \n    except (ValueError, TypeError, ZeroDivisionError) as e:\n        # 处理数据类型转换错误和其他异常\n        return False\n    except Exception as e:\n        # 处理其他未知异常\n        return False"
  },
  {
    "company_name": "浙江联翔智能家居股份有限公司",
    "risk_category": "少计成本或费用",
    "risk_description": "企业营业收入前二年持续下降，本年增长，且比本年销售费用增幅高4个百分点以上，营业利润上年为负，本年为正。（模型公式编号：191101013）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需指标数据\n        revenue_growth_data = None\n        sales_expense_growth_data = None\n        operating_profit_data = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_name == '营业收入增长率' and item_type == '企业':\n                revenue_growth_data = item\n            elif item_name == '销售费用增长率' and item_type == '企业':\n                sales_expense_growth_data = item\n            elif item_name == '营业利润' and item_type == '企业':\n                operating_profit_data = item\n        \n        # 检查数据完整性\n        if not all([revenue_growth_data, sales_expense_growth_data, operating_profit_data]):\n            return False\n        \n        # 提取具体数值并转换类型\n        revenue_growth_2023 = float(revenue_growth_data.get('2023', '0').replace(',', ''))\n        revenue_growth_2024 = float(revenue_growth_data.get('2024', '0').replace(',', ''))\n        \n        sales_expense_growth_2024 = float(sales_expense_growth_data.get('2024', '0').replace(',', ''))\n        \n        operating_profit_2023 = float(operating_profit_data.get('2023', '0').replace(',', ''))\n        operating_profit_2024 = float(operating_profit_data.get('2024', '0').replace(',', ''))\n        \n        # 验证条件1: 营业收入前两年持续下降（2023年为负增长）\n        condition1 = revenue_growth_2023 < 0\n        \n        # 验证条件2: 本年营业收入增长（2024年增长率为正）\n        condition2 = revenue_growth_2024 > 0\n        \n        # 验证条件3: 本年营业收入增长率比销售费用增长率高4个百分点以上\n        growth_diff = revenue_growth_2024 - sales_expense_growth_2024\n        condition3 = growth_diff > 4\n        \n        # 验证条件4: 营业利润上年为负（2023年为负值）\n        condition4 = operating_profit_2023 < 0\n        \n        # 验证条件5: 营业利润本年为正（2024年为正值）\n        condition5 = operating_profit_2024 > 0\n        \n        # 所有条件同时满足时存在风险\n        return condition1 and condition2 and condition3 and condition4 and condition5\n        \n    except (ValueError, TypeError, ZeroDivisionError, AttributeError, KeyError):\n        return False",
    "is_retry": true
  },
  {
    "company_name": "浙江联翔智能家居股份有限公司",
    "risk_category": "以前少计、本年多计信用或资产减值损失",
    "risk_description": "本年企业信用减值损失超过应收账款、预付账款、其他应收款期初余额之和的10%。（模型公式编号：210601012）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        credit_impairment_loss = None\n        receivables_beginning = None\n        prepayments_beginning = None\n        other_receivables_beginning = None\n        \n        # 遍历所有项目提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            # 只处理企业类型的数据\n            if item_type != '企业':\n                continue\n                \n            if item_name == '信用减值损失':\n                credit_impairment_loss = item.get('2024', '')\n            elif item_name == '应收票据、应收账款、应收款项融资及合同资产':\n                receivables_beginning = item.get('2023', '')\n            elif item_name == '预付款项':\n                prepayments_beginning = item.get('2023', '')\n            elif item_name == '其他应收款':\n                other_receivables_beginning = item.get('2023', '')\n        \n        # 检查数据是否完整\n        if (credit_impairment_loss is None or receivables_beginning is None or \n            prepayments_beginning is None or other_receivables_beginning is None):\n            return False\n        \n        # 数据清洗和转换\n        def convert_to_float(value):\n            \"\"\"将字符串转换为浮点数，处理千分位分隔符\"\"\"\n            if isinstance(value, str):\n                # 移除逗号和空格\n                cleaned_value = value.replace(',', '').replace(' ', '')\n                return float(cleaned_value)\n            elif isinstance(value, (int, float)):\n                return float(value)\n            else:\n                raise ValueError(f\"无法转换的数据类型: {type(value)}\")\n        \n        # 转换所有数据为浮点数\n        credit_impairment_loss_value = abs(convert_to_float(credit_impairment_loss))\n        receivables_beginning_value = convert_to_float(receivables_beginning)\n        prepayments_beginning_value = convert_to_float(prepayments_beginning)\n        other_receivables_beginning_value = convert_to_float(other_receivables_beginning)\n        \n        # 计算应收账款、预付款项、其他应收款期初余额之和\n        total_receivables_beginning = (receivables_beginning_value + \n                                      prepayments_beginning_value + \n                                      other_receivables_beginning_value)\n        \n        # 计算阈值（10%）\n        threshold = total_receivables_beginning * 0.1\n        \n        # 判断风险条件：信用减值损失绝对值是否超过阈值\n        risk_exists = credit_impairment_loss_value > threshold\n        \n        return risk_exists\n        \n    except (ValueError, TypeError, ZeroDivisionError) as e:\n        # 处理数据转换错误、类型错误和除零错误\n        print(f\"数据处理错误: {e}\")\n        return False\n    except Exception as e:\n        # 处理其他所有异常\n        print(f\"未知错误: {e}\")\n        return False"
  },
  {
    "company_name": "浙江联翔智能家居股份有限公司",
    "risk_category": "以前少计、本年多计信用或资产减值损失",
    "risk_description": "本年企业信用减值损失超过应收账款、预付账款、其他应收款期初余额之和的10%。（模型公式编号：210601012）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        credit_loss_2024 = None\n        receivables_2023 = None\n        prepayments_2023 = None\n        other_receivables_2023 = None\n        \n        # 提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2023 = item.get('2023', '')\n            value_2024 = item.get('2024', '')\n            \n            # 只处理企业类型数据\n            if item_type != '企业':\n                continue\n                \n            # 转换字符串为浮点数\n            if item_name == '信用减值损失':\n                if value_2024:\n                    credit_loss_2024 = float(str(value_2024).replace(',', ''))\n            elif item_name == '应收票据、应收账款、应收款项融资及合同资产':\n                if value_2023:\n                    receivables_2023 = float(str(value_2023).replace(',', ''))\n            elif item_name == '预付款项':\n                if value_2023:\n                    prepayments_2023 = float(str(value_2023).replace(',', ''))\n            elif item_name == '其他应收款':\n                if value_2023:\n                    other_receivables_2023 = float(str(value_2023).replace(',', ''))\n        \n        # 检查数据完整性\n        if (credit_loss_2024 is None or receivables_2023 is None or \n            prepayments_2023 is None or other_receivables_2023 is None):\n            return False\n        \n        # 计算三项应收款项期初余额之和的10%\n        total_receivables_base = receivables_2023 + prepayments_2023 + other_receivables_2023\n        threshold = total_receivables_base * 0.1\n        \n        # 比较信用减值损失绝对值与阈值\n        # 注意：信用减值损失通常为负值，取其绝对值进行比较\n        credit_loss_abs = abs(credit_loss_2024)\n        \n        # 判断风险条件\n        return credit_loss_abs > threshold\n        \n    except (ValueError, TypeError, ZeroDivisionError) as e:\n        # 处理数据类型转换错误和其他常见异常\n        return False\n    except Exception as e:\n        # 处理其他未知异常\n        return False",
    "is_retry": true
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "企业营业收入增长，且本年增长率高于行业总体样本中85%的企业。（模型公式编号：191101005）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items or len(model_items) < 2:\n            return False\n        \n        # 提取企业和行业数据\n        company_data = None\n        industry_data = None\n        \n        for item in model_items:\n            if item.get('项目名称') == '营业收入增长率':\n                if item.get('类型') == '企业':\n                    company_data = item\n                elif item.get('类型') == '行业':\n                    industry_data = item\n        \n        # 检查数据是否存在\n        if not company_data or not industry_data:\n            return False\n        \n        # 获取企业本年增长率\n        company_growth_2024 = company_data.get('2024')\n        if company_growth_2024 is None:\n            return False\n        \n        # 获取行业增长率（直接使用行业数据点作为85分位数）\n        industry_percentile_85 = industry_data.get('2024')\n        if industry_percentile_85 is None:\n            return False\n        \n        # 转换为数值类型\n        company_growth = float(company_growth_2024)\n        industry_85th = float(industry_percentile_85)\n        \n        # 验证条件：企业营业收入增长，且本年增长率高于行业85分位数\n        # 由于行业数据点直接作为85分位数使用，无需额外计算\n        if company_growth > industry_85th:\n            return True\n        else:\n            return False\n            \n    except (ValueError, TypeError) as e:\n        # 处理数据类型转换错误\n        return False\n    except ZeroDivisionError as e:\n        # 处理除零错误\n        return False\n    except Exception as e:\n        # 处理其他异常\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "本年企业营业收入增长超过20%，在建工程增长超过30%，应收账款减少，或增长不到10%。（模型公式编号：191101021）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取各指标的企业数据\n        revenue_growth = None\n        construction_growth = None\n        receivables_growth = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', '')\n            \n            if item_type != '企业':\n                continue\n                \n            # 转换2024年数据为浮点数\n            try:\n                if isinstance(value_2024, str):\n                    # 处理可能存在的逗号分隔符\n                    value_2024 = value_2024.replace(',', '')\n                numeric_value = float(value_2024)\n            except (ValueError, TypeError):\n                continue\n                \n            if item_name == '营业收入增长率':\n                revenue_growth = numeric_value\n            elif item_name == '在建工程增长率':\n                construction_growth = numeric_value\n            elif item_name == '应收票据、应收账款、应收款项融资及合同资产增长率':\n                receivables_growth = numeric_value\n        \n        # 检查所有必要数据是否都存在\n        if revenue_growth is None or construction_growth is None or receivables_growth is None:\n            return False\n        \n        # 验证风险条件\n        condition1 = revenue_growth > 20.0  # 营业收入增长率 > 20%\n        condition2 = construction_growth > 30.0  # 在建工程增长率 > 30%\n        condition3 = receivables_growth < 10.0  # 应收款项增长率 < 10% 或为负值\n        \n        # 所有条件同时满足时存在风险\n        return condition1 and condition2 and condition3\n        \n    except Exception as e:\n        # 捕获所有其他异常情况\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "本年企业营业收入增长超过20%，在建工程增长超过30%，应收账款减少，或增长不到10%。（模型公式编号：191101021）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 检查数据是否足够\n        if len(model_items) < 3:\n            return False\n        \n        # 提取各指标的企业数据\n        revenue_growth = None\n        construction_growth = None\n        receivables_growth = None\n        \n        for item in model_items:\n            if item['项目名称'] == '营业收入增长率' and item['类型'] == '企业':\n                # 处理千分位分隔符并转换为浮点数\n                revenue_2024 = float(item['2024'].replace(',', ''))\n                revenue_growth = revenue_2024\n            \n            elif item['项目名称'] == '在建工程增长率' and item['类型'] == '企业':\n                construction_2024 = float(item['2024'].replace(',', ''))\n                construction_growth = construction_2024\n            \n            elif item['项目名称'] == '应收票据、应收账款、应收款项融资及合同资产增长率' and item['类型'] == '企业':\n                receivables_2024 = float(item['2024'].replace(',', ''))\n                receivables_growth = receivables_2024\n        \n        # 检查是否所有必要数据都存在\n        if revenue_growth is None or construction_growth is None or receivables_growth is None:\n            return False\n        \n        # 验证风险条件\n        condition1 = revenue_growth > 20.0  # 营业收入增长率 > 20%\n        condition2 = construction_growth > 30.0  # 在建工程增长率 > 30%\n        condition3 = receivables_growth < 10.0  # 应收款项增长率 < 10%\n        \n        # 所有条件同时满足时存在风险\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, ZeroDivisionError) as e:\n        # 处理数据转换错误、类型错误和除零错误\n        return False\n    except Exception as e:\n        # 处理其他可能的异常\n        return False",
    "is_retry": true
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "本年企业“每元工资提供的营业收入”比去年均值高1.2倍，营业收入增长超过20%。（模型公式编号：191101056）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 检查数据字典是否包含必要的字段\n        if 'model_items' not in data_dict:\n            return False\n            \n        model_items = data_dict['model_items']\n        \n        # 检查是否有足够的数据项\n        if len(model_items) < 2:\n            return False\n        \n        # 提取所需数据\n        revenue_per_wage_2023 = None\n        revenue_per_wage_2024 = None\n        revenue_growth_2024 = None\n        \n        for item in model_items:\n            if item['项目名称'] == '每元工资提供的营业收入':\n                if item['类型'] == '企业':\n                    if '2023' in item and item['2023']:\n                        revenue_per_wage_2023 = float(item['2023'])\n                    if '2024' in item and item['2024']:\n                        revenue_per_wage_2024 = float(item['2024'])\n            \n            elif item['项目名称'] == '营业收入增长率':\n                if item['类型'] == '企业':\n                    if '2024' in item and item['2024']:\n                        revenue_growth_2024 = float(item['2024'])\n        \n        # 检查所有必需数据是否都存在\n        if revenue_per_wage_2023 is None or revenue_per_wage_2024 is None or revenue_growth_2024 is None:\n            return False\n        \n        # 计算2023年均值（这里只有一个值，所以均值就是该值）\n        mean_revenue_per_wage_2023 = revenue_per_wage_2023\n        \n        # 验证风险条件\n        condition1 = revenue_per_wage_2024 > (mean_revenue_per_wage_2023 * 1.2)\n        condition2 = revenue_growth_2024 > 20.0\n        \n        # 两个条件都满足时返回True（存在风险）\n        return condition1 and condition2\n        \n    except (ValueError, TypeError, ZeroDivisionError) as e:\n        # 处理数据类型转换错误、类型错误、除零错误等\n        return False\n    except Exception as e:\n        # 处理其他可能的异常\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "本年企业“每元固定资产提供的营业收入”超过上年的1.2倍，固定资产减少不到10%，营业收入增长超过20%。（模型公式编号：191101080）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        per_fixed_asset_revenue_2023 = None\n        per_fixed_asset_revenue_2024 = None\n        fixed_asset_growth_2024 = None\n        revenue_growth_2024 = None\n        \n        # 提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_name == '每元固定资产及使用权资产提供的营业收入' and item_type == '企业':\n                per_fixed_asset_revenue_2023 = item.get('2023')\n                per_fixed_asset_revenue_2024 = item.get('2024')\n            \n            elif item_name == '固定资产及使用权资产增长率' and item_type == '企业':\n                fixed_asset_growth_2024 = item.get('2024')\n            \n            elif item_name == '营业收入增长率' and item_type == '企业':\n                revenue_growth_2024 = item.get('2024')\n        \n        # 检查数据完整性\n        if None in [per_fixed_asset_revenue_2023, per_fixed_asset_revenue_2024, fixed_asset_growth_2024, revenue_growth_2024]:\n            return False\n        \n        # 数据类型转换\n        per_fixed_asset_revenue_2023 = float(per_fixed_asset_revenue_2023)\n        per_fixed_asset_revenue_2024 = float(per_fixed_asset_revenue_2024)\n        fixed_asset_growth_2024 = float(fixed_asset_growth_2024)\n        revenue_growth_2024 = float(revenue_growth_2024)\n        \n        # 验证风险条件\n        condition1 = per_fixed_asset_revenue_2024 > per_fixed_asset_revenue_2023 * 1.2\n        condition2 = fixed_asset_growth_2024 > -10\n        condition3 = revenue_growth_2024 > 20\n        \n        # 所有条件都满足时返回True\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, ZeroDivisionError) as e:\n        # 处理数据类型转换错误和其他异常\n        return False\n    except Exception as e:\n        # 处理其他未知异常\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "本年企业固定资产原值增减不超过20%，“每元固定资产原值提供的营业收入”超过上年的1.5倍，营业收入增长超过20%。（模型公式编号：200201001）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 检查数据字典是否包含必要的字段\n        if 'model_items' not in data_dict:\n            return False\n        \n        model_items = data_dict['model_items']\n        \n        # 初始化所需变量\n        fixed_asset_growth_2024 = None\n        revenue_per_asset_2023 = None\n        revenue_per_asset_2024 = None\n        revenue_growth_2024 = None\n        \n        # 从model_items中提取所需数据\n        for item in model_items:\n            if item['项目名称'] == '固定资产及使用权资产原值增长率' and item['类型'] == '企业':\n                fixed_asset_growth_2024 = float(item['2024'])\n            \n            elif item['项目名称'] == '每元固定资产及使用权资产原值提供的营业收入' and item['类型'] == '企业':\n                revenue_per_asset_2023 = float(item['2023'])\n                revenue_per_asset_2024 = float(item['2024'])\n            \n            elif item['项目名称'] == '营业收入增长率' and item['类型'] == '企业':\n                revenue_growth_2024 = float(item['2024'])\n        \n        # 检查所有必要数据是否都存在\n        if (fixed_asset_growth_2024 is None or \n            revenue_per_asset_2023 is None or \n            revenue_per_asset_2024 is None or \n            revenue_growth_2024 is None):\n            return False\n        \n        # 验证三个条件是否同时满足\n        condition1 = abs(fixed_asset_growth_2024) <= 20  # 固定资产原值增减不超过20%\n        condition2 = revenue_per_asset_2024 >= revenue_per_asset_2023 * 1.5  # 每元固定资产原值提供的营业收入超过上年的1.5倍\n        condition3 = revenue_growth_2024 >= 20  # 营业收入增长超过20%\n        \n        # 三个条件同时满足时返回True（存在风险）\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, ZeroDivisionError) as e:\n        # 处理数据类型转换错误、类型错误、除零错误等异常情况\n        return False\n    except Exception as e:\n        # 处理其他可能的异常\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业营业收入增长超过20%，且大于销售商品和提供劳务收到的现金增长率，同时其差额超过行业均值的3倍。（模型公式编号：191101002）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        corp_revenue_growth = None\n        corp_cash_growth = None\n        ind_revenue_growth = None\n        ind_cash_growth = None\n        \n        # 提取各项数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', '')\n            \n            # 跳过空值\n            if not value_2024:\n                continue\n                \n            # 转换数据类型\n            try:\n                numeric_value = float(value_2024)\n            except (ValueError, TypeError):\n                continue\n            \n            # 根据项目名称和类型匹配数据\n            if item_name == '营业收入增长率':\n                if item_type == '企业':\n                    corp_revenue_growth = numeric_value\n                elif item_type == '行业':\n                    ind_revenue_growth = numeric_value\n            \n            elif item_name == '销售商品、提供劳务收到的现金增长率':\n                if item_type == '企业':\n                    corp_cash_growth = numeric_value\n                elif item_type == '行业':\n                    ind_cash_growth = numeric_value\n        \n        # 检查所有必需数据是否都存在\n        if (corp_revenue_growth is None or corp_cash_growth is None or \n            ind_revenue_growth is None or ind_cash_growth is None):\n            return False\n        \n        # 验证风险条件\n        # 条件1: 本年企业营业收入增长率 > 20%\n        condition1 = corp_revenue_growth > 20\n        \n        # 条件2: 企业营业收入增长率 > 企业销售商品、提供劳务收到的现金增长率\n        condition2 = corp_revenue_growth > corp_cash_growth\n        \n        # 条件3: (企业营业收入增长率 - 企业销售商品、提供劳务收到的现金增长率) > 3 × (行业营业收入增长率 - 行业销售商品、提供劳务收到的现金增长率)\n        corp_diff = corp_revenue_growth - corp_cash_growth\n        ind_diff = ind_revenue_growth - ind_cash_growth\n        condition3 = corp_diff > (3 * ind_diff)\n        \n        # 所有条件都满足时返回True，否则返回False\n        return condition1 and condition2 and condition3\n        \n    except Exception as e:\n        # 捕获所有其他异常，确保函数不会崩溃\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业营业收入增长超过20%，营业收入增长率超过销售商品和提供劳务收到的现金增长率的1.5倍。（模型公式编号：210101002）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        revenue_growth_rate = None\n        cash_received_growth_rate = None\n        \n        # 遍历数据项，提取所需指标\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', '')\n            \n            # 只处理企业类型的数据\n            if item_type != '企业':\n                continue\n                \n            # 转换2024年数据为浮点数\n            try:\n                numeric_value = float(value_2024)\n            except (ValueError, TypeError):\n                continue\n            \n            # 根据项目名称匹配对应的指标\n            if item_name == '营业收入增长率':\n                revenue_growth_rate = numeric_value\n            elif item_name == '销售商品、提供劳务收到的现金增长率':\n                cash_received_growth_rate = numeric_value\n        \n        # 检查数据是否完整\n        if revenue_growth_rate is None or cash_received_growth_rate is None:\n            return False\n        \n        # 验证风险条件\n        condition1 = revenue_growth_rate > 20.0\n        condition2 = revenue_growth_rate > 1.5 * cash_received_growth_rate\n        \n        return condition1 and condition2\n        \n    except Exception as e:\n        # 捕获所有其他异常，确保函数不会崩溃\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "少结转主营业务成本",
    "risk_description": "本年企业存货周转率降低，应收账款周转率提高，营业收入增长超过20%。（模型公式编号：191101033）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        if 'model_items' not in data_dict:\n            return False\n            \n        model_items = data_dict['model_items']\n        \n        # 初始化所需变量\n        inventory_turnover_2023 = None\n        inventory_turnover_2024 = None\n        receivables_turnover_2023 = None\n        receivables_turnover_2024 = None\n        revenue_growth_2024 = None\n        \n        # 遍历model_items提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            # 只处理企业类型的数据\n            if item_type != '企业':\n                continue\n                \n            # 提取存货周转率数据\n            if '存货周转率' in item_name:\n                inventory_turnover_2023 = float(item.get('2023', 0))\n                inventory_turnover_2024 = float(item.get('2024', 0))\n            \n            # 提取应收账款周转率数据（注意指标名称匹配）\n            elif '应收票据、应收账款、应收款项融资及合同资产周转率' in item_name:\n                receivables_turnover_2023 = float(item.get('2023', 0))\n                receivables_turnover_2024 = float(item.get('2024', 0))\n            \n            # 提取营业收入增长率数据\n            elif '营业收入增长率' in item_name:\n                revenue_growth_2024 = float(item.get('2024', 0))\n        \n        # 检查所有必需数据是否都存在\n        if (inventory_turnover_2023 is None or inventory_turnover_2024 is None or\n            receivables_turnover_2023 is None or receivables_turnover_2024 is None or\n            revenue_growth_2024 is None):\n            return False\n        \n        # 验证风险条件\n        condition1 = inventory_turnover_2024 < inventory_turnover_2023  # 存货周转率降低\n        condition2 = receivables_turnover_2024 > receivables_turnover_2023  # 应收账款周转率提高\n        condition3 = revenue_growth_2024 > 20  # 营业收入增长率超过20%\n        \n        # 所有条件同时满足时返回True（存在风险）\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError):\n        # 处理数据类型转换错误\n        return False\n    except ZeroDivisionError:\n        # 处理除零错误（虽然本公式中没有除法运算，但保留以防万一）\n        return False\n    except Exception as e:\n        # 处理其他所有异常\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "少结转主营业务成本",
    "risk_description": "本年企业销售毛利增长率比营业收入增长率高10个百分点以上，存货增长超过15%。（模型公式编号：191101044）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        sales_profit_growth = None\n        revenue_growth = None\n        inventory_growth = None\n        \n        # 提取2024年数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            year_2024 = item.get('2024', '')\n            \n            # 跳过无效数据\n            if not year_2024 or year_2024 == '':\n                continue\n                \n            # 转换数据类型\n            try:\n                value = float(year_2024)\n            except (ValueError, TypeError):\n                continue\n                \n            # 根据项目名称匹配数据\n            if item_name == '销售毛利增长率':\n                sales_profit_growth = value\n            elif item_name == '营业收入增长率':\n                revenue_growth = value\n            elif item_name == '存货增长率':\n                inventory_growth = value\n        \n        # 检查数据是否完整\n        if sales_profit_growth is None or revenue_growth is None or inventory_growth is None:\n            return False\n        \n        # 验证风险条件\n        # 条件1: 销售毛利增长率比营业收入增长率高10个百分点以上\n        condition1 = (sales_profit_growth - revenue_growth) > 10\n        \n        # 条件2: 存货增长率超过15%\n        condition2 = inventory_growth > 15\n        \n        # 两个条件都满足时返回True（存在风险）\n        return condition1 and condition2\n        \n    except Exception as e:\n        # 捕获所有其他异常，确保函数不会崩溃\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "少结转主营业务成本",
    "risk_description": "本年企业应收账款周转率与存货周转率均不到行业均值的90%，毛利率比行业均值高10个百分点以上。（模型公式编号：191101045）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        enterprise_ar_turnover_2024 = None\n        industry_ar_turnover_2024 = None\n        enterprise_inventory_turnover_2024 = None\n        industry_inventory_turnover_2024 = None\n        enterprise_gross_margin_2024 = None\n        industry_gross_margin_2024 = None\n        \n        # 遍历model_items提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', '')\n            \n            # 跳过空值\n            if not value_2024:\n                continue\n                \n            # 提取应收账款周转率\n            if '应收票据、应收账款、应收款项融资及合同资产周转率' in item_name:\n                if item_type == '企业':\n                    enterprise_ar_turnover_2024 = float(value_2024)\n                elif item_type == '行业':\n                    industry_ar_turnover_2024 = float(value_2024)\n            \n            # 提取存货周转率\n            elif '存货周转率' in item_name:\n                if item_type == '企业':\n                    enterprise_inventory_turnover_2024 = float(value_2024)\n                elif item_type == '行业':\n                    industry_inventory_turnover_2024 = float(value_2024)\n            \n            # 提取销售毛利率\n            elif '销售毛利率' in item_name:\n                if item_type == '企业':\n                    enterprise_gross_margin_2024 = float(value_2024)\n                elif item_type == '行业':\n                    industry_gross_margin_2024 = float(value_2024)\n        \n        # 检查所有必需数据是否都存在\n        if (enterprise_ar_turnover_2024 is None or industry_ar_turnover_2024 is None or\n            enterprise_inventory_turnover_2024 is None or industry_inventory_turnover_2024 is None or\n            enterprise_gross_margin_2024 is None or industry_gross_margin_2024 is None):\n            return False\n        \n        # 验证风险条件\n        condition1 = enterprise_ar_turnover_2024 < industry_ar_turnover_2024 * 0.9\n        condition2 = enterprise_inventory_turnover_2024 < industry_inventory_turnover_2024 * 0.9\n        condition3 = enterprise_gross_margin_2024 > industry_gross_margin_2024 + 10\n        \n        # 所有条件都满足时返回True\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, ZeroDivisionError) as e:\n        # 处理数据类型转换错误和其他异常\n        return False\n    except Exception as e:\n        # 处理其他未预期的异常\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "少结转主营业务成本",
    "risk_description": "本年企业存货增长率超过营业成本增长率的1.2倍，存货期末余额超过营业成本的1.2倍。（模型公式编号：210601002）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        inventory_growth_rate = None\n        cost_growth_rate = None\n        ending_inventory = None\n        operating_cost = None\n        \n        # 提取企业数据\n        for item in model_items:\n            item_type = item.get('类型', '')\n            item_name = item.get('项目名称', '')\n            value_2024 = item.get('2024', None)\n            \n            if item_type == '企业' and value_2024 is not None:\n                try:\n                    if item_name == '存货增长率':\n                        inventory_growth_rate = float(value_2024)\n                    elif item_name == '营业成本增长率':\n                        cost_growth_rate = float(value_2024)\n                    elif item_name == '存货期末余额':\n                        # 处理可能存在的逗号分隔符\n                        cleaned_value = value_2024.replace(',', '') if isinstance(value_2024, str) else value_2024\n                        ending_inventory = float(cleaned_value)\n                    elif item_name == '营业成本':\n                        # 处理可能存在的逗号分隔符\n                        cleaned_value = value_2024.replace(',', '') if isinstance(value_2024, str) else value_2024\n                        operating_cost = float(cleaned_value)\n                except (ValueError, TypeError):\n                    continue\n        \n        # 检查所有必需数据是否都存在\n        if None in [inventory_growth_rate, cost_growth_rate, ending_inventory, operating_cost]:\n            return False\n        \n        # 验证风险条件\n        condition1 = inventory_growth_rate > 1.2 * cost_growth_rate\n        condition2 = ending_inventory > 1.2 * operating_cost\n        \n        return condition1 and condition2\n        \n    except Exception as e:\n        # 捕获所有其他异常，返回False\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "少结转主营业务成本",
    "risk_description": "本年企业存货增长率超过营业成本增长率的1.2倍，存货期末余额超过营业成本的1.2倍。（模型公式编号：210601002）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items列表\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        inventory_growth_rate = None\n        cost_growth_rate = None\n        ending_inventory = None\n        operating_cost = None\n        \n        # 从数据中提取所需指标\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', '')\n            \n            # 只处理企业类型的数据\n            if item_type != '企业':\n                continue\n                \n            # 转换数值类型\n            try:\n                if item_name == '存货增长率':\n                    inventory_growth_rate = float(value_2024)\n                elif item_name == '营业成本增长率':\n                    cost_growth_rate = float(value_2024)\n                elif item_name == '存货期末余额':\n                    # 处理带逗号的数字字符串\n                    cleaned_value = value_2024.replace(',', '')\n                    ending_inventory = float(cleaned_value)\n                elif item_name == '营业成本':\n                    # 处理带逗号的数字字符串\n                    cleaned_value = value_2024.replace(',', '')\n                    operating_cost = float(cleaned_value)\n            except (ValueError, TypeError):\n                continue\n        \n        # 检查所有必需数据是否都存在\n        if None in [inventory_growth_rate, cost_growth_rate, ending_inventory, operating_cost]:\n            return False\n        \n        # 验证风险条件\n        condition1 = inventory_growth_rate > cost_growth_rate * 1.2\n        condition2 = ending_inventory > operating_cost * 1.2\n        \n        # 两个条件必须同时满足\n        return condition1 and condition2\n        \n    except (KeyError, ValueError, TypeError, ZeroDivisionError) as e:\n        # 处理所有可能的异常情况\n        return False\n    except Exception as e:\n        # 处理其他未知异常\n        return False",
    "is_retry": true
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "与供应商存在潜在关联关系",
    "risk_description": "本年企业销售商品、提供劳务收到的现金超过含税营业收入，应付票据及应付账款增长，或减少不到10%。（模型公式编号：191101025）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        revenue_2024 = None\n        cash_received_2024 = None\n        payables_growth_2024 = None\n        vat_rate = 0.13  # 默认增值税税率13%\n        \n        # 提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', '')\n            \n            # 跳过行业类型数据，只使用企业数据\n            if item_type != '企业':\n                continue\n                \n            # 转换数值格式（去除逗号）\n            if value_2024 and isinstance(value_2024, str):\n                value_2024 = float(value_2024.replace(',', ''))\n            \n            if item_name == '营业收入':\n                revenue_2024 = value_2024\n            elif item_name == '销售商品、提供劳务收到的现金':\n                cash_received_2024 = value_2024\n            elif item_name == '应付票据及应付账款增长率':\n                payables_growth_2024 = value_2024\n        \n        # 检查数据完整性\n        if revenue_2024 is None or cash_received_2024 is None or payables_growth_2024 is None:\n            return False\n        \n        # 计算含税营业收入\n        tax_included_revenue = revenue_2024 * (1 + vat_rate)\n        \n        # 验证风险条件\n        condition1 = cash_received_2024 > tax_included_revenue\n        condition2 = (payables_growth_2024 >= 0.1) or (payables_growth_2024 <= -0.1)\n        \n        return condition1 and condition2\n        \n    except (ValueError, TypeError, ZeroDivisionError) as e:\n        # 处理数据类型转换错误、类型错误和除零错误\n        return False\n    except Exception as e:\n        # 处理其他可能的异常\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "与供应商存在潜在关联关系",
    "risk_description": "本年企业销售商品、提供劳务收到的现金超过含税营业收入，应付票据及应付账款增长，或减少不到10%。（模型公式编号：191101025）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        cash_received = None\n        operating_revenue = None\n        payables_growth_rate = None\n        \n        # 提取企业数据\n        for item in model_items:\n            if item.get('类型') == '企业':\n                item_name = item.get('项目名称')\n                value_2024 = item.get('2024')\n                \n                if item_name == '销售商品、提供劳务收到的现金' and value_2024:\n                    cash_received = float(str(value_2024).replace(',', ''))\n                elif item_name == '营业收入' and value_2024:\n                    operating_revenue = float(str(value_2024).replace(',', ''))\n                elif item_name == '应付票据及应付账款增长率' and value_2024:\n                    payables_growth_rate = float(str(value_2024).replace(',', ''))\n        \n        # 检查数据是否完整\n        if cash_received is None or operating_revenue is None or payables_growth_rate is None:\n            return False\n        \n        # 计算含税营业收入（增值税税率13%）\n        tax_rate = 1.13\n        tax_included_revenue = operating_revenue * tax_rate\n        \n        # 验证风险条件\n        condition1 = cash_received > tax_included_revenue\n        condition2 = payables_growth_rate > -10.0\n        \n        return condition1 and condition2\n        \n    except (ValueError, TypeError, ZeroDivisionError) as e:\n        # 处理数据类型转换错误、类型错误和除零错误\n        return False\n    except Exception as e:\n        # 处理其他可能的异常\n        return False",
    "is_retry": true
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "货币资金错报",
    "risk_description": "本年企业货币资金超过5000万元，货币资金占资产总计的比重超过行业均值，利息收入占本年货币资金的比例不到1%。（模型公式编号：191101073）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        enterprise_cash_2024 = None\n        enterprise_cash_ratio_2024 = None\n        enterprise_interest_income_2024 = None\n        industry_cash_ratio_2024 = None\n        \n        # 提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', '')\n            \n            # 跳过空值\n            if not value_2024:\n                continue\n                \n            # 转换数值类型\n            try:\n                if item_name == '货币资金' and item_type == '企业':\n                    enterprise_cash_2024 = float(str(value_2024).replace(',', ''))\n                elif item_name == '货币资金占资产总计比(%)' and item_type == '企业':\n                    enterprise_cash_ratio_2024 = float(str(value_2024).replace(',', ''))\n                elif item_name == '利息收入' and item_type == '企业':\n                    enterprise_interest_income_2024 = float(str(value_2024).replace(',', ''))\n                elif item_name == '货币资金占资产总计比(%)' and item_type == '行业':\n                    industry_cash_ratio_2024 = float(str(value_2024).replace(',', ''))\n            except (ValueError, TypeError):\n                continue\n        \n        # 检查数据是否完整\n        if any(x is None for x in [enterprise_cash_2024, enterprise_cash_ratio_2024, \n                                  enterprise_interest_income_2024, industry_cash_ratio_2024]):\n            return False\n        \n        # 验证条件1: 本年货币资金 > 5000万元\n        condition1 = enterprise_cash_2024 > 50000000\n        \n        # 验证条件2: 企业货币资金占资产总计比 > 行业均值\n        condition2 = enterprise_cash_ratio_2024 > industry_cash_ratio_2024\n        \n        # 验证条件3: 利息收入/货币资金 < 1%\n        try:\n            interest_ratio = enterprise_interest_income_2024 / enterprise_cash_2024\n            condition3 = interest_ratio < 0.01\n        except ZeroDivisionError:\n            condition3 = False\n        \n        # 所有条件同时满足时返回True\n        return condition1 and condition2 and condition3\n        \n    except Exception as e:\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "违规资金收付",
    "risk_description": "本年企业收到的其他与经营活动有关的现金占经营活动现金流入小计的比重高于行业总体样本中85%的企业。（模型公式编号：191101075）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取企业和行业数据\n        enterprise_value = None\n        industry_percentile_value = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', None)\n            \n            if item_name == '收到其他与经营活动有关的现金占经营活动现金流入小计比(%)':\n                if item_type == '企业' and value_2024 is not None:\n                    # 转换企业2024年数据\n                    enterprise_value = float(value_2024)\n                elif item_type == '行业' and value_2024 is not None:\n                    # 行业数据点即为85%分位数值\n                    industry_percentile_value = float(value_2024)\n        \n        # 检查数据是否完整\n        if enterprise_value is None or industry_percentile_value is None:\n            return False\n        \n        # 验证风险条件：企业比率 > 行业85%分位数值\n        return enterprise_value > industry_percentile_value\n        \n    except (ValueError, TypeError) as e:\n        # 处理数据类型转换错误\n        return False\n    except ZeroDivisionError as e:\n        # 处理除零错误\n        return False\n    except Exception as e:\n        # 处理其他异常\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "违规资金收付",
    "risk_description": "本年企业收到的其他与经营活动有关的现金占经营活动现金流入小计的比重高于行业总体样本中85%的企业。（模型公式编号：191101075）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取企业数据和行业数据\n        enterprise_data = None\n        industry_data = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_type == '企业' and '收到其他与经营活动有关的现金占经营活动现金流入小计比' in item_name:\n                enterprise_data = item\n            elif item_type == '行业' and '收到其他与经营活动有关的现金占经营活动现金流入小计比' in item_name:\n                industry_data = item\n        \n        # 检查数据是否完整\n        if not enterprise_data or not industry_data:\n            return False\n        \n        # 获取2024年企业指标值\n        enterprise_value_str = enterprise_data.get('2024', '')\n        if not enterprise_value_str:\n            return False\n        \n        # 获取行业85分位数值\n        industry_percentile_str = industry_data.get('2024', '')\n        if not industry_percentile_str:\n            return False\n        \n        # 转换为数值类型\n        enterprise_value = float(enterprise_value_str)\n        industry_percentile = float(industry_percentile_str)\n        \n        # 判断风险条件：企业指标值 > 行业85分位数值\n        return enterprise_value > industry_percentile\n        \n    except (ValueError, TypeError):\n        # 处理数据类型转换错误\n        return False\n    except ZeroDivisionError:\n        # 处理除零错误\n        return False\n    except Exception as e:\n        # 处理其他所有异常\n        return False",
    "is_retry": true
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "以前少计、本年多计成本或费用",
    "risk_description": "本年企业利息费用占“短长期债务”平均余额的比例比上年提高了3个百分点以上。（模型公式编号：191101085）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 检查数据字典是否包含必要的字段\n        if 'model_items' not in data_dict:\n            return False\n            \n        model_items = data_dict['model_items']\n        \n        # 初始化所需变量\n        interest_2023 = None\n        interest_2024 = None\n        debt_2023 = None\n        debt_2024 = None\n        \n        # 从model_items中提取数据\n        for item in model_items:\n            if item['项目名称'] == '利息费用' and item['类型'] == '企业':\n                interest_2023 = float(item['2023'].replace(',', '')) if item['2023'] else None\n                interest_2024 = float(item['2024'].replace(',', '')) if item['2024'] else None\n            elif item['项目名称'] == '短长期债务' and item['类型'] == '企业':\n                debt_2023 = float(item['2023'].replace(',', '')) if item['2023'] else None\n                debt_2024 = float(item['2024'].replace(',', '')) if item['2024'] else None\n        \n        # 检查数据是否完整\n        if None in [interest_2023, interest_2024, debt_2023, debt_2024]:\n            return False\n            \n        # 计算短长期债务平均余额\n        avg_debt_balance = (debt_2023 + debt_2024) / 2\n        \n        # 计算2024年利息覆盖率\n        coverage_2024 = interest_2024 / avg_debt_balance\n        \n        # 计算2023年利息覆盖率\n        coverage_2023 = interest_2023 / debt_2023\n        \n        # 计算利息覆盖率的变化\n        coverage_change = coverage_2024 - coverage_2023\n        \n        # 判断风险条件：提高了3个百分点以上\n        return coverage_change > 0.03\n        \n    except (ValueError, TypeError, ZeroDivisionError):\n        # 处理数据类型转换错误、类型错误和除零错误\n        return False\n    except Exception as e:\n        # 处理其他可能的异常\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "以前少计、本年多计成本或费用",
    "risk_description": "本年企业利息费用占“短长期债务”平均余额的比例比上年提高了3个百分点以上。（模型公式编号：191101085）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据\n        interest_expense_2023 = None\n        interest_expense_2024 = None\n        debt_2023 = None\n        debt_2024 = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_name == '利息费用' and item_type == '企业':\n                interest_expense_2023_str = item.get('2023', '')\n                interest_expense_2024_str = item.get('2024', '')\n                \n                if interest_expense_2023_str:\n                    interest_expense_2023 = float(interest_expense_2023_str.replace(',', ''))\n                if interest_expense_2024_str:\n                    interest_expense_2024 = float(interest_expense_2024_str.replace(',', ''))\n            \n            elif item_name == '短长期债务' and item_type == '企业':\n                debt_2023_str = item.get('2023', '')\n                debt_2024_str = item.get('2024', '')\n                \n                if debt_2023_str:\n                    debt_2023 = float(debt_2023_str.replace(',', ''))\n                if debt_2024_str:\n                    debt_2024 = float(debt_2024_str.replace(',', ''))\n        \n        # 检查数据完整性\n        if None in [interest_expense_2023, interest_expense_2024, debt_2023, debt_2024]:\n            return False\n        \n        # 计算短长期债务平均余额（假设年初年末相同）\n        avg_debt_2023 = debt_2023\n        avg_debt_2024 = debt_2024\n        \n        # 计算利息费用占比\n        if avg_debt_2023 == 0 or avg_debt_2024 == 0:\n            return False\n            \n        interest_ratio_2023 = (interest_expense_2023 / avg_debt_2023) * 100\n        interest_ratio_2024 = (interest_expense_2024 / avg_debt_2024) * 100\n        \n        # 计算两年占比差值\n        ratio_diff = interest_ratio_2024 - interest_ratio_2023\n        \n        # 判断风险：本年占比比上年提高了3个百分点以上\n        if ratio_diff > 3:\n            return True\n        else:\n            return False\n            \n    except (ValueError, TypeError, ZeroDivisionError) as e:\n        return False\n    except Exception as e:\n        return False",
    "is_retry": true
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "投资收益或资产处置收益错报",
    "risk_description": "企业总资产周转率连续两年低于行业均值，“经营业务利润”连续两年为负，本年营业利润较上年增长。（模型公式编号：191101019）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 检查数据字典是否包含必要的字段\n        if 'model_items' not in data_dict:\n            return False\n        \n        model_items = data_dict['model_items']\n        \n        # 初始化所有需要的变量\n        company_tat_2023 = None\n        company_tat_2024 = None\n        industry_tat_2023 = None\n        industry_tat_2024 = None\n        company_operating_profit_2023 = None\n        company_operating_profit_2024 = None\n        company_profit_growth_2023 = None\n        company_profit_growth_2024 = None\n        \n        # 从model_items中提取所需数据\n        for item in model_items:\n            if item['项目名称'] == '总资产周转率':\n                if item['类型'] == '企业':\n                    company_tat_2023 = float(item['2023'].replace(',', '')) if item['2023'] else None\n                    company_tat_2024 = float(item['2024'].replace(',', '')) if item['2024'] else None\n                elif item['类型'] == '行业':\n                    industry_tat_2023 = float(item['2023'].replace(',', '')) if item['2023'] else None\n                    industry_tat_2024 = float(item['2024'].replace(',', '')) if item['2024'] else None\n            \n            elif item['项目名称'] == '经营业务利润':\n                if item['类型'] == '企业':\n                    company_operating_profit_2023 = float(item['2023'].replace(',', '')) if item['2023'] else None\n                    company_operating_profit_2024 = float(item['2024'].replace(',', '')) if item['2024'] else None\n            \n            elif item['项目名称'] == '营业利润增长率':\n                if item['类型'] == '企业':\n                    company_profit_growth_2023 = float(item['2023'].replace(',', '')) if item['2023'] else None\n                    company_profit_growth_2024 = float(item['2024'].replace(',', '')) if item['2024'] else None\n        \n        # 检查是否有任何必要数据缺失\n        if (company_tat_2023 is None or company_tat_2024 is None or \n            industry_tat_2023 is None or industry_tat_2024 is None or \n            company_operating_profit_2023 is None or company_operating_profit_2024 is None or \n            company_profit_growth_2023 is None or company_profit_growth_2024 is None):\n            return False\n        \n        # 验证风险条件\n        condition1 = company_tat_2023 < industry_tat_2023  # 企业总资产周转率(2023) < 行业总资产周转率(2023)\n        condition2 = company_tat_2024 < industry_tat_2024  # 企业总资产周转率(2024) < 行业总资产周转率(2024)\n        condition3 = company_operating_profit_2023 < 0     # 企业经营业务利润(2023) < 0\n        condition4 = company_operating_profit_2024 < 0     # 企业经营业务利润(2024) < 0\n        condition5 = company_profit_growth_2024 > company_profit_growth_2023  # 企业营业利润增长率(2024) > 企业营业利润增长率(2023)\n        \n        # 所有条件都满足时返回True，否则返回False\n        return condition1 and condition2 and condition3 and condition4 and condition5\n        \n    except (ValueError, TypeError, ZeroDivisionError) as e:\n        # 处理数据类型转换错误、类型错误和除零错误\n        return False\n    except Exception as e:\n        # 处理其他所有异常\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "重大资产重组",
    "risk_description": "本年企业资产总计增长超过50%，或营业收入增长超过50%，或所有者权益合计增长超过50%。（模型公式编号：191101108）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 检查数据是否足够\n        if not model_items or len(model_items) < 3:\n            return False\n        \n        # 定义需要检查的增长率指标\n        growth_indicators = ['资产总计增长率', '营业收入增长率', '所有者权益合计增长率']\n        \n        # 遍历所有项目数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            \n            # 只检查指定的增长率指标\n            if item_name in growth_indicators:\n                # 获取2024年的增长率数据\n                growth_rate_2024 = item.get('2024', '')\n                \n                # 检查数据是否存在且有效\n                if growth_rate_2024 == '' or growth_rate_2024 is None:\n                    continue\n                \n                # 转换为浮点数\n                growth_rate = float(growth_rate_2024)\n                \n                # 检查增长率是否超过50%\n                if growth_rate > 50.0:\n                    return True\n        \n        # 所有指标都未超过50%，返回无风险\n        return False\n        \n    except (ValueError, TypeError) as e:\n        # 处理数据类型转换错误\n        return False\n    except ZeroDivisionError as e:\n        # 处理除零错误\n        return False\n    except Exception as e:\n        # 处理其他所有异常\n        return False"
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "本年企业“每元固定资产提供的营业收入”超过上年的1.2倍，固定资产减少不到10%，营业收入增长超过20%。（模型公式编号：191101080）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        revenue_per_fixed_asset_2023 = None\n        revenue_per_fixed_asset_2024 = None\n        fixed_asset_growth_2024 = None\n        revenue_growth_2024 = None\n        \n        # 提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_name == '每元固定资产及使用权资产提供的营业收入' and item_type == '企业':\n                revenue_per_fixed_asset_2023 = item.get('2023')\n                revenue_per_fixed_asset_2024 = item.get('2024')\n            \n            elif item_name == '固定资产及使用权资产增长率' and item_type == '企业':\n                fixed_asset_growth_2024 = item.get('2024')\n            \n            elif item_name == '营业收入增长率' and item_type == '企业':\n                revenue_growth_2024 = item.get('2024')\n        \n        # 检查数据完整性\n        if (revenue_per_fixed_asset_2023 is None or revenue_per_fixed_asset_2024 is None or \n            fixed_asset_growth_2024 is None or revenue_growth_2024 is None):\n            return False\n        \n        # 数据类型转换\n        revenue_per_fixed_asset_2023 = float(revenue_per_fixed_asset_2023)\n        revenue_per_fixed_asset_2024 = float(revenue_per_fixed_asset_2024)\n        fixed_asset_growth_2024 = float(fixed_asset_growth_2024)\n        revenue_growth_2024 = float(revenue_growth_2024)\n        \n        # 验证风险条件\n        condition1 = revenue_per_fixed_asset_2024 > revenue_per_fixed_asset_2023 * 1.2\n        condition2 = fixed_asset_growth_2024 > -10  # 固定资产减少不到10%意味着增长率大于-10%\n        condition3 = revenue_growth_2024 > 20\n        \n        # 所有条件都满足时返回True（存在风险）\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, ZeroDivisionError) as e:\n        # 处理数据类型转换错误或其他预期异常\n        return False\n    except Exception as e:\n        # 处理其他未预期异常\n        return False"
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业应收账款周转率降低，存货周转率提高，营业收入增长超过20%。（模型公式编号：191101035）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        ar_turnover_2023 = None\n        ar_turnover_2024 = None\n        inventory_turnover_2023 = None\n        inventory_turnover_2024 = None\n        revenue_growth_2023 = None\n        revenue_growth_2024 = None\n        \n        # 遍历model_items提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            # 只处理企业类型的数据\n            if item_type != '企业':\n                continue\n                \n            if '应收票据、应收账款、应收款项融资及合同资产周转率' in item_name:\n                ar_turnover_2023 = float(item.get('2023', 0))\n                ar_turnover_2024 = float(item.get('2024', 0))\n            elif '存货周转率' in item_name:\n                inventory_turnover_2023 = float(item.get('2023', 0))\n                inventory_turnover_2024 = float(item.get('2024', 0))\n            elif '营业收入增长率' in item_name:\n                revenue_growth_2023 = float(item.get('2023', 0))\n                revenue_growth_2024 = float(item.get('2024', 0))\n        \n        # 检查所有必需数据是否都存在\n        if (ar_turnover_2023 is None or ar_turnover_2024 is None or \n            inventory_turnover_2023 is None or inventory_turnover_2024 is None or \n            revenue_growth_2023 is None or revenue_growth_2024 is None):\n            return False\n        \n        # 验证风险条件\n        condition1 = ar_turnover_2024 < ar_turnover_2023  # 应收账款周转率本年值 < 上年值\n        condition2 = inventory_turnover_2024 > inventory_turnover_2023  # 存货周转率本年值 > 上年值\n        condition3 = revenue_growth_2024 > 20.0  # 营业收入增长率本年值 > 20%\n        \n        # 所有条件都满足时返回True（存在风险）\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, ZeroDivisionError) as e:\n        # 处理数据类型转换错误、类型错误和除零错误\n        return False\n    except Exception as e:\n        # 处理其他可能的异常\n        return False"
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "少结转主营业务成本",
    "risk_description": "本年企业销售毛利增长率比营业收入增长率高10个百分点以上，存货增长超过15%。（模型公式编号：191101044）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items列表\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        sales_profit_growth = None\n        revenue_growth = None\n        inventory_growth = None\n        \n        # 遍历model_items查找所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', '')\n            \n            # 只处理企业类型的数据\n            if item_type != '企业':\n                continue\n                \n            # 尝试将2024年数据转换为浮点数\n            try:\n                numeric_value = float(value_2024)\n            except (ValueError, TypeError):\n                continue\n            \n            # 根据项目名称匹配对应的增长率\n            if item_name == '销售毛利增长率':\n                sales_profit_growth = numeric_value\n            elif item_name == '营业收入增长率':\n                revenue_growth = numeric_value\n            elif item_name == '存货增长率':\n                inventory_growth = numeric_value\n        \n        # 检查所有必需数据是否都存在\n        if sales_profit_growth is None or revenue_growth is None or inventory_growth is None:\n            return False\n        \n        # 验证风险条件\n        # 条件1: 销售毛利增长率比营业收入增长率高10个百分点以上\n        condition1 = (sales_profit_growth - revenue_growth) > 10\n        \n        # 条件2: 存货增长率超过15%\n        condition2 = inventory_growth > 15\n        \n        # 两个条件都满足时返回True（存在风险）\n        return condition1 and condition2\n        \n    except Exception as e:\n        # 捕获所有其他异常，确保函数不会崩溃\n        return False"
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "货币资金错报",
    "risk_description": "本年企业货币资金超过“短长期债务”的5倍，股本无变动或增长不到1%，资本公积无变动或增长不到5%。（模型公式编号：191101103）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化变量\n        monetary_fund_2024 = None\n        short_long_debt_2024 = None\n        equity_growth_rate = None\n        capital_reserve_growth_rate = None\n        \n        # 提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称')\n            item_type = item.get('类型')\n            value_2024 = item.get('2024')\n            \n            # 只处理企业类型的数据\n            if item_type != '企业':\n                continue\n                \n            if item_name == '货币资金':\n                try:\n                    monetary_fund_2024 = float(str(value_2024).replace(',', ''))\n                except (ValueError, TypeError):\n                    return False\n                    \n            elif item_name == '短长期债务':\n                try:\n                    short_long_debt_2024 = float(str(value_2024).replace(',', ''))\n                except (ValueError, TypeError):\n                    return False\n                    \n            elif item_name == '股本增长率':\n                try:\n                    equity_growth_rate = float(str(value_2024).replace('%', '')) / 100\n                except (ValueError, TypeError):\n                    return False\n                    \n            elif item_name == '资本公积增长率':\n                try:\n                    capital_reserve_growth_rate = float(str(value_2024).replace('%', '')) / 100\n                except (ValueError, TypeError):\n                    return False\n        \n        # 检查数据是否完整\n        if (monetary_fund_2024 is None or short_long_debt_2024 is None or \n            equity_growth_rate is None or capital_reserve_growth_rate is None):\n            return False\n        \n        # 检查除零错误\n        if short_long_debt_2024 == 0:\n            return False\n        \n        # 验证风险条件\n        condition1 = monetary_fund_2024 > short_long_debt_2024 * 5\n        condition2 = equity_growth_rate <= 0.01\n        condition3 = capital_reserve_growth_rate <= 0.05\n        \n        return condition1 and condition2 and condition3\n        \n    except Exception as e:\n        return False"
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "货币资金错报",
    "risk_description": "本年企业货币资金超过“短长期债务”的5倍，股本无变动或增长不到1%，资本公积无变动或增长不到5%。（模型公式编号：191101103）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化变量\n        monetary_fund_2024 = None\n        debt_2024 = None\n        equity_growth_rate = None\n        capital_reserve_growth_rate = None\n        \n        # 提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', '')\n            \n            # 只处理企业类型的数据\n            if item_type != '企业':\n                continue\n                \n            # 转换数值\n            try:\n                if item_name == '货币资金':\n                    monetary_fund_2024 = float(str(value_2024).replace(',', '')) if value_2024 else None\n                elif item_name == '短长期债务':\n                    debt_2024 = float(str(value_2024).replace(',', '')) if value_2024 else None\n                elif item_name == '股本增长率':\n                    equity_growth_rate = float(str(value_2024).replace(',', '')) if value_2024 else None\n                elif item_name == '资本公积增长率':\n                    capital_reserve_growth_rate = float(str(value_2024).replace(',', '')) if value_2024 else None\n            except (ValueError, TypeError):\n                continue\n        \n        # 检查数据完整性\n        if any(x is None for x in [monetary_fund_2024, debt_2024, equity_growth_rate, capital_reserve_growth_rate]):\n            return False\n        \n        # 验证风险条件\n        condition1 = monetary_fund_2024 > debt_2024 * 5\n        condition2 = equity_growth_rate <= 1.0\n        condition3 = capital_reserve_growth_rate <= 5.0\n        \n        return condition1 and condition2 and condition3\n        \n    except Exception as e:\n        return False",
    "is_retry": true
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "违规资金收付",
    "risk_description": "本年企业收到的其他与经营活动有关的现金占经营活动现金流入小计的比重高于行业总体样本中85%的企业。（模型公式编号：191101075）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取企业数据和行业数据\n        enterprise_data = None\n        industry_threshold = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            # 获取企业数据\n            if item_type == '企业' and '收到其他与经营活动有关的现金占经营活动现金流入小计比' in item_name:\n                enterprise_value_2024 = item.get('2024')\n                if enterprise_value_2024 is not None:\n                    enterprise_data = float(enterprise_value_2024)\n            \n            # 获取行业85%分位数阈值\n            elif item_type == '行业' and '行业85%分位数阈值' in item_name:\n                industry_value = item.get('2024')\n                if industry_value is not None:\n                    industry_threshold = float(industry_value)\n        \n        # 检查数据是否完整\n        if enterprise_data is None or industry_threshold is None:\n            return False\n        \n        # 验证风险条件：企业比例高于行业85%分位数阈值\n        return enterprise_data > industry_threshold\n        \n    except (ValueError, TypeError) as e:\n        # 处理数据类型转换错误\n        return False\n    except ZeroDivisionError as e:\n        # 处理除零错误\n        return False\n    except Exception as e:\n        # 处理其他异常\n        return False"
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "违规资金收付",
    "risk_description": "本年企业收到的其他与经营活动有关的现金占经营活动现金流入小计的比重高于行业总体样本中85%的企业。（模型公式编号：191101075）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        if 'model_items' not in data_dict:\n            return False\n            \n        model_items = data_dict['model_items']\n        if not isinstance(model_items, list) or len(model_items) == 0:\n            return False\n        \n        # 初始化变量\n        enterprise_ratio = None\n        industry_percentile = None\n        \n        # 遍历所有项目数据\n        for item in model_items:\n            if not isinstance(item, dict):\n                continue\n                \n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', '')\n            \n            # 跳过无效数据\n            if not item_name or not item_type or not value_2024:\n                continue\n            \n            # 尝试转换数据类型\n            try:\n                numeric_value = float(value_2024)\n            except (ValueError, TypeError):\n                continue\n            \n            # 获取企业比率值\n            if (item_name == '收到其他与经营活动有关的现金占经营活动现金流入小计比(%)' and \n                item_type == '企业'):\n                enterprise_ratio = numeric_value\n            \n            # 获取行业85分位数值（直接使用行业类型的数据点）\n            if (item_name == '收到其他与经营活动有关的现金占经营活动现金流入小计比(%)' and \n                item_type == '行业'):\n                industry_percentile = numeric_value\n        \n        # 检查数据是否完整\n        if enterprise_ratio is None or industry_percentile is None:\n            return False\n        \n        # 验证风险条件：企业比率 > 行业85分位数值\n        risk_exists = enterprise_ratio > industry_percentile\n        \n        return bool(risk_exists)\n        \n    except Exception as e:\n        # 捕获所有其他异常情况\n        return False",
    "is_retry": true
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "少计成本或费用",
    "risk_description": "本年企业营业收入增长超过20%，“经营业务利润”增长率比营业收入增长率高30个百分点以上。（模型公式编号：191101010）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据\n        revenue_growth = None\n        profit_growth = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', '')\n            \n            if item_name == '营业收入增长率' and item_type == '企业':\n                revenue_growth = float(value_2024)\n            elif item_name == '经营业务利润增长率' and item_type == '企业':\n                profit_growth = float(value_2024)\n        \n        # 检查数据是否完整\n        if revenue_growth is None or profit_growth is None:\n            return False\n        \n        # 验证风险条件\n        condition1 = revenue_growth > 20.0\n        condition2 = (profit_growth - revenue_growth) > 30.0\n        \n        return condition1 and condition2\n        \n    except (ValueError, TypeError):\n        # 处理数据类型转换错误\n        return False\n    except ZeroDivisionError:\n        # 处理除零错误\n        return False\n    except Exception as e:\n        # 处理其他异常\n        return False"
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "少计成本或费用",
    "risk_description": "企业总资产周转率连续两年不到行业均值的90%，本年毛利率超过行业均值的1.1倍，本年营业利润为正，且较上年增长。（模型公式编号：191101051）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        if 'model_items' not in data_dict:\n            return False\n            \n        model_items = data_dict['model_items']\n        \n        # 提取企业数据和行业数据\n        enterprise_data = {}\n        industry_data = {}\n        \n        for item in model_items:\n            item_name = item.get('项目名称')\n            item_type = item.get('类型')\n            \n            if not item_name or not item_type:\n                continue\n                \n            if item_type == '企业':\n                enterprise_data[item_name] = item\n            elif item_type == '行业':\n                industry_data[item_name] = item\n        \n        # 检查所需数据是否存在\n        required_enterprise_items = ['总资产周转率', '销售毛利率', '营业利润', '营业利润增长率']\n        required_industry_items = ['总资产周转率', '销售毛利率']\n        \n        for item in required_enterprise_items:\n            if item not in enterprise_data:\n                return False\n                \n        for item in required_industry_items:\n            if item not in industry_data:\n                return False\n        \n        # 提取具体数值并进行类型转换\n        # 企业总资产周转率2023\n        ent_tat_2023_str = enterprise_data['总资产周转率'].get('2023', '0')\n        ent_tat_2023 = float(ent_tat_2023_str.replace(',', '')) if ent_tat_2023_str else 0.0\n        \n        # 企业总资产周转率2024\n        ent_tat_2024_str = enterprise_data['总资产周转率'].get('2024', '0')\n        ent_tat_2024 = float(ent_tat_2024_str.replace(',', '')) if ent_tat_2024_str else 0.0\n        \n        # 行业总资产周转率2023\n        ind_tat_2023_str = industry_data['总资产周转率'].get('2023', '0')\n        ind_tat_2023 = float(ind_tat_2023_str.replace(',', '')) if ind_tat_2023_str else 0.0\n        \n        # 行业总资产周转率2024\n        ind_tat_2024_str = industry_data['总资产周转率'].get('2024', '0')\n        ind_tat_2024 = float(ind_tat_2024_str.replace(',', '')) if ind_tat_2024_str else 0.0\n        \n        # 企业销售毛利率2024\n        ent_gpm_2024_str = enterprise_data['销售毛利率'].get('2024', '0')\n        ent_gpm_2024 = float(ent_gpm_2024_str.replace(',', '')) if ent_gpm_2024_str else 0.0\n        \n        # 行业销售毛利率2024\n        ind_gpm_2024_str = industry_data['销售毛利率'].get('2024', '0')\n        ind_gpm_2024 = float(ind_gpm_2024_str.replace(',', '')) if ind_gpm_2024_str else 0.0\n        \n        # 企业营业利润2024\n        ent_op_2024_str = enterprise_data['营业利润'].get('2024', '0')\n        ent_op_2024 = float(ent_op_2024_str.replace(',', '')) if ent_op_2024_str else 0.0\n        \n        # 企业营业利润增长率2024\n        ent_op_growth_2024_str = enterprise_data['营业利润增长率'].get('2024', '0')\n        ent_op_growth_2024 = float(ent_op_growth_2024_str.replace(',', '')) if ent_op_growth_2024_str else 0.0\n        \n        # 验证条件判断\n        condition1 = ent_tat_2023 < ind_tat_2023 * 0.9  # 企业总资产周转率(2023) < 行业总资产周转率(2023) × 0.9\n        condition2 = ent_tat_2024 < ind_tat_2024 * 0.9  # 企业总资产周转率(2024) < 行业总资产周转率(2024) × 0.9\n        condition3 = ent_gpm_2024 > ind_gpm_2024 * 1.1  # 企业销售毛利率(2024) > 行业销售毛利率(2024) × 1.1\n        condition4 = ent_op_2024 > 0  # 企业营业利润(2024) > 0\n        condition5 = ent_op_growth_2024 > 0  # 企业营业利润增长率(2024) > 0\n        \n        # 所有条件都满足时返回True，否则返回False\n        return condition1 and condition2 and condition3 and condition4 and condition5\n        \n    except (ValueError, TypeError, ZeroDivisionError, KeyError, AttributeError) as e:\n        # 处理可能的异常情况\n        return False\n    except Exception as e:\n        # 处理其他未知异常\n        return False"
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "与关联方易货交易",
    "risk_description": "本年企业销售商品、提供劳务收到的现金不到营业收入的80%，应付票据及应付账款减少，或增长不到10%。（模型公式编号：191101022）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 检查数据字典是否包含必要的字段\n        if 'model_items' not in data_dict:\n            return False\n            \n        model_items = data_dict['model_items']\n        \n        # 提取所需数据\n        revenue_2024 = None\n        cash_received_2024 = None\n        payables_growth_2024 = None\n        \n        for item in model_items:\n            if item['项目名称'] == '营业收入' and item['类型'] == '企业':\n                revenue_2024 = float(item['2024'].replace(',', '')) if item['2024'] else None\n            elif item['项目名称'] == '销售商品、提供劳务收到的现金' and item['类型'] == '企业':\n                cash_received_2024 = float(item['2024'].replace(',', '')) if item['2024'] else None\n            elif item['项目名称'] == '应付票据及应付账款增长率' and item['类型'] == '企业':\n                payables_growth_2024 = float(item['2024']) if item['2024'] else None\n        \n        # 检查数据是否完整\n        if revenue_2024 is None or cash_received_2024 is None or payables_growth_2024 is None:\n            return False\n        \n        # 计算现金收入占营业收入的比例\n        cash_ratio = cash_received_2024 / revenue_2024\n        \n        # 判断风险条件\n        condition1 = cash_ratio < 0.8  # 现金收入不到营业收入的80%\n        condition2 = payables_growth_2024 < 10  # 应付票据及应付账款增长率不到10%\n        \n        # 满足任一条件即存在风险\n        return condition1 or condition2\n        \n    except (ValueError, TypeError, ZeroDivisionError) as e:\n        # 处理数据类型转换错误、类型错误和除零错误\n        return False\n    except Exception as e:\n        # 处理其他可能的异常\n        return False"
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "与关联方易货交易",
    "risk_description": "企业销售商品、提供劳务收到的现金连续两年不到含税营业收入的80%，本年应付票据及应付账款减少，或增长不到10%。（模型公式编号：191101024）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据\n        cash_received_2023 = None\n        cash_received_2024 = None\n        revenue_2023 = None\n        revenue_2024 = None\n        payable_growth_2024 = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2023 = item.get('2023', '')\n            value_2024 = item.get('2024', '')\n            \n            if item_name == '销售商品、提供劳务收到的现金' and item_type == '企业':\n                cash_received_2023 = float(value_2023.replace(',', '')) if value_2023 else None\n                cash_received_2024 = float(value_2024.replace(',', '')) if value_2024 else None\n            \n            elif item_name == '营业收入' and item_type == '企业':\n                revenue_2023 = float(value_2023.replace(',', '')) if value_2023 else None\n                revenue_2024 = float(value_2024.replace(',', '')) if value_2024 else None\n            \n            elif item_name == '应付票据及应付账款增长率' and item_type == '企业':\n                payable_growth_2024 = float(value_2024) if value_2024 else None\n        \n        # 检查数据完整性\n        if None in [cash_received_2023, cash_received_2024, revenue_2023, revenue_2024, payable_growth_2024]:\n            return False\n        \n        # 增值税税率（假设为13%）\n        tax_rate = 0.13\n        \n        # 计算含税营业收入\n        taxable_revenue_2023 = revenue_2023 * (1 + tax_rate)\n        taxable_revenue_2024 = revenue_2024 * (1 + tax_rate)\n        \n        # 计算现金收入占含税收入比例\n        cash_ratio_2023 = cash_received_2023 / taxable_revenue_2023\n        cash_ratio_2024 = cash_received_2024 / taxable_revenue_2024\n        \n        # 检查条件1：连续两年现金收入比例小于80%\n        condition1 = cash_ratio_2023 < 0.8 and cash_ratio_2024 < 0.8\n        \n        # 检查条件2：应付票据及应付账款减少或增长不到10%\n        condition2 = payable_growth_2024 < 0 or payable_growth_2024 < 10\n        \n        # 两个条件都满足时存在风险\n        return condition1 and condition2\n        \n    except (ValueError, TypeError, ZeroDivisionError) as e:\n        # 处理数据类型转换错误、类型错误和除零错误\n        return False\n    except Exception as e:\n        # 处理其他可能的异常\n        return False"
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "信用或资产减值损失错报",
    "risk_description": "本年企业资产减值损失为负值，上年为正值；或本年为正值，上年为负值。（注：由于利润表格式的变化，请自行确认该值系统取数正负号是否正确。）（模型公式编号：210601008）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取资产减值损失数据\n        asset_impairment_data = None\n        for item in model_items:\n            if item.get('项目名称') == '资产减值损失' and item.get('类型') == '企业':\n                asset_impairment_data = item\n                break\n        \n        if not asset_impairment_data:\n            return False\n        \n        # 提取2023年和2024年数据\n        previous_year_str = asset_impairment_data.get('2023')\n        current_year_str = asset_impairment_data.get('2024')\n        \n        if not previous_year_str or not current_year_str:\n            return False\n        \n        # 转换字符串为浮点数（处理千分位分隔符）\n        previous_year = float(previous_year_str.replace(',', ''))\n        current_year = float(current_year_str.replace(',', ''))\n        \n        # 检查符号变化风险\n        if (current_year < 0 and previous_year > 0) or (current_year > 0 and previous_year < 0):\n            return True\n        else:\n            return False\n            \n    except (ValueError, TypeError, AttributeError, KeyError) as e:\n        # 处理数据类型转换错误、属性错误、键错误等异常\n        return False\n    except ZeroDivisionError:\n        # 处理除零错误（虽然本公式不涉及除法，但保留以防万一）\n        return False\n    except Exception as e:\n        # 处理其他所有异常\n        return False"
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "信用或资产减值损失错报",
    "risk_description": "本年企业存货增长超过10%，存货周转率较上年提高，本年存货周转率高于行业总体样本中85%的企业。（模型公式编号：191101048）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据\n        inventory_growth_rate_enterprise = None\n        inventory_turnover_enterprise_2023 = None\n        inventory_turnover_enterprise_2024 = None\n        inventory_turnover_industry_2024 = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_name == '存货增长率' and item_type == '企业':\n                inventory_growth_rate_enterprise = item.get('2024', '')\n            \n            elif item_name == '存货周转率【次】':\n                if item_type == '企业':\n                    inventory_turnover_enterprise_2023 = item.get('2023', '')\n                    inventory_turnover_enterprise_2024 = item.get('2024', '')\n                elif item_type == '行业':\n                    inventory_turnover_industry_2024 = item.get('2024', '')\n        \n        # 检查数据是否完整\n        if (inventory_growth_rate_enterprise is None or \n            inventory_turnover_enterprise_2023 is None or \n            inventory_turnover_enterprise_2024 is None or \n            inventory_turnover_industry_2024 is None):\n            return False\n        \n        # 数据类型转换\n        growth_rate = float(inventory_growth_rate_enterprise)\n        turnover_2023 = float(inventory_turnover_enterprise_2023)\n        turnover_2024 = float(inventory_turnover_enterprise_2024)\n        industry_turnover = float(inventory_turnover_industry_2024)\n        \n        # 验证三个条件\n        condition1 = growth_rate > 10  # 本年存货增长率 > 10%\n        condition2 = turnover_2024 > turnover_2023  # 本年存货周转率 > 上年存货周转率\n        condition3 = turnover_2024 > industry_turnover  # 本年存货周转率 > 行业85分位数存货周转率\n        \n        # 所有条件都满足时返回True\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError):\n        # 处理数据类型转换错误\n        return False\n    except ZeroDivisionError:\n        # 处理除零错误\n        return False\n    except Exception as e:\n        # 处理其他异常\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "持续经营假设不合理",
    "risk_description": "企业经营活动产生的现金流量净额连续两年为负，本年营业利润较上年增长。（模型公式编号：191101053）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 检查数据字典是否包含必要的字段\n        if 'model_items' not in data_dict:\n            return False\n        \n        model_items = data_dict['model_items']\n        \n        # 提取所需数据\n        cash_flow_2023 = None\n        cash_flow_2024 = None\n        profit_growth_2024 = None\n        \n        for item in model_items:\n            if item['项目名称'] == '经营活动产生的现金流量净额' and item['类型'] == '企业':\n                # 转换现金流量数据（去除逗号并转换为浮点数）\n                cash_flow_2023 = float(item['2023'].replace(',', '')) if '2023' in item and item['2023'] else None\n                cash_flow_2024 = float(item['2024'].replace(',', '')) if '2024' in item and item['2024'] else None\n            \n            elif item['项目名称'] == '营业利润增长率' and item['类型'] == '企业':\n                # 转换增长率数据\n                profit_growth_2024 = float(item['2024']) if '2024' in item and item['2024'] else None\n        \n        # 检查数据是否完整\n        if cash_flow_2023 is None or cash_flow_2024 is None or profit_growth_2024 is None:\n            return False\n        \n        # 验证风险条件\n        # 条件1：经营活动产生的现金流量净额连续两年为负\n        cash_flow_negative = cash_flow_2023 < 0 and cash_flow_2024 < 0\n        \n        # 条件2：本年营业利润较上年增长（增长率为正）\n        profit_growing = profit_growth_2024 > 0\n        \n        # 两个条件同时满足时存在风险\n        return cash_flow_negative and profit_growing\n        \n    except (ValueError, TypeError, ZeroDivisionError) as e:\n        # 处理数据类型转换错误或其他异常\n        return False\n    except Exception as e:\n        # 处理其他未预期的异常\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "与供应商存在潜在关联关系",
    "risk_description": "本年企业不含税应付票据及应付账款超过存货，在建工程减少或增长不到10%，且应付票据及应付账款占总资产比重超过行业均值。（模型公式编号：191101101）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 检查数据字典是否包含必要的model_items字段\n        if 'model_items' not in data_dict:\n            return False\n        \n        model_items = data_dict['model_items']\n        \n        # 初始化所有需要的变量\n        enterprise_accounts_payable_2024 = None\n        enterprise_inventory_2024 = None\n        enterprise_construction_growth_rate_2024 = None\n        enterprise_accounts_payable_ratio_2024 = None\n        industry_accounts_payable_ratio_2024 = None\n        \n        # 从model_items中提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', '')\n            \n            # 跳过空值\n            if not value_2024:\n                continue\n                \n            # 提取企业应付票据及应付账款（2024年）\n            if item_name == '应付票据及应付账款' and item_type == '企业':\n                try:\n                    enterprise_accounts_payable_2024 = float(str(value_2024).replace(',', ''))\n                except (ValueError, TypeError):\n                    pass\n            \n            # 提取企业存货（2024年）\n            elif item_name == '存货' and item_type == '企业':\n                try:\n                    enterprise_inventory_2024 = float(str(value_2024).replace(',', ''))\n                except (ValueError, TypeError):\n                    pass\n            \n            # 提取企业在建工程增长率（2024年）\n            elif item_name == '在建工程增长率' and item_type == '企业':\n                try:\n                    enterprise_construction_growth_rate_2024 = float(str(value_2024).replace(',', ''))\n                except (ValueError, TypeError):\n                    pass\n            \n            # 提取企业应付票据及应付账款占总资产比重（2024年）\n            elif item_name == '应付票据及应付账款占负债和所有者权益总计比' and item_type == '企业':\n                try:\n                    enterprise_accounts_payable_ratio_2024 = float(str(value_2024).replace(',', ''))\n                except (ValueError, TypeError):\n                    pass\n            \n            # 提取行业应付票据及应付账款占总资产比重均值（2024年）\n            elif item_name == '应付票据及应付账款占负债和所有者权益总计比' and item_type == '行业':\n                try:\n                    industry_accounts_payable_ratio_2024 = float(str(value_2024).replace(',', ''))\n                except (ValueError, TypeError):\n                    pass\n        \n        # 检查所有必要数据是否都存在\n        if (enterprise_accounts_payable_2024 is None or \n            enterprise_inventory_2024 is None or \n            enterprise_construction_growth_rate_2024 is None or \n            enterprise_accounts_payable_ratio_2024 is None or \n            industry_accounts_payable_ratio_2024 is None):\n            return False\n        \n        # 验证第一个条件：本年企业不含税应付票据及应付账款 > 存货\n        condition1 = enterprise_accounts_payable_2024 > enterprise_inventory_2024\n        \n        # 验证第二个条件：在建工程增长率 < 10% 或 在建工程减少\n        condition2 = enterprise_construction_growth_rate_2024 < 10\n        \n        # 验证第三个条件：企业应付票据及应付账款占总资产比重 > 行业均值\n        condition3 = enterprise_accounts_payable_ratio_2024 > industry_accounts_payable_ratio_2024\n        \n        # 所有条件都满足时返回True（存在风险）\n        return condition1 and condition2 and condition3\n        \n    except Exception as e:\n        # 捕获任何未预期的异常，返回False\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "与供应商存在潜在关联关系",
    "risk_description": "本年企业应付账款占存货的比例高于行业总体样本中85%的企业。（模型公式编号：210601021）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化变量\n        enterprise_ratio_2024 = None\n        industry_ratio_2024 = None\n        \n        # 遍历所有项目数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', '')\n            \n            # 跳过空值\n            if not value_2024:\n                continue\n                \n            # 处理应付账款占存货的比例\n            if item_name == '应付账款占存货的比例':\n                try:\n                    if item_type == '企业':\n                        enterprise_ratio_2024 = float(value_2024)\n                    elif item_type == '行业':\n                        industry_ratio_2024 = float(value_2024)\n                except (ValueError, TypeError):\n                    continue\n        \n        # 检查必要数据是否存在\n        if enterprise_ratio_2024 is None or industry_ratio_2024 is None:\n            return False\n        \n        # 验证风险条件：企业本年应付账款占存货的比例高于行业值\n        return enterprise_ratio_2024 > industry_ratio_2024\n        \n    except Exception as e:\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "货币资金错报",
    "risk_description": "本年企业货币资金超过5000万元，货币资金占资产总计的比重超过行业均值，利息收入占本年货币资金平均余额的比例不到1%。（模型公式编号：191101073）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items列表\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        enterprise_cash_2024 = None\n        enterprise_interest_2024 = None\n        enterprise_cash_ratio_2024 = None\n        industry_cash_ratio_2024 = None\n        enterprise_cash_2023 = None\n        \n        # 遍历model_items提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', '')\n            \n            # 转换2024年数据为数值类型\n            if value_2024 and isinstance(value_2024, str):\n                value_2024 = float(value_2024.replace(',', ''))\n            \n            if item_name == '货币资金' and item_type == '企业':\n                enterprise_cash_2024 = value_2024\n                # 同时获取2023年数据用于计算平均余额\n                value_2023 = item.get('2023', '')\n                if value_2023 and isinstance(value_2023, str):\n                    enterprise_cash_2023 = float(value_2023.replace(',', ''))\n            \n            elif item_name == '利息收入' and item_type == '企业':\n                enterprise_interest_2024 = value_2024\n            \n            elif item_name == '货币资金占资产总计比(%)' and item_type == '企业':\n                enterprise_cash_ratio_2024 = value_2024\n            \n            elif item_name == '货币资金占资产总计比(%)' and item_type == '行业':\n                industry_cash_ratio_2024 = value_2024\n        \n        # 检查所有必需数据是否都存在\n        if (enterprise_cash_2024 is None or enterprise_interest_2024 is None or \n            enterprise_cash_ratio_2024 is None or industry_cash_ratio_2024 is None or \n            enterprise_cash_2023 is None):\n            return False\n        \n        # 条件1: 本年企业货币资金 > 5000万元 (50000000元)\n        condition1 = enterprise_cash_2024 > 50000000\n        \n        # 条件2: 企业货币资金占资产总计比 > 行业均值\n        condition2 = enterprise_cash_ratio_2024 > industry_cash_ratio_2024\n        \n        # 条件3: 利息收入 / 货币资金平均余额 < 1%\n        # 计算货币资金平均余额 = (年初余额 + 年末余额) / 2\n        avg_cash_balance = (enterprise_cash_2023 + enterprise_cash_2024) / 2\n        if avg_cash_balance == 0:\n            return False\n        \n        interest_ratio = enterprise_interest_2024 / avg_cash_balance\n        condition3 = interest_ratio < 0.01\n        \n        # 所有条件都满足时返回True（存在风险）\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, ZeroDivisionError) as e:\n        # 处理数据类型转换错误、类型错误和除零错误\n        return False\n    except Exception as e:\n        # 处理其他可能的异常\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "货币资金错报",
    "risk_description": "本年企业货币资金超过5000万元，货币资金占资产总计的比重超过行业均值，利息收入占本年货币资金平均余额的比例不到1%。（模型公式编号：191101073）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 检查数据字典是否包含必要的字段\n        if 'model_items' not in data_dict:\n            return False\n        \n        model_items = data_dict['model_items']\n        \n        # 初始化所需变量\n        enterprise_cash_2024 = None\n        enterprise_cash_ratio_2024 = None\n        enterprise_interest_income_2024 = None\n        enterprise_cash_2023 = None\n        industry_cash_ratio_2024 = None\n        \n        # 从model_items中提取所需数据\n        for item in model_items:\n            if item['项目名称'] == '货币资金' and item['类型'] == '企业':\n                enterprise_cash_2024 = float(item['2024'].replace(',', '')) if '2024' in item else None\n                enterprise_cash_2023 = float(item['2023'].replace(',', '')) if '2023' in item else None\n            elif item['项目名称'] == '货币资金占资产总计比(%)' and item['类型'] == '企业':\n                enterprise_cash_ratio_2024 = float(item['2024']) if '2024' in item else None\n            elif item['项目名称'] == '利息收入' and item['类型'] == '企业':\n                enterprise_interest_income_2024 = float(item['2024'].replace(',', '')) if '2024' in item else None\n            elif item['项目名称'] == '货币资金占资产总计比(%)' and item['类型'] == '行业':\n                industry_cash_ratio_2024 = float(item['2024']) if '2024' in item else None\n        \n        # 检查是否有任何必要数据缺失\n        if any(x is None for x in [enterprise_cash_2024, enterprise_cash_ratio_2024, \n                                  enterprise_interest_income_2024, enterprise_cash_2023, \n                                  industry_cash_ratio_2024]):\n            return False\n        \n        # 条件1：本年企业货币资金超过5000万元\n        condition1 = enterprise_cash_2024 > 50000000\n        \n        # 条件2：货币资金占资产总计的比重超过行业均值\n        condition2 = enterprise_cash_ratio_2024 > industry_cash_ratio_2024\n        \n        # 条件3：利息收入占本年货币资金平均余额的比例不到1%\n        # 计算货币资金平均余额\n        avg_cash_balance = (enterprise_cash_2023 + enterprise_cash_2024) / 2\n        interest_ratio = (enterprise_interest_income_2024 / avg_cash_balance) * 100 if avg_cash_balance != 0 else float('inf')\n        condition3 = interest_ratio < 1\n        \n        # 所有条件同时满足时返回True（存在风险）\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, ZeroDivisionError) as e:\n        # 处理数据类型转换错误、类型错误和除零错误\n        return False\n    except Exception as e:\n        # 处理其他可能的异常\n        return False",
    "is_retry": true
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "违规资金收付",
    "risk_description": "本年企业收到的其他与经营活动有关的现金占经营活动现金流入小计的比重高于行业总体样本中85%的企业。（模型公式编号：191101075）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取企业和行业数据\n        enterprise_value = None\n        industry_p85_value = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', None)\n            \n            if item_name == '收到其他与经营活动有关的现金占经营活动现金流入小计比(%)':\n                if item_type == '企业' and value_2024 is not None:\n                    try:\n                        enterprise_value = float(value_2024)\n                    except (ValueError, TypeError):\n                        pass\n                elif item_type == '行业' and value_2024 is not None:\n                    try:\n                        industry_p85_value = float(value_2024)\n                    except (ValueError, TypeError):\n                        pass\n        \n        # 检查数据是否完整\n        if enterprise_value is None or industry_p85_value is None:\n            return False\n        \n        # 验证风险条件：企业值高于行业85分位值\n        return enterprise_value > industry_p85_value\n        \n    except Exception as e:\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "违规资金收付",
    "risk_description": "本年企业收到的其他与经营活动有关的现金占经营活动现金流入小计的比重高于行业总体样本中85%的企业。（模型公式编号：191101075）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取企业数据和行业数据\n        enterprise_data = None\n        industry_data = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', '')\n            \n            if item_type == '企业' and '收到其他与经营活动有关的现金占经营活动现金流入小计比' in item_name:\n                # 提取企业2024年数据\n                if value_2024:\n                    enterprise_data = float(value_2024)\n            \n            elif item_type == '行业' and '收到其他与经营活动有关的现金占经营活动现金流入小计比' in item_name:\n                # 提取行业85分位数数据（直接使用行业值）\n                if value_2024:\n                    industry_data = float(value_2024)\n        \n        # 检查数据是否完整\n        if enterprise_data is None or industry_data is None:\n            return False\n        \n        # 验证风险条件：企业值 > 行业85分位数值\n        return enterprise_data > industry_data\n        \n    except (ValueError, TypeError) as e:\n        # 处理数据类型转换错误\n        return False\n    except ZeroDivisionError as e:\n        # 处理除零错误\n        return False\n    except Exception as e:\n        # 处理其他异常\n        return False",
    "is_retry": true
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "以前少计、本年多计成本或费用",
    "risk_description": "本年企业管理费用占营业收入的比重较上年的变动值比行业的变动值高5个百分点。（模型公式编号：191101070）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if len(model_items) < 2:\n            return False\n        \n        # 提取企业数据和行业数据\n        enterprise_data = None\n        industry_data = None\n        \n        for item in model_items:\n            if item.get('项目名称') == '管理费用占营业收入比(%)':\n                if item.get('类型') == '企业':\n                    enterprise_data = item\n                elif item.get('类型') == '行业':\n                    industry_data = item\n        \n        # 检查数据完整性\n        if enterprise_data is None or industry_data is None:\n            return False\n        \n        # 提取具体数值并进行类型转换\n        enterprise_2023 = float(enterprise_data.get('2023', 0))\n        enterprise_2024 = float(enterprise_data.get('2024', 0))\n        industry_2023 = float(industry_data.get('2023', 0))\n        industry_2024 = float(industry_data.get('2024', 0))\n        \n        # 计算变动值\n        enterprise_change = enterprise_2024 - enterprise_2023\n        industry_change = industry_2024 - industry_2023\n        \n        # 计算变动值差异\n        change_difference = enterprise_change - industry_change\n        \n        # 判断风险条件：变动值差异大于5个百分点\n        if change_difference > 5:\n            return True\n        else:\n            return False\n            \n    except (ValueError, TypeError):\n        # 处理数据类型转换错误\n        return False\n    except ZeroDivisionError:\n        # 处理除零错误（虽然本例中不会出现，但保留以防万一）\n        return False\n    except Exception as e:\n        # 处理其他所有异常\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "信用或资产减值损失错报",
    "risk_description": "本年企业在建工程较上年变动不超过10%，在建工程占资产总计的比重高于行业总体样本中85%的企业。（模型公式编号：210601022）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据\n        growth_rate_2024 = None\n        enterprise_ratio_2024 = None\n        industry_ratio_2024 = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', '')\n            \n            if item_name == '在建工程增长率' and item_type == '企业':\n                growth_rate_2024 = float(value_2024) if value_2024 != '' else None\n            \n            elif item_name == '在建工程占资产总计比(%)' and item_type == '企业':\n                enterprise_ratio_2024 = float(value_2024) if value_2024 != '' else None\n            \n            elif item_name == '在建工程占资产总计比(%)' and item_type == '行业':\n                industry_ratio_2024 = float(value_2024) if value_2024 != '' else None\n        \n        # 检查数据完整性\n        if growth_rate_2024 is None or enterprise_ratio_2024 is None or industry_ratio_2024 is None:\n            return False\n        \n        # 条件1：本年企业在建工程增长率绝对值≤10%\n        condition1 = abs(growth_rate_2024) <= 10.0\n        \n        # 条件2：企业占比 > 行业85%分位数（直接使用行业值作为85%分位数）\n        condition2 = enterprise_ratio_2024 > industry_ratio_2024\n        \n        # 两个条件同时满足时存在风险\n        return condition1 and condition2\n        \n    except (ValueError, TypeError, ZeroDivisionError) as e:\n        # 处理数据类型转换错误和其他常见异常\n        return False\n    except Exception as e:\n        # 处理其他未知异常\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "投资收益或资产处置收益错报",
    "risk_description": "企业总资产周转率连续两年低于行业均值，“经营业务利润”连续两年为负，本年营业利润率大于0。（模型公式编号：191101019）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化变量\n        company_tat_2023 = None\n        company_tat_2024 = None\n        industry_tat_2023 = None\n        industry_tat_2024 = None\n        company_operating_profit_2023 = None\n        company_operating_profit_2024 = None\n        company_op_growth_rate_2024 = None\n        \n        # 提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称')\n            item_type = item.get('类型')\n            \n            if item_name == '总资产周转率':\n                if item_type == '企业':\n                    company_tat_2023 = item.get('2023')\n                    company_tat_2024 = item.get('2024')\n                elif item_type == '行业':\n                    industry_tat_2023 = item.get('2023')\n                    industry_tat_2024 = item.get('2024')\n            \n            elif item_name == '经营业务利润':\n                if item_type == '企业':\n                    company_operating_profit_2023 = item.get('2023')\n                    company_operating_profit_2024 = item.get('2024')\n            \n            elif item_name == '营业利润增长率':\n                if item_type == '企业':\n                    company_op_growth_rate_2024 = item.get('2024')\n        \n        # 检查数据完整性\n        if (company_tat_2023 is None or company_tat_2024 is None or \n            industry_tat_2023 is None or industry_tat_2024 is None or \n            company_operating_profit_2023 is None or company_operating_profit_2024 is None or \n            company_op_growth_rate_2024 is None):\n            return False\n        \n        # 数据转换和处理\n        # 转换总资产周转率\n        company_tat_2023 = float(company_tat_2023)\n        company_tat_2024 = float(company_tat_2024)\n        industry_tat_2023 = float(industry_tat_2023)\n        industry_tat_2024 = float(industry_tat_2024)\n        \n        # 转换经营业务利润（处理千分位分隔符）\n        company_operating_profit_2023 = float(company_operating_profit_2023.replace(',', ''))\n        company_operating_profit_2024 = float(company_operating_profit_2024.replace(',', ''))\n        \n        # 转换营业利润增长率（百分比数值型）\n        company_op_growth_rate_2024 = float(company_op_growth_rate_2024)\n        \n        # 验证风险条件\n        condition1 = company_tat_2023 < industry_tat_2023\n        condition2 = company_tat_2024 < industry_tat_2024\n        condition3 = company_operating_profit_2023 < 0\n        condition4 = company_operating_profit_2024 < 0\n        condition5 = company_op_growth_rate_2024 > 0\n        \n        # 所有条件都满足时返回True\n        return condition1 and condition2 and condition3 and condition4 and condition5\n        \n    except (ValueError, TypeError, AttributeError, ZeroDivisionError) as e:\n        # 处理数据转换错误、类型错误、属性错误和除零错误\n        return False\n    except Exception as e:\n        # 处理其他所有异常\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "非正常筹资",
    "risk_description": "本年企业短期借款、一年内到期的非流动负债、长期借款之和比上年减少，应收账款增长，取得借款收到的现金小于偿还债务支付的现金，企业财务费用增长超过50%。（模型公式编号：191101102）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        short_term_loan_2023 = None\n        short_term_loan_2024 = None\n        current_liabilities_2023 = None\n        current_liabilities_2024 = None\n        long_term_loan_2023 = None\n        long_term_loan_2024 = None\n        receivables_growth_2024 = None\n        borrow_cash_received_2024 = None\n        debt_cash_paid_2024 = None\n        financial_expense_growth_2024 = None\n        \n        # 提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            # 只处理企业类型的数据\n            if item_type != '企业':\n                continue\n                \n            if item_name == '短期借款':\n                short_term_loan_2023 = item.get('2023', '-')\n                short_term_loan_2024 = item.get('2024', '-')\n            elif item_name == '一年内到期的非流动负债':\n                current_liabilities_2023 = item.get('2023', '-')\n                current_liabilities_2024 = item.get('2024', '-')\n            elif item_name == '长期借款':\n                long_term_loan_2023 = item.get('2023', '-')\n                long_term_loan_2024 = item.get('2024', '-')\n            elif item_name == '应收票据、应收账款、应收款项融资及合同资产增长率':\n                receivables_growth_2024 = item.get('2024', '-')\n            elif item_name == '取得借款收到的现金':\n                borrow_cash_received_2024 = item.get('2024', '-')\n            elif item_name == '偿还债务支付的现金':\n                debt_cash_paid_2024 = item.get('2024', '-')\n            elif item_name == '财务费用增长率':\n                financial_expense_growth_2024 = item.get('2024', '-')\n        \n        # 检查数据完整性\n        required_data = [\n            short_term_loan_2023, short_term_loan_2024,\n            current_liabilities_2023, current_liabilities_2024,\n            long_term_loan_2023, long_term_loan_2024,\n            receivables_growth_2024,\n            borrow_cash_received_2024,\n            debt_cash_paid_2024,\n            financial_expense_growth_2024\n        ]\n        \n        # 如果有任何必需数据缺失，返回False\n        if any(data == '-' or data is None for data in required_data):\n            return False\n        \n        # 转换数据类型\n        def convert_to_float(value):\n            if isinstance(value, str):\n                # 移除逗号并转换为浮点数\n                return float(value.replace(',', ''))\n            return float(value)\n        \n        # 转换所有数值\n        stl_2023 = convert_to_float(short_term_loan_2023)\n        stl_2024 = convert_to_float(short_term_loan_2024)\n        cl_2023 = convert_to_float(current_liabilities_2023)\n        cl_2024 = convert_to_float(current_liabilities_2024)\n        ltl_2023 = convert_to_float(long_term_loan_2023)\n        ltl_2024 = convert_to_float(long_term_loan_2024)\n        rg_2024 = convert_to_float(receivables_growth_2024)\n        bcr_2024 = convert_to_float(borrow_cash_received_2024)\n        dcp_2024 = convert_to_float(debt_cash_paid_2024)\n        feg_2024 = convert_to_float(financial_expense_growth_2024)\n        \n        # 计算借款总额\n        total_loans_2023 = stl_2023 + cl_2023 + ltl_2023\n        total_loans_2024 = stl_2024 + cl_2024 + ltl_2024\n        \n        # 验证风险条件\n        condition1 = total_loans_2024 < total_loans_2023  # 本年借款总额小于上年\n        condition2 = rg_2024 > 0  # 应收账款增长率大于0\n        condition3 = bcr_2024 < dcp_2024  # 取得借款收到的现金小于偿还债务支付的现金\n        condition4 = feg_2024 > 50  # 财务费用增长率大于50%\n        \n        # 所有条件都满足时返回True\n        return condition1 and condition2 and condition3 and condition4\n        \n    except (ValueError, TypeError, ZeroDivisionError) as e:\n        # 处理数据类型转换错误和其他异常\n        return False\n    except Exception as e:\n        # 处理其他未知异常\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "非正常筹资",
    "risk_description": "本年企业短期借款、一年内到期的非流动负债、长期借款之和比上年减少，应收账款增长，取得借款收到的现金小于偿还债务支付的现金，企业财务费用增长超过50%。（模型公式编号：191101102）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        short_term_loan_2023 = None\n        short_term_loan_2024 = None\n        current_liabilities_2023 = None\n        current_liabilities_2024 = None\n        long_term_loan_2023 = None\n        long_term_loan_2024 = None\n        receivables_growth_2023 = None\n        receivables_growth_2024 = None\n        borrow_cash_2023 = None\n        borrow_cash_2024 = None\n        repay_cash_2023 = None\n        repay_cash_2024 = None\n        finance_cost_growth_2023 = None\n        finance_cost_growth_2024 = None\n        \n        # 提取企业数据\n        for item in model_items:\n            if item.get('类型') == '企业':\n                item_name = item.get('项目名称', '')\n                value_2023 = item.get('2023', '-')\n                value_2024 = item.get('2024', '-')\n                \n                # 转换数据格式并处理缺失值\n                def convert_value(val):\n                    if val == '-' or val == '':\n                        return None\n                    try:\n                        # 处理带逗号的数字字符串\n                        if isinstance(val, str) and ',' in val:\n                            val = val.replace(',', '')\n                        return float(val)\n                    except (ValueError, TypeError):\n                        return None\n                \n                if item_name == '短期借款':\n                    short_term_loan_2023 = convert_value(value_2023)\n                    short_term_loan_2024 = convert_value(value_2024)\n                elif item_name == '一年内到期的非流动负债':\n                    current_liabilities_2023 = convert_value(value_2023)\n                    current_liabilities_2024 = convert_value(value_2024)\n                elif item_name == '长期借款':\n                    long_term_loan_2023 = convert_value(value_2023)\n                    long_term_loan_2024 = convert_value(value_2024)\n                elif item_name == '应收票据、应收账款、应收款项融资及合同资产增长率':\n                    receivables_growth_2023 = convert_value(value_2023)\n                    receivables_growth_2024 = convert_value(value_2024)\n                elif item_name == '取得借款收到的现金':\n                    borrow_cash_2023 = convert_value(value_2023)\n                    borrow_cash_2024 = convert_value(value_2024)\n                elif item_name == '偿还债务支付的现金':\n                    repay_cash_2023 = convert_value(value_2023)\n                    repay_cash_2024 = convert_value(value_2024)\n                elif item_name == '财务费用增长率':\n                    finance_cost_growth_2023 = convert_value(value_2023)\n                    finance_cost_growth_2024 = convert_value(value_2024)\n        \n        # 检查所有必要数据是否都存在\n        required_data = [\n            short_term_loan_2023, short_term_loan_2024,\n            current_liabilities_2023, current_liabilities_2024,\n            long_term_loan_2023, long_term_loan_2024,\n            receivables_growth_2023, receivables_growth_2024,\n            borrow_cash_2024, repay_cash_2024,\n            finance_cost_growth_2024\n        ]\n        \n        if any(x is None for x in required_data):\n            return False\n        \n        # 计算借款总额\n        total_loans_2023 = (short_term_loan_2023 or 0) + (current_liabilities_2023 or 0) + (long_term_loan_2023 or 0)\n        total_loans_2024 = (short_term_loan_2024 or 0) + (current_liabilities_2024 or 0) + (long_term_loan_2024 or 0)\n        \n        # 验证条件1: 本年借款总额比上年减少\n        condition1 = total_loans_2024 < total_loans_2023\n        \n        # 验证条件2: 应收账款增长率本年为正且比上年增长\n        condition2 = receivables_growth_2024 > 0 and receivables_growth_2024 > receivables_growth_2023\n        \n        # 验证条件3: 取得借款收到的现金小于偿还债务支付的现金\n        condition3 = borrow_cash_2024 < repay_cash_2024\n        \n        # 验证条件4: 财务费用增长率超过50%\n        condition4 = finance_cost_growth_2024 > 50\n        \n        # 所有条件都满足时返回True\n        return condition1 and condition2 and condition3 and condition4\n        \n    except (ValueError, TypeError, ZeroDivisionError) as e:\n        # 处理可能的异常情况\n        return False\n    except Exception as e:\n        # 处理其他未知异常\n        return False",
    "is_retry": true
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "重大资产重组",
    "risk_description": "本年企业资产总计增长超过50%，或营业收入增长超过50%，或所有者权益合计增长超过50%。（模型公式编号：191101108）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 如果数据缺失或不足，返回False\n        if not model_items or len(model_items) < 3:\n            return False\n        \n        # 定义需要检查的财务指标\n        target_indicators = ['资产总计增长率', '营业收入增长率', '所有者权益合计增长率']\n        \n        # 遍历所有项目，查找目标指标\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            \n            # 只处理企业类型的目标指标\n            if item_name in target_indicators and item.get('类型') == '企业':\n                # 获取2024年的增长率数据\n                growth_rate_2024 = item.get('2024')\n                \n                # 检查数据是否存在且可转换为数值\n                if growth_rate_2024 is not None:\n                    try:\n                        rate = float(growth_rate_2024)\n                        # 检查是否超过50%\n                        if rate > 50.0:\n                            return True\n                    except (ValueError, TypeError):\n                        # 数据转换失败，跳过此项\n                        continue\n        \n        # 所有指标都未超过50%，返回False\n        return False\n        \n    except Exception as e:\n        # 处理任何其他异常情况\n        return False"
  }
]