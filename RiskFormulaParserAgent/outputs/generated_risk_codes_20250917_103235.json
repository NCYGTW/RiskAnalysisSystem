[
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "本年企业营业收入增长超过20%，应收账款周转率高于行业总体样本中85%的企业。（模型公式编号：191101030）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        enterprise_revenue_growth_2024 = None\n        enterprise_receivables_turnover_2024 = None\n        industry_receivables_turnover_2024 = None\n        \n        # 遍历model_items提取数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', None)\n            \n            if item_name == '营业收入增长率' and item_type == '企业':\n                enterprise_revenue_growth_2024 = value_2024\n            elif item_name == '应收票据、应收账款、应收款项融资及合同资产周转率【次】':\n                if item_type == '企业':\n                    enterprise_receivables_turnover_2024 = value_2024\n                elif item_type == '行业':\n                    industry_receivables_turnover_2024 = value_2024\n        \n        # 检查数据完整性\n        if (enterprise_revenue_growth_2024 is None or \n            enterprise_receivables_turnover_2024 is None or \n            industry_receivables_turnover_2024 is None):\n            return False\n        \n        # 数据类型转换\n        enterprise_revenue_growth = float(enterprise_revenue_growth_2024)\n        enterprise_receivables_turnover = float(enterprise_receivables_turnover_2024)\n        industry_receivables_turnover = float(industry_receivables_turnover_2024)\n        \n        # 计算行业85%分位数（直接使用行业值作为85%分位数）\n        industry_85th_percentile = industry_receivables_turnover\n        \n        # 验证风险条件\n        condition1 = enterprise_revenue_growth > 20.0\n        condition2 = enterprise_receivables_turnover > industry_85th_percentile\n        \n        return condition1 and condition2\n        \n    except (ValueError, TypeError):\n        # 处理数据类型转换错误\n        return False\n    except ZeroDivisionError:\n        # 处理除零错误\n        return False\n    except Exception as e:\n        # 处理其他所有异常\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "本年企业“每元固定资产提供的营业收入”超过上年的1.2倍，固定资产减少不到10%，营业收入增长超过20%。（模型公式编号：191101080）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据\n        revenue_per_fixed_asset_2023 = None\n        revenue_per_fixed_asset_2024 = None\n        fixed_asset_growth_2024 = None\n        revenue_growth_2024 = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_name == '每元固定资产及使用权资产提供的营业收入' and item_type == '企业':\n                revenue_per_fixed_asset_2023 = item.get('2023')\n                revenue_per_fixed_asset_2024 = item.get('2024')\n            elif item_name == '固定资产及使用权资产增长率' and item_type == '企业':\n                fixed_asset_growth_2024 = item.get('2024')\n            elif item_name == '营业收入增长率' and item_type == '企业':\n                revenue_growth_2024 = item.get('2024')\n        \n        # 检查数据完整性\n        if None in [revenue_per_fixed_asset_2023, revenue_per_fixed_asset_2024, \n                   fixed_asset_growth_2024, revenue_growth_2024]:\n            return False\n        \n        # 数据类型转换\n        revenue_per_fixed_asset_2023 = float(revenue_per_fixed_asset_2023)\n        revenue_per_fixed_asset_2024 = float(revenue_per_fixed_asset_2024)\n        fixed_asset_growth_2024 = float(fixed_asset_growth_2024)\n        revenue_growth_2024 = float(revenue_growth_2024)\n        \n        # 验证条件1: 本年每元固定资产提供的营业收入 > 上年值的1.2倍\n        condition1 = revenue_per_fixed_asset_2024 > revenue_per_fixed_asset_2023 * 1.2\n        \n        # 验证条件2: 固定资产减少幅度 < 10% (增长率为负且绝对值小于10%)\n        condition2 = (fixed_asset_growth_2024 < 0) and (abs(fixed_asset_growth_2024) < 10)\n        \n        # 验证条件3: 营业收入增长幅度 > 20%\n        condition3 = revenue_growth_2024 > 20\n        \n        # 所有条件同时满足时返回True\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, ZeroDivisionError) as e:\n        # 处理数据类型转换错误和其他常见异常\n        return False\n    except Exception as e:\n        # 处理其他未知异常\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业营业收入增长超过20%，且大于销售商品和提供劳务收到的现金增长率，同时其差额超过行业均值的3倍。（模型公式编号：191101002）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        enterprise_revenue_growth = None\n        industry_revenue_growth = None\n        enterprise_cash_growth = None\n        industry_cash_growth = None\n        \n        # 提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', '')\n            \n            # 跳过空值\n            if not value_2024:\n                continue\n                \n            # 转换数据类型\n            try:\n                numeric_value = float(value_2024)\n            except (ValueError, TypeError):\n                continue\n            \n            # 根据项目名称和类型匹配数据\n            if item_name == '营业收入增长率' and item_type == '企业':\n                enterprise_revenue_growth = numeric_value\n            elif item_name == '营业收入增长率' and item_type == '行业':\n                industry_revenue_growth = numeric_value\n            elif item_name == '销售商品、提供劳务收到的现金增长率' and item_type == '企业':\n                enterprise_cash_growth = numeric_value\n            elif item_name == '销售商品、提供劳务收到的现金增长率' and item_type == '行业':\n                industry_cash_growth = numeric_value\n        \n        # 检查所有必需数据是否都存在\n        if any(x is None for x in [enterprise_revenue_growth, industry_revenue_growth, \n                                  enterprise_cash_growth, industry_cash_growth]):\n            return False\n        \n        # 验证风险条件\n        condition1 = enterprise_revenue_growth > 20.0\n        condition2 = enterprise_revenue_growth > enterprise_cash_growth\n        \n        # 计算增长率差值\n        enterprise_diff = enterprise_revenue_growth - enterprise_cash_growth\n        industry_diff = industry_revenue_growth - industry_cash_growth\n        \n        condition3 = enterprise_diff > 3 * industry_diff\n        \n        # 所有条件都满足时返回True\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, ZeroDivisionError) as e:\n        # 处理数据类型转换、除零等异常\n        return False\n    except Exception as e:\n        # 处理其他所有异常\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年行业营业收入增长率高于销售商品、提供劳务收到的现金增长率，且其差额和上年比扩大；同时，本年企业营业收入增长率高于销售商品、提供劳务收到的现金增长率且和上年比差异扩大；且企业本年营业收入增长率和销售商品、提供劳务收到的现金增长率的差额比行业高5个百分点以上。（模型公式编号：191101018）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 检查数据是否存在\n        if 'model_items' not in data_dict:\n            return False\n        \n        model_items = data_dict['model_items']\n        \n        # 初始化所有需要的变量\n        company_revenue_growth_2024 = None\n        company_revenue_growth_2023 = None\n        company_cash_growth_2024 = None\n        company_cash_growth_2023 = None\n        industry_revenue_growth_2024 = None\n        industry_revenue_growth_2023 = None\n        industry_cash_growth_2024 = None\n        industry_cash_growth_2023 = None\n        \n        # 提取数据\n        for item in model_items:\n            if item['项目名称'] == '营业收入增长率' and item['类型'] == '企业':\n                company_revenue_growth_2024 = float(item['2024']) if item['2024'] != '' else None\n                company_revenue_growth_2023 = float(item['2023']) if item['2023'] != '' else None\n            elif item['项目名称'] == '销售商品、提供劳务收到的现金增长率' and item['类型'] == '企业':\n                company_cash_growth_2024 = float(item['2024']) if item['2024'] != '' else None\n                company_cash_growth_2023 = float(item['2023']) if item['2023'] != '' else None\n            elif item['项目名称'] == '营业收入增长率' and item['类型'] == '行业':\n                industry_revenue_growth_2024 = float(item['2024']) if item['2024'] != '' else None\n                industry_revenue_growth_2023 = float(item['2023']) if item['2023'] != '' else None\n            elif item['项目名称'] == '销售商品、提供劳务收到的现金增长率' and item['类型'] == '行业':\n                industry_cash_growth_2024 = float(item['2024']) if item['2024'] != '' else None\n                industry_cash_growth_2023 = float(item['2023']) if item['2023'] != '' else None\n        \n        # 检查是否有任何必要数据缺失\n        if any(x is None for x in [\n            company_revenue_growth_2024, company_revenue_growth_2023,\n            company_cash_growth_2024, company_cash_growth_2023,\n            industry_revenue_growth_2024, industry_revenue_growth_2023,\n            industry_cash_growth_2024, industry_cash_growth_2023\n        ]):\n            return False\n        \n        # 验证条件1: 本年行业营业收入增长率 > 本年行业销售商品、提供劳务收到的现金增长率\n        condition1 = industry_revenue_growth_2024 > industry_cash_growth_2024\n        \n        # 验证条件2: (本年行业营业收入增长率 - 本年行业销售商品、提供劳务收到的现金增长率) > (上年行业营业收入增长率 - 上年行业销售商品、提供劳务收到的现金增长率)\n        industry_diff_2024 = industry_revenue_growth_2024 - industry_cash_growth_2024\n        industry_diff_2023 = industry_revenue_growth_2023 - industry_cash_growth_2023\n        condition2 = industry_diff_2024 > industry_diff_2023\n        \n        # 验证条件3: 本年企业营业收入增长率 > 本年企业销售商品、提供劳务收到的现金增长率\n        condition3 = company_revenue_growth_2024 > company_cash_growth_2024\n        \n        # 验证条件4: (本年企业营业收入增长率 - 本年企业销售商品、提供劳务收到的现金增长率) > (上年企业营业收入增长率 - 上年企业销售商品、提供劳务收到的现金增长率)\n        company_diff_2024 = company_revenue_growth_2024 - company_cash_growth_2024\n        company_diff_2023 = company_revenue_growth_2023 - company_cash_growth_2023\n        condition4 = company_diff_2024 > company_diff_2023\n        \n        # 验证条件5: (本年企业营业收入增长率 - 本年企业销售商品、提供劳务收到的现金增长率) - (本年行业营业收入增长率 - 本年行业销售商品、提供劳务收到的现金增长率) > 5\n        condition5 = (company_diff_2024 - industry_diff_2024) > 5\n        \n        # 所有条件都满足时返回True，表示存在风险\n        return condition1 and condition2 and condition3 and condition4 and condition5\n        \n    except (ValueError, TypeError, ZeroDivisionError) as e:\n        # 处理数据类型转换错误、类型错误和除零错误\n        return False\n    except Exception as e:\n        # 处理其他可能的异常\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业应收账款周转率降低，存货周转率提高，营业收入增长超过20%。（模型公式编号：191101035）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        ar_turnover_2023 = None\n        ar_turnover_2024 = None\n        inventory_turnover_2023 = None\n        inventory_turnover_2024 = None\n        revenue_growth_2024 = None\n        \n        # 提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            # 只处理企业类型的数据\n            if item_type != '企业':\n                continue\n                \n            if '应收票据、应收账款、应收款项融资及合同资产周转率' in item_name:\n                ar_turnover_2023 = float(item.get('2023', 0))\n                ar_turnover_2024 = float(item.get('2024', 0))\n            elif '存货周转率' in item_name:\n                inventory_turnover_2023 = float(item.get('2023', 0))\n                inventory_turnover_2024 = float(item.get('2024', 0))\n            elif '营业收入增长率' in item_name:\n                revenue_growth_2024 = float(item.get('2024', 0))\n        \n        # 检查数据完整性\n        if (ar_turnover_2023 is None or ar_turnover_2024 is None or \n            inventory_turnover_2023 is None or inventory_turnover_2024 is None or \n            revenue_growth_2024 is None):\n            return False\n        \n        # 验证风险条件\n        # 1. 本年应收账款周转率较上年降低\n        ar_turnover_decreased = ar_turnover_2024 < ar_turnover_2023\n        \n        # 2. 存货周转率较上年提高\n        inventory_turnover_increased = inventory_turnover_2024 > inventory_turnover_2023\n        \n        # 3. 营业收入增长率超过20%\n        revenue_growth_exceeded = revenue_growth_2024 > 20.0\n        \n        # 所有条件同时满足时存在风险\n        risk_exists = ar_turnover_decreased and inventory_turnover_increased and revenue_growth_exceeded\n        \n        return risk_exists\n        \n    except (ValueError, TypeError, ZeroDivisionError) as e:\n        # 处理数据类型转换错误、类型错误和除零错误\n        return False\n    except Exception as e:\n        # 处理其他可能的异常\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业股本较上年无变动，长期股权投资变动不超过5%，营业收入增长超过30%。（模型公式编号：191101112）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需指标的企业数据\n        equity_growth_data = None\n        investment_growth_data = None\n        revenue_growth_data = None\n        \n        for item in model_items:\n            if item['项目名称'] == '股本增长率' and item['类型'] == '企业':\n                equity_growth_data = item\n            elif item['项目名称'] == '长期股权投资增长率' and item['类型'] == '企业':\n                investment_growth_data = item\n            elif item['项目名称'] == '营业收入增长率' and item['类型'] == '企业':\n                revenue_growth_data = item\n        \n        # 检查数据完整性\n        if not all([equity_growth_data, investment_growth_data, revenue_growth_data]):\n            return False\n        \n        # 提取2024年数据并转换为浮点数\n        equity_growth_2024 = float(equity_growth_data['2024'])\n        investment_growth_2024 = float(investment_growth_data['2024'])\n        revenue_growth_2024 = float(revenue_growth_data['2024'])\n        \n        # 验证风险条件\n        condition1 = equity_growth_2024 == 0.0  # 股本增长率等于0%\n        condition2 = abs(investment_growth_2024) <= 5.0  # 长期股权投资增长率绝对值不超过5%\n        condition3 = revenue_growth_2024 > 30.0  # 营业收入增长率大于30%\n        \n        # 所有条件同时满足时存在风险\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, KeyError, ZeroDivisionError) as e:\n        # 处理数据类型转换错误、键不存在错误和除零错误\n        return False\n    except Exception as e:\n        # 处理其他可能的异常\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "关联方占用资金",
    "risk_description": "本年企业预付账款增长超过50%，且占流动资产比重高于行业总体样本中85%的企业。（模型公式编号：200301004）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据\n        prepayment_growth_rate = None\n        prepayment_current_ratio = None\n        prepayment_industry_ratio = None\n        \n        for item in model_items:\n            if item['项目名称'] == '预付款项增长率' and item['类型'] == '企业':\n                prepayment_growth_rate = item.get('2024')\n            elif item['项目名称'] == '预付款项占流动资产合计比(%)' and item['类型'] == '企业':\n                prepayment_current_ratio = item.get('2024')\n            elif item['项目名称'] == '预付款项占流动资产合计比(%)' and item['类型'] == '行业':\n                prepayment_industry_ratio = item.get('2024')\n        \n        # 检查数据完整性\n        if prepayment_growth_rate is None or prepayment_current_ratio is None or prepayment_industry_ratio is None:\n            return False\n        \n        # 数据类型转换\n        prepayment_growth_rate = float(prepayment_growth_rate)\n        prepayment_current_ratio = float(prepayment_current_ratio)\n        prepayment_industry_ratio = float(prepayment_industry_ratio)\n        \n        # 验证风险条件\n        condition1 = prepayment_growth_rate > 50.0\n        condition2 = prepayment_current_ratio > prepayment_industry_ratio\n        \n        return condition1 and condition2\n        \n    except (ValueError, TypeError):\n        # 处理数据类型转换错误\n        return False\n    except ZeroDivisionError:\n        # 处理除零错误\n        return False\n    except Exception as e:\n        # 处理其他所有异常\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "货币资金错报",
    "risk_description": "本年企业货币资金超过“短长期债务”的5倍，股本无变动或增长不到1%，资本公积无变动或增长不到5%。（模型公式编号：191101103）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        money_fund_2024 = None\n        debt_2024 = None\n        equity_growth_2024 = None\n        capital_reserve_growth_2024 = None\n        \n        # 提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', '')\n            \n            # 只处理企业类型的数据\n            if item_type != '企业':\n                continue\n                \n            # 转换数据类型\n            try:\n                if item_name == '货币资金':\n                    money_fund_2024 = float(str(value_2024).replace(',', '')) if value_2024 else None\n                elif item_name == '短长期债务':\n                    debt_2024 = float(str(value_2024).replace(',', '')) if value_2024 else None\n                elif item_name == '股本增长率':\n                    equity_growth_2024 = float(value_2024) if value_2024 else None\n                elif item_name == '资本公积增长率':\n                    capital_reserve_growth_2024 = float(value_2024) if value_2024 else None\n            except (ValueError, TypeError):\n                continue\n        \n        # 检查数据完整性\n        if None in [money_fund_2024, debt_2024, equity_growth_2024, capital_reserve_growth_2024]:\n            return False\n        \n        # 验证风险条件\n        condition1 = money_fund_2024 > debt_2024 * 5\n        condition2 = equity_growth_2024 <= 0.01\n        condition3 = capital_reserve_growth_2024 <= 0.05\n        \n        # 所有条件都满足时返回True（存在风险）\n        return condition1 and condition2 and condition3\n        \n    except (KeyError, ValueError, TypeError, ZeroDivisionError) as e:\n        # 处理各种异常情况\n        return False\n    except Exception as e:\n        # 处理其他未知异常\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "违规资金收付",
    "risk_description": "本年企业银行手续费（财务费用-利息费用+利息收入，未考虑汇兑损益影响）占经营活动现金流出小计、投资活动现金流出小计及筹资活动现金流出小计三项之和的比例超过0.5%。（模型公式编号：191101089）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items列表\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        financial_expense = None\n        interest_expense = None\n        interest_income = None\n        operating_outflow = None\n        investing_outflow = None\n        financing_outflow = None\n        \n        # 提取2024年企业数据\n        for item in model_items:\n            if item.get('类型') == '企业':\n                item_name = item.get('项目名称')\n                value_2024 = item.get('2024')\n                \n                if value_2024 is None:\n                    continue\n                \n                # 转换字符串数值为浮点数（处理千分位分隔符）\n                try:\n                    numeric_value = float(str(value_2024).replace(',', ''))\n                except (ValueError, TypeError):\n                    continue\n                \n                if item_name == '财务费用':\n                    financial_expense = numeric_value\n                elif item_name == '利息费用':\n                    interest_expense = numeric_value\n                elif item_name == '利息收入':\n                    interest_income = numeric_value\n                elif item_name == '经营活动现金流出小计':\n                    operating_outflow = numeric_value\n                elif item_name == '投资活动现金流出小计':\n                    investing_outflow = numeric_value\n                elif item_name == '筹资活动现金流出小计':\n                    financing_outflow = numeric_value\n        \n        # 检查所有必需数据是否都存在\n        if None in [financial_expense, interest_expense, interest_income, \n                   operating_outflow, investing_outflow, financing_outflow]:\n            return False\n        \n        # 计算银行手续费\n        bank_fee = financial_expense - interest_expense + interest_income\n        \n        # 计算现金流出总额\n        total_cash_outflow = operating_outflow + investing_outflow + financing_outflow\n        \n        # 检查除零错误\n        if abs(total_cash_outflow) < 1e-10:  # 避免浮点数精度问题\n            return False\n        \n        # 计算占比\n        ratio = bank_fee / total_cash_outflow\n        \n        # 判断风险条件\n        if ratio > 0.005:  # 0.5%\n            return True\n        else:\n            return False\n            \n    except (ValueError, TypeError, ZeroDivisionError) as e:\n        # 处理可能的异常情况\n        return False\n    except Exception as e:\n        # 处理其他未知异常\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "违规资金收付",
    "risk_description": "本年企业其他流动资产增长超过40%，且占资产总计的比重超过行业总体样本中85%的企业。（模型公式编号：191101083）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        growth_rate_2024 = None\n        enterprise_ratio_2024 = None\n        industry_ratio_2024 = None\n        \n        # 遍历model_items提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', '')\n            \n            if not value_2024:\n                continue\n                \n            # 转换数据类型\n            try:\n                numeric_value = float(value_2024)\n            except (ValueError, TypeError):\n                continue\n            \n            if item_name == '其他流动资产增长率' and item_type == '企业':\n                growth_rate_2024 = numeric_value\n            elif item_name == '其他流动资产占资产总计比(%)' and item_type == '企业':\n                enterprise_ratio_2024 = numeric_value\n            elif item_name == '其他流动资产占资产总计比(%)' and item_type == '行业':\n                industry_ratio_2024 = numeric_value\n        \n        # 检查数据是否完整\n        if growth_rate_2024 is None or enterprise_ratio_2024 is None or industry_ratio_2024 is None:\n            return False\n        \n        # 验证风险条件\n        condition1 = growth_rate_2024 > 40\n        condition2 = enterprise_ratio_2024 > industry_ratio_2024\n        \n        return condition1 and condition2\n        \n    except Exception as e:\n        # 捕获所有其他异常\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "违规资金收付",
    "risk_description": "本年企业其他流动资产占流动资产合计的比重超过15%。（模型公式编号：191101100）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 查找企业类型的数据点\n        enterprise_data = None\n        for item in model_items:\n            if item.get('类型') == '企业':\n                enterprise_data = item\n                break\n        \n        if enterprise_data is None:\n            return False\n        \n        # 获取2024年的数据\n        value_2024 = enterprise_data.get('2024')\n        if value_2024 is None:\n            return False\n        \n        # 转换为数值类型\n        ratio = float(value_2024)\n        \n        # 验证风险条件：比例大于15%\n        if ratio > 15.0:\n            return True\n        else:\n            return False\n            \n    except (ValueError, TypeError) as e:\n        # 处理数据类型转换错误\n        return False\n    except ZeroDivisionError as e:\n        # 处理除零错误\n        return False\n    except Exception as e:\n        # 处理其他所有异常\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "违规资金收付",
    "risk_description": "以前少计、本年多计成本或费用",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 检查数据字典和model_items是否存在\n        if not data_dict or 'model_items' not in data_dict:\n            return False\n            \n        model_items = data_dict['model_items']\n        \n        # 检查model_items是否为列表且不为空\n        if not isinstance(model_items, list) or len(model_items) == 0:\n            return False\n        \n        # 提取所需数据\n        interest_expense_data = None\n        debt_data = None\n        \n        for item in model_items:\n            if not isinstance(item, dict):\n                continue\n                \n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_name == '利息费用' and item_type == '企业':\n                interest_expense_data = item\n            elif item_name == '短长期债务' and item_type == '企业':\n                debt_data = item\n        \n        # 检查数据是否完整\n        if not interest_expense_data or not debt_data:\n            return False\n        \n        # 提取2023和2024年的数据\n        def parse_value(value):\n            \"\"\"将字符串数值转换为浮点数\"\"\"\n            if isinstance(value, str):\n                # 移除逗号和可能的其他字符\n                value = value.replace(',', '').strip()\n            try:\n                return float(value)\n            except (ValueError, TypeError):\n                return None\n        \n        interest_2023 = parse_value(interest_expense_data.get('2023'))\n        interest_2024 = parse_value(interest_expense_data.get('2024'))\n        debt_2023 = parse_value(debt_data.get('2023'))\n        debt_2024 = parse_value(debt_data.get('2024'))\n        \n        # 检查数据是否有效\n        if None in [interest_2023, interest_2024, debt_2023, debt_2024]:\n            return False\n        \n        # 检查除零错误\n        if debt_2023 == 0 or debt_2024 == 0:\n            return False\n        \n        # 计算利息费用占债务比率\n        interest_debt_ratio_2023 = interest_2023 / debt_2023\n        interest_debt_ratio_2024 = interest_2024 / debt_2024\n        \n        # 计算同比增长率\n        interest_growth_rate = (interest_2024 - interest_2023) / interest_2023\n        debt_change_rate = (debt_2024 - debt_2023) / debt_2023\n        \n        # 判断风险条件\n        # 1. 利息费用同比大幅增加（增长76%以上）\n        # 2. 债务总额同比下降\n        # 3. 利息费用占债务比率异常上升\n        if (interest_growth_rate > 0.76 and  # 增长超过76%\n            debt_change_rate < 0 and         # 债务下降\n            interest_debt_ratio_2024 > interest_debt_ratio_2023 * 1.5):  # 比率显著上升（50%以上）\n            return True\n        \n        return False\n        \n    except (ValueError, TypeError, ZeroDivisionError, KeyError, AttributeError) as e:\n        # 处理所有可能的异常情况\n        return False\n    except Exception as e:\n        # 处理其他未知异常\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "违规资金收付",
    "risk_description": "本年企业利息费用占“短长期债务”平均余额的比例比上年提高了3个百分点以上。（模型公式编号：191101085）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据项\n        interest_expense_2023 = None\n        interest_expense_2024 = None\n        debt_2023 = None\n        debt_2024 = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_name == '利息费用' and item_type == '企业':\n                interest_expense_2023 = item.get('2023')\n                interest_expense_2024 = item.get('2024')\n            elif item_name == '短长期债务' and item_type == '企业':\n                debt_2023 = item.get('2023')\n                debt_2024 = item.get('2024')\n        \n        # 检查数据是否完整\n        if None in [interest_expense_2023, interest_expense_2024, debt_2023, debt_2024]:\n            return False\n        \n        # 数据清洗和转换\n        def clean_numeric_value(value):\n            if isinstance(value, str):\n                # 移除逗号和空格\n                value = value.replace(',', '').replace(' ', '')\n            return float(value)\n        \n        interest_expense_2023 = clean_numeric_value(interest_expense_2023)\n        interest_expense_2024 = clean_numeric_value(interest_expense_2024)\n        debt_2023 = clean_numeric_value(debt_2023)\n        debt_2024 = clean_numeric_value(debt_2024)\n        \n        # 检查除零错误\n        if debt_2023 == 0 or debt_2024 == 0:\n            return False\n        \n        # 计算比例\n        ratio_2023 = (interest_expense_2023 / debt_2023) * 100\n        ratio_2024 = (interest_expense_2024 / debt_2024) * 100\n        \n        # 计算差值\n        ratio_diff = ratio_2024 - ratio_2023\n        \n        # 判断风险条件\n        if ratio_diff >= 3:\n            return True\n        else:\n            return False\n            \n    except (ValueError, TypeError, ZeroDivisionError) as e:\n        # 处理数据类型转换错误、除零错误等异常\n        return False\n    except Exception as e:\n        # 处理其他未知异常\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "递延所得税资产错报",
    "risk_description": "本年企业递延所得税资产减少超过50%。（模型公式编号：191101098）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取企业2023年和2024年的递延所得税资产增长率数据\n        enterprise_2023 = None\n        enterprise_2024 = None\n        \n        for item in model_items:\n            if (item.get('项目名称') == '递延所得税资产增长率' and \n                item.get('类型') == '企业'):\n                \n                # 提取2023年数据\n                if '2023' in item and item['2023'] is not None:\n                    enterprise_2023 = float(item['2023'])\n                \n                # 提取2024年数据\n                if '2024' in item and item['2024'] is not None:\n                    enterprise_2024 = float(item['2024'])\n                \n                break\n        \n        # 检查数据是否完整\n        if enterprise_2023 is None or enterprise_2024 is None:\n            return False\n        \n        # 计算降幅百分比\n        decrease_percentage = ((enterprise_2023 - enterprise_2024) / abs(enterprise_2023)) * 100\n        \n        # 判断风险条件：降幅超过50%\n        if decrease_percentage > 50:\n            return True\n        else:\n            return False\n            \n    except (ValueError, TypeError, ZeroDivisionError) as e:\n        # 处理数据类型转换错误、类型错误和除零错误\n        return False\n    except Exception as e:\n        # 处理其他可能的异常\n        return False"
  },
  {
    "company_name": "浙江联翔智能家居股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "本年企业“每元工资提供的营业收入”比前一年均值高1.2倍，营业收入增长超过20%。（模型公式编号：191101056）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据\n        revenue_per_wage_2023 = None\n        revenue_per_wage_2024 = None\n        revenue_growth_2024 = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_name == '每元工资提供的营业收入' and item_type == '企业':\n                revenue_per_wage_2023 = item.get('2023')\n                revenue_per_wage_2024 = item.get('2024')\n            \n            elif item_name == '营业收入增长率' and item_type == '企业':\n                revenue_growth_2024 = item.get('2024')\n        \n        # 检查数据完整性\n        if None in [revenue_per_wage_2023, revenue_per_wage_2024, revenue_growth_2024]:\n            return False\n        \n        # 数据类型转换\n        revenue_per_wage_2023 = float(revenue_per_wage_2023)\n        revenue_per_wage_2024 = float(revenue_per_wage_2024)\n        revenue_growth_2024 = float(revenue_growth_2024)\n        \n        # 计算前一年均值（这里就是2023年的值）\n        prev_year_mean = revenue_per_wage_2023\n        \n        # 验证风险条件\n        condition1 = revenue_per_wage_2024 > prev_year_mean * 1.2\n        condition2 = revenue_growth_2024 > 20.0\n        \n        return condition1 and condition2\n        \n    except (ValueError, TypeError):\n        # 处理数据类型转换错误\n        return False\n    except ZeroDivisionError:\n        # 处理除零错误\n        return False\n    except Exception as e:\n        # 处理其他所有异常\n        return False"
  },
  {
    "company_name": "浙江联翔智能家居股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业营业收入增长超过20%，且大于销售商品和提供劳务收到的现金增长率，同时其差额超过行业均值的3倍。（模型公式编号：191101002）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        enterprise_revenue_growth = None\n        industry_revenue_growth = None\n        enterprise_cash_growth = None\n        industry_cash_growth = None\n        \n        # 提取各项数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', '')\n            \n            # 跳过空值\n            if not value_2024:\n                continue\n                \n            # 转换为浮点数\n            try:\n                value = float(value_2024)\n            except (ValueError, TypeError):\n                continue\n            \n            if item_name == '营业收入增长率':\n                if item_type == '企业':\n                    enterprise_revenue_growth = value\n                elif item_type == '行业':\n                    industry_revenue_growth = value\n            \n            elif item_name == '销售商品、提供劳务收到的现金增长率':\n                if item_type == '企业':\n                    enterprise_cash_growth = value\n                elif item_type == '行业':\n                    industry_cash_growth = value\n        \n        # 检查数据是否完整\n        if (enterprise_revenue_growth is None or industry_revenue_growth is None or \n            enterprise_cash_growth is None or industry_cash_growth is None):\n            return False\n        \n        # 验证风险条件\n        condition1 = enterprise_revenue_growth > 20  # 营业收入增长超过20%\n        condition2 = enterprise_revenue_growth > enterprise_cash_growth  # 大于现金增长率\n        industry_diff = industry_revenue_growth - industry_cash_growth  # 行业均值差额\n        enterprise_diff = enterprise_revenue_growth - enterprise_cash_growth  # 企业差额\n        condition3 = enterprise_diff > 3 * industry_diff  # 差额超过行业均值的3倍\n        \n        # 所有条件都满足时返回True\n        return condition1 and condition2 and condition3\n        \n    except Exception as e:\n        # 捕获所有其他异常\n        return False"
  },
  {
    "company_name": "浙江联翔智能家居股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业应收账款周转率降低，存货周转率提高，营业收入增长超过20%。（模型公式编号：191101035）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        ar_turnover_2023 = None\n        ar_turnover_2024 = None\n        inventory_turnover_2023 = None\n        inventory_turnover_2024 = None\n        revenue_growth_2023 = None\n        revenue_growth_2024 = None\n        \n        # 提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            # 只处理企业类型的数据\n            if item_type != '企业':\n                continue\n                \n            if '应收票据、应收账款、应收款项融资及合同资产周转率' in item_name:\n                ar_turnover_2023 = item.get('2023')\n                ar_turnover_2024 = item.get('2024')\n            elif '存货周转率' in item_name:\n                inventory_turnover_2023 = item.get('2023')\n                inventory_turnover_2024 = item.get('2024')\n            elif '营业收入增长率' in item_name:\n                revenue_growth_2023 = item.get('2023')\n                revenue_growth_2024 = item.get('2024')\n        \n        # 检查数据完整性\n        if (ar_turnover_2023 is None or ar_turnover_2024 is None or \n            inventory_turnover_2023 is None or inventory_turnover_2024 is None or \n            revenue_growth_2023 is None or revenue_growth_2024 is None):\n            return False\n        \n        # 数据类型转换\n        ar_turnover_2023 = float(ar_turnover_2023)\n        ar_turnover_2024 = float(ar_turnover_2024)\n        inventory_turnover_2023 = float(inventory_turnover_2023)\n        inventory_turnover_2024 = float(inventory_turnover_2024)\n        revenue_growth_2023 = float(revenue_growth_2023)\n        revenue_growth_2024 = float(revenue_growth_2024)\n        \n        # 风险判断条件\n        # 1. 应收账款周转率显著降低（从42.13降至5.84）\n        ar_turnover_decrease_significant = ar_turnover_2024 < ar_turnover_2023\n        \n        # 2. 存货周转率提高（从1.69升至2.53）\n        inventory_turnover_increase = inventory_turnover_2024 > inventory_turnover_2023\n        \n        # 3. 营业收入增长率超过20%（从-21.73%升至37.83%）\n        revenue_growth_over_20 = revenue_growth_2024 > 20.0\n        \n        # 综合判断：三个条件同时满足时存在风险\n        risk_exists = (ar_turnover_decrease_significant and \n                      inventory_turnover_increase and \n                      revenue_growth_over_20)\n        \n        return risk_exists\n        \n    except (ValueError, TypeError, ZeroDivisionError) as e:\n        # 处理数据类型转换错误和其他常见异常\n        return False\n    except Exception as e:\n        # 处理其他所有异常\n        return False"
  },
  {
    "company_name": "浙江联翔智能家居股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业应收账款增长额占营业收入的比重高于行业总体样本中85%的企业。（模型公式编号：191101061）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items or len(model_items) < 2:\n            return False\n        \n        # 分离企业和行业数据\n        company_data = None\n        industry_data = None\n        \n        for item in model_items:\n            item_type = item.get('类型', '')\n            if item_type == '企业':\n                company_data = item\n            elif item_type == '行业':\n                industry_data = item\n        \n        # 检查数据完整性\n        if not company_data or not industry_data:\n            return False\n        \n        # 获取企业2024年数据\n        company_ratio_2024 = company_data.get('2024')\n        if company_ratio_2024 is None:\n            return False\n        \n        # 获取行业85分位数数据（直接使用行业数据点的值）\n        industry_percentile_85 = industry_data.get('2024')\n        if industry_percentile_85 is None:\n            return False\n        \n        # 转换为数值类型\n        company_value = float(company_ratio_2024)\n        industry_threshold = float(industry_percentile_85)\n        \n        # 判断风险条件\n        risk_exists = company_value > industry_threshold\n        return risk_exists\n        \n    except (ValueError, TypeError) as e:\n        # 处理数据类型转换错误\n        return False\n    except ZeroDivisionError as e:\n        # 处理除零错误\n        return False\n    except Exception as e:\n        # 处理其他所有异常\n        return False"
  },
  {
    "company_name": "浙江联翔智能家居股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业营业收入增长超过20%，营业收入增长率超过销售商品和提供劳务收到的现金增长率的1.5倍。（模型公式编号：210101002）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据\n        revenue_growth_rate = None\n        cash_growth_rate = None\n        \n        for item in model_items:\n            if item.get('项目名称') == '营业收入增长率' and item.get('类型') == '企业':\n                revenue_growth_rate = item.get('2024')\n            elif item.get('项目名称') == '销售商品、提供劳务收到的现金增长率' and item.get('类型') == '企业':\n                cash_growth_rate = item.get('2024')\n        \n        # 检查数据是否存在\n        if revenue_growth_rate is None or cash_growth_rate is None:\n            return False\n        \n        # 转换为数值类型\n        revenue_growth_rate = float(revenue_growth_rate)\n        cash_growth_rate = float(cash_growth_rate)\n        \n        # 验证风险条件\n        condition1 = revenue_growth_rate > 20.0\n        condition2 = revenue_growth_rate > 1.5 * cash_growth_rate\n        \n        return condition1 and condition2\n        \n    except (ValueError, TypeError):\n        # 处理数据类型转换错误\n        return False\n    except ZeroDivisionError:\n        # 处理除零错误\n        return False\n    except Exception as e:\n        # 处理其他所有异常\n        return False"
  },
  {
    "company_name": "浙江联翔智能家居股份有限公司",
    "risk_category": "少结转主营业务成本",
    "risk_description": "本年企业应收账款周转率与存货周转率均不到行业均值的90%，毛利率比行业均值高10个百分点以上。（模型公式编号：191101045）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        enterprise_ar_turnover = None\n        industry_ar_turnover = None\n        enterprise_inventory_turnover = None\n        industry_inventory_turnover = None\n        enterprise_gross_margin = None\n        industry_gross_margin = None\n        \n        # 遍历model_items提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', '')\n            \n            # 跳过空值\n            if not value_2024:\n                continue\n                \n            # 提取应收账款周转率数据\n            if '应收票据、应收账款、应收款项融资及合同资产周转率' in item_name:\n                if item_type == '企业':\n                    enterprise_ar_turnover = float(value_2024)\n                elif item_type == '行业':\n                    industry_ar_turnover = float(value_2024)\n            \n            # 提取存货周转率数据\n            elif '存货周转率' in item_name:\n                if item_type == '企业':\n                    enterprise_inventory_turnover = float(value_2024)\n                elif item_type == '行业':\n                    industry_inventory_turnover = float(value_2024)\n            \n            # 提取销售毛利率数据\n            elif '销售毛利率' in item_name:\n                if item_type == '企业':\n                    enterprise_gross_margin = float(value_2024)\n                elif item_type == '行业':\n                    industry_gross_margin = float(value_2024)\n        \n        # 检查所有必需数据是否都存在\n        if (enterprise_ar_turnover is None or industry_ar_turnover is None or\n            enterprise_inventory_turnover is None or industry_inventory_turnover is None or\n            enterprise_gross_margin is None or industry_gross_margin is None):\n            return False\n        \n        # 应用风险判断条件\n        condition1 = enterprise_ar_turnover < industry_ar_turnover * 0.9\n        condition2 = enterprise_inventory_turnover < industry_inventory_turnover * 0.9\n        condition3 = enterprise_gross_margin > industry_gross_margin + 10\n        \n        # 所有条件都满足时返回True\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, ZeroDivisionError) as e:\n        # 处理数据类型转换错误和其他常见异常\n        return False\n    except Exception as e:\n        # 处理其他未知异常\n        return False"
  },
  {
    "company_name": "浙江联翔智能家居股份有限公司",
    "risk_category": "少结转主营业务成本",
    "risk_description": "本年企业股本较上年无变动，长期股权投资减少，营业收入增长超过30%。（模型公式编号：191101110）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        equity_growth_rate_2024 = None\n        long_term_investment_growth_rate_2024 = None\n        revenue_growth_rate_2024 = None\n        \n        # 提取各项指标数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', '')\n            \n            if item_name == '股本增长率' and item_type == '企业':\n                try:\n                    equity_growth_rate_2024 = float(value_2024)\n                except (ValueError, TypeError):\n                    return False\n            \n            elif item_name == '长期股权投资增长率' and item_type == '企业':\n                try:\n                    long_term_investment_growth_rate_2024 = float(value_2024)\n                except (ValueError, TypeError):\n                    return False\n            \n            elif item_name == '营业收入增长率' and item_type == '企业':\n                try:\n                    revenue_growth_rate_2024 = float(value_2024)\n                except (ValueError, TypeError):\n                    return False\n        \n        # 检查数据是否完整\n        if (equity_growth_rate_2024 is None or \n            long_term_investment_growth_rate_2024 is None or \n            revenue_growth_rate_2024 is None):\n            return False\n        \n        # 验证风险条件\n        condition1 = equity_growth_rate_2024 == 0  # 股本增长率为0\n        condition2 = long_term_investment_growth_rate_2024 < 0  # 长期股权投资增长率为负\n        condition3 = revenue_growth_rate_2024 > 30  # 营业收入增长率大于30%\n        \n        # 所有条件同时满足时返回True\n        return condition1 and condition2 and condition3\n        \n    except Exception as e:\n        # 处理其他未预期的异常\n        return False"
  },
  {
    "company_name": "浙江联翔智能家居股份有限公司",
    "risk_category": "少计成本或费用",
    "risk_description": "本年企业营业收入增长超过20%，“经营业务利润”增长率比营业收入增长率高30个百分点以上。（模型公式编号：191101010）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据项\n        revenue_growth_data = None\n        operating_profit_growth_data = None\n        \n        for item in model_items:\n            if item.get('项目名称') == '营业收入增长率' and item.get('类型') == '企业':\n                revenue_growth_data = item\n            elif item.get('项目名称') == '经营业务利润增长率' and item.get('类型') == '企业':\n                operating_profit_growth_data = item\n        \n        # 检查数据是否存在\n        if not revenue_growth_data or not operating_profit_growth_data:\n            return False\n        \n        # 获取2024年数据\n        revenue_growth_2024 = revenue_growth_data.get('2024')\n        operating_profit_growth_2024 = operating_profit_growth_data.get('2024')\n        \n        # 检查数据是否为None或空字符串\n        if revenue_growth_2024 is None or operating_profit_growth_2024 is None:\n            return False\n        \n        if revenue_growth_2024 == '' or operating_profit_growth_2024 == '':\n            return False\n        \n        # 转换为数值类型\n        revenue_growth = float(revenue_growth_2024)\n        operating_profit_growth = float(operating_profit_growth_2024)\n        \n        # 验证条件1：本年企业营业收入增长超过20%\n        condition1 = revenue_growth > 20.0\n        \n        # 验证条件2：经营业务利润增长率比营业收入增长率高30个百分点以上\n        condition2 = (operating_profit_growth - revenue_growth) > 30.0\n        \n        # 两个条件需同时满足\n        return condition1 and condition2\n        \n    except (ValueError, TypeError) as e:\n        # 处理数据类型转换错误\n        return False\n    except ZeroDivisionError as e:\n        # 处理除零错误\n        return False\n    except Exception as e:\n        # 处理其他异常\n        return False"
  },
  {
    "company_name": "浙江联翔智能家居股份有限公司",
    "risk_category": "少计成本或费用",
    "risk_description": "企业营业收入前二年持续下降，本年增长，且比本年销售费用增幅高4个百分点以上，营业利润上年为负，本年为正。（模型公式编号：191101013）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据项\n        revenue_growth_data = {}\n        sales_expense_growth_data = {}\n        operating_profit_data = {}\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_name == '营业收入增长率' and item_type == '企业':\n                revenue_growth_data = item\n            elif item_name == '销售费用增长率' and item_type == '企业':\n                sales_expense_growth_data = item\n            elif item_name == '营业利润' and item_type == '企业':\n                operating_profit_data = item\n        \n        # 检查数据完整性\n        if not revenue_growth_data or not sales_expense_growth_data or not operating_profit_data:\n            return False\n        \n        # 提取具体数值并转换数据类型\n        # 营业收入增长率前两年持续下降（2023年为负）\n        revenue_growth_2023 = float(revenue_growth_data.get('2023', '0').replace(',', ''))\n        revenue_growth_2024 = float(revenue_growth_data.get('2024', '0').replace(',', ''))\n        \n        # 销售费用增长率\n        sales_expense_growth_2024 = float(sales_expense_growth_data.get('2024', '0').replace(',', ''))\n        \n        # 营业利润\n        operating_profit_2023 = float(operating_profit_data.get('2023', '0').replace(',', ''))\n        operating_profit_2024 = float(operating_profit_data.get('2024', '0').replace(',', ''))\n        \n        # 验证条件1：营业收入前两年持续下降（2023年为负增长）\n        condition1 = revenue_growth_2023 < 0\n        \n        # 验证条件2：营业收入本年增长（2024年增长）\n        condition2 = revenue_growth_2024 > 0\n        \n        # 验证条件3：营业收入增长率比销售费用增长率高4个百分点以上\n        growth_diff = revenue_growth_2024 - sales_expense_growth_2024\n        condition3 = growth_diff > 4\n        \n        # 验证条件4：营业利润上年为负\n        condition4 = operating_profit_2023 < 0\n        \n        # 验证条件5：营业利润本年为正\n        condition5 = operating_profit_2024 > 0\n        \n        # 所有条件同时满足则存在风险\n        return condition1 and condition2 and condition3 and condition4 and condition5\n        \n    except (ValueError, TypeError, ZeroDivisionError, KeyError, AttributeError):\n        return False\n    except Exception as e:\n        return False"
  },
  {
    "company_name": "浙江联翔智能家居股份有限公司",
    "risk_category": "少计成本或费用",
    "risk_description": "以前少计、本年多计信用或资产减值损失",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        if 'model_items' not in data_dict:\n            return False\n            \n        model_items = data_dict['model_items']\n        \n        # 提取所需数据\n        credit_impairment_data = None\n        receivables_data = None\n        prepayments_data = None\n        other_receivables_data = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            if item_name == '信用减值损失':\n                credit_impairment_data = item\n            elif item_name == '应收票据、应收账款、应收款项融资及合同资产':\n                receivables_data = item\n            elif item_name == '预付款项':\n                prepayments_data = item\n            elif item_name == '其他应收款':\n                other_receivables_data = item\n        \n        # 检查数据完整性\n        if not all([credit_impairment_data, receivables_data, prepayments_data, other_receivables_data]):\n            return False\n        \n        # 提取具体数值并转换为浮点数\n        def parse_value(value_str):\n            if isinstance(value_str, str):\n                # 移除逗号和可能的货币符号\n                cleaned = value_str.replace(',', '').replace('(', '').replace(')', '')\n                return float(cleaned)\n            elif isinstance(value_str, (int, float)):\n                return float(value_str)\n            else:\n                raise ValueError(\"Invalid value type\")\n        \n        # 信用减值损失数据\n        impairment_2023 = parse_value(credit_impairment_data.get('2023'))\n        impairment_2024 = parse_value(credit_impairment_data.get('2024'))\n        \n        # 应收类资产数据\n        receivables_2023 = parse_value(receivables_data.get('2023'))\n        receivables_2024 = parse_value(receivables_data.get('2024'))\n        prepayments_2023 = parse_value(prepayments_data.get('2023'))\n        prepayments_2024 = parse_value(prepayments_data.get('2024'))\n        other_receivables_2023 = parse_value(other_receivables_data.get('2023'))\n        other_receivables_2024 = parse_value(other_receivables_data.get('2024'))\n        \n        # 计算应收类资产总额\n        total_receivables_2023 = receivables_2023 + prepayments_2023 + other_receivables_2023\n        total_receivables_2024 = receivables_2024 + prepayments_2024 + other_receivables_2024\n        \n        # 计算减值计提比例\n        impairment_ratio_2023 = abs(impairment_2023) / total_receivables_2023 if total_receivables_2023 != 0 else 0\n        impairment_ratio_2024 = abs(impairment_2024) / total_receivables_2024 if total_receivables_2024 != 0 else 0\n        \n        # 判断条件1：信用减值损失绝对值同比大幅增加（增长约15倍）\n        impairment_growth = abs(impairment_2024) / abs(impairment_2023) if impairment_2023 != 0 else 0\n        \n        # 判断条件2：相关应收类资产规模显著增长（增幅超过15倍）\n        receivables_growth = total_receivables_2024 / total_receivables_2023 if total_receivables_2023 != 0 else 0\n        \n        # 判断条件3：减值计提比例异常变化\n        ratio_change = abs(impairment_ratio_2024 - impairment_ratio_2023)\n        \n        # 风险判断逻辑\n        condition1 = impairment_growth >= 15  # 增长15倍以上\n        condition2 = receivables_growth >= 15  # 增长15倍以上\n        condition3 = ratio_change > 0.01  # 计提比例变化超过1个百分点\n        \n        # 核心风险信号：减值损失增幅与资产规模增幅不匹配\n        # 如果减值损失增长远大于资产规模增长，可能存在风险\n        mismatch_risk = (impairment_growth / receivables_growth) > 2 if receivables_growth != 0 else False\n        \n        # 综合判断：满足多个条件时认为存在风险\n        if (condition1 and condition2 and condition3) or mismatch_risk:\n            return True\n        else:\n            return False\n            \n    except (ValueError, TypeError, ZeroDivisionError, KeyError, AttributeError) as e:\n        # 处理数据转换错误、类型错误、除零错误等异常情况\n        return False\n    except Exception as e:\n        # 处理其他未知异常\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "企业营业收入增长，且本年增长率高于行业总体样本中85%的企业。（模型公式编号：191101005）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取企业和行业数据\n        enterprise_data = None\n        industry_data = None\n        \n        for item in model_items:\n            if item.get('项目名称') == '营业收入增长率':\n                if item.get('类型') == '企业':\n                    enterprise_data = item\n                elif item.get('类型') == '行业':\n                    industry_data = item\n        \n        # 检查数据完整性\n        if enterprise_data is None or industry_data is None:\n            return False\n        \n        # 获取2024年数据\n        enterprise_growth_2024 = enterprise_data.get('2024')\n        industry_growth_2024 = industry_data.get('2024')\n        \n        if enterprise_growth_2024 is None or industry_growth_2024 is None:\n            return False\n        \n        # 转换数据类型\n        enterprise_growth = float(enterprise_growth_2024)\n        industry_percentile_85 = float(industry_growth_2024)  # 直接使用行业数据点作为85%分位数\n        \n        # 验证风险条件\n        risk_exists = enterprise_growth > industry_percentile_85\n        \n        return risk_exists\n        \n    except (ValueError, TypeError) as e:\n        # 处理数据类型转换错误\n        return False\n    except ZeroDivisionError as e:\n        # 处理除零错误\n        return False\n    except Exception as e:\n        # 处理其他异常\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "本年企业营业收入增长超过20%，在建工程增长超过30%，应收账款减少，或增长不到10%。（模型公式编号：191101021）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需的企业数据\n        revenue_growth = None\n        construction_growth = None\n        receivables_growth = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            # 只处理企业类型的数据\n            if item_type != '企业':\n                continue\n                \n            # 获取2024年数据并转换为浮点数\n            value_2024 = item.get('2024', '')\n            if value_2024 == '':\n                continue\n                \n            # 处理可能存在的逗号分隔符\n            if isinstance(value_2024, str):\n                value_2024 = value_2024.replace(',', '')\n            \n            try:\n                numeric_value = float(value_2024)\n            except (ValueError, TypeError):\n                continue\n                \n            # 根据项目名称分配数据\n            if item_name == '营业收入增长率':\n                revenue_growth = numeric_value\n            elif item_name == '在建工程增长率':\n                construction_growth = numeric_value\n            elif item_name == '应收票据、应收账款、应收款项融资及合同资产增长率':\n                receivables_growth = numeric_value\n        \n        # 检查所有必需数据是否都存在\n        if revenue_growth is None or construction_growth is None or receivables_growth is None:\n            return False\n        \n        # 应用风险判断条件\n        condition1 = revenue_growth > 20.0\n        condition2 = construction_growth > 30.0\n        condition3 = receivables_growth < 10.0\n        \n        # 所有条件必须同时满足才存在风险\n        return condition1 and condition2 and condition3\n        \n    except Exception as e:\n        # 捕获所有其他异常情况\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "本年企业“每元工资提供的营业收入”比前二年均值高1.2倍，营业收入增长超过20%。（模型公式编号：191101056）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        wage_revenue_2022 = None\n        wage_revenue_2023 = None\n        wage_revenue_2024 = None\n        revenue_growth_2024 = None\n        \n        # 提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_name == '每元工资提供的营业收入' and item_type == '企业':\n                wage_revenue_2023 = item.get('2023')\n                wage_revenue_2024 = item.get('2024')\n                # 尝试获取2022年数据，但根据数据缺口说明可能不存在\n                wage_revenue_2022 = item.get('2022')\n            \n            elif item_name == '营业收入增长率' and item_type == '企业':\n                revenue_growth_2024 = item.get('2024')\n        \n        # 检查数据完整性\n        if (wage_revenue_2023 is None or wage_revenue_2024 is None or \n            revenue_growth_2024 is None):\n            return False\n        \n        # 转换数据类型\n        wage_revenue_2023 = float(wage_revenue_2023)\n        wage_revenue_2024 = float(wage_revenue_2024)\n        revenue_growth_2024 = float(revenue_growth_2024)\n        \n        # 处理2022年数据缺失情况\n        if wage_revenue_2022 is None:\n            return False\n        \n        wage_revenue_2022 = float(wage_revenue_2022)\n        \n        # 计算前两年均值\n        prev_years_avg = (wage_revenue_2022 + wage_revenue_2023) / 2\n        \n        # 检查风险条件\n        condition1 = wage_revenue_2024 > prev_years_avg * 1.2\n        condition2 = revenue_growth_2024 > 20\n        \n        # 两个条件都满足则存在风险\n        return condition1 and condition2\n        \n    except (ValueError, TypeError, ZeroDivisionError) as e:\n        # 处理数据类型转换错误和其他常见异常\n        return False\n    except Exception as e:\n        # 处理其他所有异常\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "本年企业“每元固定资产提供的营业收入”超过上年的1.2倍，固定资产减少不到10%，营业收入增长超过20%。（模型公式编号：191101080）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据项\n        revenue_per_fixed_asset_2023 = None\n        revenue_per_fixed_asset_2024 = None\n        fixed_asset_growth_2024 = None\n        revenue_growth_2024 = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            # 只使用企业类型的数据\n            if item_type != '企业':\n                continue\n                \n            if item_name == '每元固定资产及使用权资产提供的营业收入':\n                revenue_per_fixed_asset_2023 = float(item.get('2023', 0))\n                revenue_per_fixed_asset_2024 = float(item.get('2024', 0))\n            elif item_name == '固定资产及使用权资产增长率':\n                fixed_asset_growth_2024 = float(item.get('2024', 0))\n            elif item_name == '营业收入增长率':\n                revenue_growth_2024 = float(item.get('2024', 0))\n        \n        # 检查数据是否完整\n        if (revenue_per_fixed_asset_2023 is None or revenue_per_fixed_asset_2024 is None or \n            fixed_asset_growth_2024 is None or revenue_growth_2024 is None):\n            return False\n        \n        # 验证风险条件\n        condition1 = revenue_per_fixed_asset_2024 > revenue_per_fixed_asset_2023 * 1.2\n        condition2 = fixed_asset_growth_2024 > -10  # 减少幅度小于10%意味着增长率大于-10%\n        condition3 = revenue_growth_2024 > 20\n        \n        # 所有条件同时满足时返回True\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError):\n        # 处理数据类型转换错误\n        return False\n    except ZeroDivisionError:\n        # 处理除零错误\n        return False\n    except Exception as e:\n        # 处理其他异常\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "本年企业固定资产原值增减不超过20%，“每元固定资产原值提供的营业收入”超过上年的1.5倍，营业收入增长超过20%。（模型公式编号：200201001）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据项\n        fixed_asset_growth_data = None\n        revenue_per_asset_data = None\n        revenue_growth_data = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            if item_name == '固定资产及使用权资产原值增长率':\n                fixed_asset_growth_data = item\n            elif item_name == '每元固定资产及使用权资产原值提供的营业收入':\n                revenue_per_asset_data = item\n            elif item_name == '营业收入增长率':\n                revenue_growth_data = item\n        \n        # 检查数据是否完整\n        if not all([fixed_asset_growth_data, revenue_per_asset_data, revenue_growth_data]):\n            return False\n        \n        # 提取2024年企业数据\n        fixed_asset_growth_2024 = float(fixed_asset_growth_data.get('2024', 0))\n        revenue_per_asset_2023 = float(revenue_per_asset_data.get('2023', 0))\n        revenue_per_asset_2024 = float(revenue_per_asset_data.get('2024', 0))\n        revenue_growth_2024 = float(revenue_growth_data.get('2024', 0))\n        \n        # 验证条件1: 本年固定资产原值增减不超过20%（绝对值≤20%）\n        condition1 = abs(fixed_asset_growth_2024) <= 20\n        \n        # 验证条件2: 每元固定资产原值提供的营业收入超过上年的1.5倍\n        if revenue_per_asset_2023 == 0:\n            condition2 = False\n        else:\n            condition2 = revenue_per_asset_2024 / revenue_per_asset_2023 > 1.5\n        \n        # 验证条件3: 营业收入增长超过20%\n        condition3 = revenue_growth_2024 > 20\n        \n        # 所有条件同时满足时存在风险\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, ZeroDivisionError):\n        return False\n    except Exception as e:\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业营业收入增长超过20%，且大于销售商品和提供劳务收到的现金增长率，同时其差额超过行业均值的3倍。（模型公式编号：191101002）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据\n        enterprise_revenue_growth = None\n        enterprise_cash_growth = None\n        industry_revenue_growth = None\n        industry_cash_growth = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', '')\n            \n            if item_name == '营业收入增长率' and item_type == '企业':\n                enterprise_revenue_growth = float(value_2024)\n            elif item_name == '销售商品、提供劳务收到的现金增长率' and item_type == '企业':\n                enterprise_cash_growth = float(value_2024)\n            elif item_name == '营业收入增长率' and item_type == '行业':\n                industry_revenue_growth = float(value_2024)\n            elif item_name == '销售商品、提供劳务收到的现金增长率' and item_type == '行业':\n                industry_cash_growth = float(value_2024)\n        \n        # 检查数据是否完整\n        if any(x is None for x in [enterprise_revenue_growth, enterprise_cash_growth, \n                                  industry_revenue_growth, industry_cash_growth]):\n            return False\n        \n        # 验证风险条件\n        condition1 = enterprise_revenue_growth > 20.0\n        condition2 = enterprise_revenue_growth > enterprise_cash_growth\n        condition3 = (enterprise_revenue_growth - enterprise_cash_growth) > 3 * (industry_revenue_growth - industry_cash_growth)\n        \n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, ZeroDivisionError) as e:\n        return False\n    except Exception as e:\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业营业收入增长超过20%，营业收入增长率超过销售商品和提供劳务收到的现金增长率的1.5倍。（模型公式编号：210101002）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        revenue_growth_rate = None\n        cash_growth_rate = None\n        \n        # 遍历所有项目，提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', '')\n            \n            # 只处理企业类型的数据\n            if item_type != '企业':\n                continue\n                \n            # 转换数据类型\n            try:\n                numeric_value = float(value_2024)\n            except (ValueError, TypeError):\n                continue\n            \n            # 根据项目名称匹配数据\n            if item_name == '营业收入增长率':\n                revenue_growth_rate = numeric_value\n            elif item_name == '销售商品、提供劳务收到的现金增长率':\n                cash_growth_rate = numeric_value\n        \n        # 检查数据是否完整\n        if revenue_growth_rate is None or cash_growth_rate is None:\n            return False\n        \n        # 验证风险条件\n        condition1 = revenue_growth_rate > 20.0\n        condition2 = revenue_growth_rate > 1.5 * cash_growth_rate\n        \n        return condition1 and condition2\n        \n    except Exception as e:\n        # 处理所有其他异常情况\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "少结转主营业务成本",
    "risk_description": "本年企业存货周转率降低，应收账款周转率提高，营业收入增长超过20%。（模型公式编号：191101033）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        inventory_turnover_2023 = None\n        inventory_turnover_2024 = None\n        receivables_turnover_2023 = None\n        receivables_turnover_2024 = None\n        revenue_growth_2023 = None\n        revenue_growth_2024 = None\n        \n        # 提取企业数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_type == '企业':\n                if '存货周转率' in item_name:\n                    inventory_turnover_2023 = float(item.get('2023', 0))\n                    inventory_turnover_2024 = float(item.get('2024', 0))\n                elif '应收' in item_name and '周转率' in item_name:\n                    receivables_turnover_2023 = float(item.get('2023', 0))\n                    receivables_turnover_2024 = float(item.get('2024', 0))\n                elif '营业收入增长率' in item_name:\n                    revenue_growth_2023 = float(item.get('2023', 0))\n                    revenue_growth_2024 = float(item.get('2024', 0))\n        \n        # 检查数据完整性\n        if any(x is None for x in [inventory_turnover_2023, inventory_turnover_2024, \n                                  receivables_turnover_2023, receivables_turnover_2024,\n                                  revenue_growth_2023, revenue_growth_2024]):\n            return False\n        \n        # 计算变化率\n        inventory_change_rate = (inventory_turnover_2024 - inventory_turnover_2023) / inventory_turnover_2023 * 100\n        receivables_change_rate = (receivables_turnover_2024 - receivables_turnover_2023) / receivables_turnover_2023 * 100\n        \n        # 风险判断条件\n        # 1. 存货周转率下降超过5%\n        inventory_decline_risk = inventory_change_rate < -5\n        \n        # 2. 营收高增长(超过20%)与存货周转率下降不匹配\n        growth_mismatch_risk = (revenue_growth_2024 > 20) and (inventory_change_rate < 0)\n        \n        # 3. 应收账款周转率异常大幅提升(超过50%)\n        receivables_abnormal_risk = receivables_change_rate > 50\n        \n        # 综合风险判断：满足任意一个风险条件即返回True\n        if inventory_decline_risk or growth_mismatch_risk or receivables_abnormal_risk:\n            return True\n        else:\n            return False\n            \n    except (ValueError, TypeError, ZeroDivisionError) as e:\n        # 处理数据类型转换错误、除零错误等异常\n        return False\n    except Exception as e:\n        # 处理其他未知异常\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "少结转主营业务成本",
    "risk_description": "本年企业销售毛利增长率比营业收入增长率高10个百分点以上，存货增长超过15%。（模型公式编号：191101044）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 检查数据字典是否包含必要的model_items字段\n        if 'model_items' not in data_dict:\n            return False\n            \n        model_items = data_dict['model_items']\n        \n        # 初始化所需变量\n        sales_profit_growth_2024 = None\n        revenue_growth_2024 = None\n        inventory_growth_2024 = None\n        \n        # 遍历model_items获取所需数据\n        for item in model_items:\n            if item['项目名称'] == '销售毛利增长率' and item['类型'] == '企业':\n                sales_profit_growth_2024 = float(item['2024'])\n            elif item['项目名称'] == '营业收入增长率' and item['类型'] == '企业':\n                revenue_growth_2024 = float(item['2024'])\n            elif item['项目名称'] == '存货增长率' and item['类型'] == '企业':\n                inventory_growth_2024 = float(item['2024'])\n        \n        # 检查所有必需数据是否都存在\n        if sales_profit_growth_2024 is None or revenue_growth_2024 is None or inventory_growth_2024 is None:\n            return False\n        \n        # 验证风险条件\n        condition1 = (sales_profit_growth_2024 - revenue_growth_2024) > 10\n        condition2 = inventory_growth_2024 > 15\n        \n        # 两个条件必须同时满足才存在风险\n        return condition1 and condition2\n        \n    except (ValueError, TypeError) as e:\n        # 处理数据类型转换错误\n        return False\n    except ZeroDivisionError as e:\n        # 处理除零错误（虽然本例中不需要除法计算）\n        return False\n    except Exception as e:\n        # 处理其他所有可能的异常\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "少结转主营业务成本",
    "risk_description": "本年企业应收账款周转率与存货周转率均不到行业均值的90%，毛利率比行业均值高10个百分点以上。（模型公式编号：191101045）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化变量\n        enterprise_ar_turnover_2024 = None\n        industry_ar_turnover_2024 = None\n        enterprise_inventory_turnover_2024 = None\n        industry_inventory_turnover_2024 = None\n        enterprise_gross_margin_2024 = None\n        industry_gross_margin_2024 = None\n        \n        # 遍历model_items提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', '')\n            \n            # 跳过空值\n            if not value_2024:\n                continue\n                \n            # 提取应收账款周转率数据\n            if '应收票据、应收账款、应收款项融资及合同资产周转率' in item_name:\n                try:\n                    value = float(value_2024)\n                    if item_type == '企业':\n                        enterprise_ar_turnover_2024 = value\n                    elif item_type == '行业':\n                        industry_ar_turnover_2024 = value\n                except (ValueError, TypeError):\n                    continue\n            \n            # 提取存货周转率数据\n            elif '存货周转率' in item_name:\n                try:\n                    value = float(value_2024)\n                    if item_type == '企业':\n                        enterprise_inventory_turnover_2024 = value\n                    elif item_type == '行业':\n                        industry_inventory_turnover_2024 = value\n                except (ValueError, TypeError):\n                    continue\n            \n            # 提取销售毛利率数据\n            elif '销售毛利率' in item_name:\n                try:\n                    value = float(value_2024)\n                    if item_type == '企业':\n                        enterprise_gross_margin_2024 = value\n                    elif item_type == '行业':\n                        industry_gross_margin_2024 = value\n                except (ValueError, TypeError):\n                    continue\n        \n        # 检查所有必需数据是否都存在\n        if (enterprise_ar_turnover_2024 is None or industry_ar_turnover_2024 is None or\n            enterprise_inventory_turnover_2024 is None or industry_inventory_turnover_2024 is None or\n            enterprise_gross_margin_2024 is None or industry_gross_margin_2024 is None):\n            return False\n        \n        # 应用风险判断条件\n        condition1 = enterprise_ar_turnover_2024 < industry_ar_turnover_2024 * 0.9\n        condition2 = enterprise_inventory_turnover_2024 < industry_inventory_turnover_2024 * 0.9\n        condition3 = enterprise_gross_margin_2024 > industry_gross_margin_2024 + 10\n        \n        # 所有条件都满足时返回True（存在风险）\n        return condition1 and condition2 and condition3\n        \n    except Exception as e:\n        # 捕获所有其他异常，返回False\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "少结转主营业务成本",
    "risk_description": "本年企业存货增长率超过营业成本增长率的1.2倍，存货期末余额超过营业成本的1.2倍。（模型公式编号：210601002）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        inventory_growth_rate = None\n        cost_growth_rate = None\n        inventory_balance = None\n        operating_cost = None\n        \n        # 遍历model_items提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', '')\n            \n            # 只处理企业类型的数据\n            if item_type != '企业':\n                continue\n                \n            # 转换2024年数据为float类型\n            try:\n                if isinstance(value_2024, str):\n                    # 处理带逗号的数字字符串\n                    value_2024 = value_2024.replace(',', '')\n                numeric_value = float(value_2024)\n            except (ValueError, TypeError):\n                continue\n            \n            # 根据项目名称匹配对应的数据\n            if item_name == '存货增长率':\n                inventory_growth_rate = numeric_value\n            elif item_name == '营业成本增长率':\n                cost_growth_rate = numeric_value\n            elif item_name == '存货':\n                inventory_balance = numeric_value\n            elif item_name == '营业成本':\n                operating_cost = numeric_value\n        \n        # 检查所有必需数据是否都存在\n        if any(x is None for x in [inventory_growth_rate, cost_growth_rate, inventory_balance, operating_cost]):\n            return False\n        \n        # 验证风险条件\n        condition1 = inventory_growth_rate > cost_growth_rate * 1.2\n        condition2 = inventory_balance > operating_cost * 1.2\n        \n        return condition1 and condition2\n        \n    except Exception as e:\n        # 捕获所有其他异常，返回False\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "与供应商存在潜在关联关系",
    "risk_description": "本年企业销售商品、提供劳务收到的现金超过含税营业收入，应付票据及应付账款增长，或减少不到10%。（模型公式编号：191101025）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        cash_received_2024 = None\n        revenue_2024 = None\n        ap_growth_rate_2024 = None\n        \n        # 提取企业数据\n        for item in model_items:\n            if item.get('类型') == '企业':\n                item_name = item.get('项目名称', '')\n                if item_name == '销售商品、提供劳务收到的现金':\n                    cash_received_2024 = float(item.get('2024', '0').replace(',', ''))\n                elif item_name == '营业收入':\n                    revenue_2024 = float(item.get('2024', '0').replace(',', ''))\n                elif item_name == '应付票据及应付账款增长率':\n                    ap_growth_rate_2024 = float(item.get('2024', '0'))\n        \n        # 检查数据是否完整\n        if cash_received_2024 is None or revenue_2024 is None or ap_growth_rate_2024 is None:\n            return False\n        \n        # 计算含税营业收入（假设增值税税率为13%）\n        tax_rate = 0.13\n        tax_inclusive_revenue = revenue_2024 * (1 + tax_rate)\n        \n        # 条件1: 本年销售商品、提供劳务收到的现金 > 本年含税营业收入\n        condition1 = cash_received_2024 > tax_inclusive_revenue\n        \n        # 条件2: 本年应付票据及应付账款增长率 > 0 或 增长率减少幅度 < 10%\n        condition2 = ap_growth_rate_2024 > 0 or ap_growth_rate_2024 > -10\n        \n        # 风险触发条件: 条件1与条件2同时满足\n        risk_triggered = condition1 and condition2\n        \n        return risk_triggered\n        \n    except (ValueError, TypeError, ZeroDivisionError) as e:\n        # 处理数据类型转换、除零错误等异常\n        return False\n    except Exception as e:\n        # 处理其他可能的异常\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "货币资金错报",
    "risk_description": "本年企业货币资金超过5000万元，货币资金占资产总计的比重超过行业均值，利息收入占本年货币资金平均余额的比例不到1%。（模型公式编号：191101073）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据\n        enterprise_cash_2024 = None\n        enterprise_cash_ratio_2024 = None\n        industry_cash_ratio_2024 = None\n        interest_income_2024 = None\n        cash_avg_balance = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', '')\n            \n            # 转换数值格式（去除逗号）\n            if value_2024 and isinstance(value_2024, str):\n                value_2024 = float(value_2024.replace(',', ''))\n            \n            if item_name == '货币资金' and item_type == '企业':\n                enterprise_cash_2024 = value_2024\n            elif item_name == '货币资金占资产总计比(%)' and item_type == '企业':\n                enterprise_cash_ratio_2024 = value_2024\n            elif item_name == '货币资金占资产总计比(%)' and item_type == '行业':\n                industry_cash_ratio_2024 = value_2024\n            elif item_name == '利息收入' and item_type == '企业':\n                interest_income_2024 = value_2024\n        \n        # 检查数据完整性\n        if (enterprise_cash_2024 is None or enterprise_cash_ratio_2024 is None or \n            industry_cash_ratio_2024 is None or interest_income_2024 is None):\n            return False\n        \n        # 计算货币资金平均余额（使用年初和年末数据）\n        enterprise_cash_2023 = None\n        for item in model_items:\n            if item.get('项目名称', '') == '货币资金' and item.get('类型', '') == '企业':\n                value_2023 = item.get('2023', '')\n                if value_2023 and isinstance(value_2023, str):\n                    enterprise_cash_2023 = float(value_2023.replace(',', ''))\n                    break\n        \n        if enterprise_cash_2023 is None:\n            return False\n        \n        # 计算货币资金平均余额\n        cash_avg_balance = (enterprise_cash_2023 + enterprise_cash_2024) / 2\n        \n        # 检查除零错误\n        if cash_avg_balance == 0:\n            return False\n        \n        # 计算利息收入占比\n        interest_ratio = interest_income_2024 / cash_avg_balance\n        \n        # 验证风险条件\n        condition1 = enterprise_cash_2024 > 50000000  # 5000万元\n        condition2 = enterprise_cash_ratio_2024 > industry_cash_ratio_2024\n        condition3 = interest_ratio < 0.01  # 1%\n        \n        # 所有条件都满足时返回True\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, ZeroDivisionError, AttributeError) as e:\n        # 处理可能的异常情况\n        return False\n    except Exception as e:\n        # 处理其他未知异常\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "违规资金收付",
    "risk_description": "本年企业收到的其他与经营活动有关的现金占经营活动现金流入小计的比重高于行业总体样本中85%的企业。（模型公式编号：191101075）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取企业和行业数据\n        enterprise_data = None\n        industry_data = None\n        \n        for item in model_items:\n            if item.get('类型') == '企业':\n                enterprise_data = item\n            elif item.get('类型') == '行业':\n                industry_data = item\n        \n        # 检查数据完整性\n        if enterprise_data is None or industry_data is None:\n            return False\n        \n        # 获取2024年企业指标值\n        enterprise_value_2024 = enterprise_data.get('2024')\n        if enterprise_value_2024 is None:\n            return False\n        \n        # 获取行业85%分位数阈值（直接使用行业数据点的值）\n        industry_threshold = industry_data.get('2024')\n        if industry_threshold is None:\n            return False\n        \n        # 转换为数值类型\n        enterprise_value = float(enterprise_value_2024)\n        threshold_value = float(industry_threshold)\n        \n        # 判断风险条件：企业值高于行业阈值\n        risk_exists = enterprise_value > threshold_value\n        \n        return risk_exists\n        \n    except (ValueError, TypeError) as e:\n        # 处理数据类型转换错误\n        return False\n    except ZeroDivisionError as e:\n        # 处理除零错误\n        return False\n    except Exception as e:\n        # 处理其他所有异常\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "以前少计、本年多计成本或费用",
    "risk_description": "本年企业利息费用占“短长期债务”平均余额的比例比上年提高了3个百分点以上。（模型公式编号：191101085）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 检查数据是否足够\n        if len(model_items) < 2:\n            return False\n        \n        # 提取所需数据\n        interest_expense_2023 = None\n        interest_expense_2024 = None\n        debt_2023 = None\n        debt_2024 = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_name == '利息费用' and item_type == '企业':\n                interest_expense_2023 = item.get('2023')\n                interest_expense_2024 = item.get('2024')\n            elif item_name == '短长期债务' and item_type == '企业':\n                debt_2023 = item.get('2023')\n                debt_2024 = item.get('2024')\n        \n        # 检查数据是否存在\n        if None in [interest_expense_2023, interest_expense_2024, debt_2023, debt_2024]:\n            return False\n        \n        # 数据清洗和转换\n        def clean_number(value):\n            if isinstance(value, str):\n                # 移除逗号和空格\n                value = value.replace(',', '').replace(' ', '')\n            return float(value)\n        \n        interest_expense_2023 = clean_number(interest_expense_2023)\n        interest_expense_2024 = clean_number(interest_expense_2024)\n        debt_2023 = clean_number(debt_2023)\n        debt_2024 = clean_number(debt_2024)\n        \n        # 检查除数不为零\n        if debt_2023 == 0 or debt_2024 == 0:\n            return False\n        \n        # 计算比率\n        ratio_2023 = interest_expense_2023 / debt_2023\n        ratio_2024 = interest_expense_2024 / debt_2024\n        \n        # 计算比率变化\n        ratio_change = ratio_2024 - ratio_2023\n        \n        # 判断风险（变化大于3个百分点）\n        return ratio_change > 0.03\n        \n    except (ValueError, TypeError, ZeroDivisionError) as e:\n        # 处理数据类型转换错误、类型错误和除零错误\n        return False\n    except Exception as e:\n        # 处理其他可能的异常\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "投资收益或资产处置收益错报",
    "risk_description": "企业总资产周转率连续两年低于行业均值，“经营业务利润”连续两年为负，本年营业利润较上年增长。（模型公式编号：191101019）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 检查数据字典是否包含model_items字段\n        if 'model_items' not in data_dict:\n            return False\n            \n        model_items = data_dict['model_items']\n        \n        # 初始化所需变量\n        company_asset_turnover_2023 = None\n        company_asset_turnover_2024 = None\n        industry_asset_turnover_2023 = None\n        industry_asset_turnover_2024 = None\n        company_operating_profit_2023 = None\n        company_operating_profit_2024 = None\n        company_profit_growth_2023 = None\n        company_profit_growth_2024 = None\n        \n        # 遍历model_items提取所需数据\n        for item in model_items:\n            if item['项目名称'] == '总资产周转率':\n                if item['类型'] == '企业':\n                    company_asset_turnover_2023 = float(item['2023'].replace(',', '')) if item['2023'] else None\n                    company_asset_turnover_2024 = float(item['2024'].replace(',', '')) if item['2024'] else None\n                elif item['类型'] == '行业':\n                    industry_asset_turnover_2023 = float(item['2023'].replace(',', '')) if item['2023'] else None\n                    industry_asset_turnover_2024 = float(item['2024'].replace(',', '')) if item['2024'] else None\n            \n            elif item['项目名称'] == '经营业务利润':\n                if item['类型'] == '企业':\n                    company_operating_profit_2023 = float(item['2023'].replace(',', '')) if item['2023'] else None\n                    company_operating_profit_2024 = float(item['2024'].replace(',', '')) if item['2024'] else None\n            \n            elif item['项目名称'] == '营业利润增长率':\n                if item['类型'] == '企业':\n                    company_profit_growth_2023 = float(item['2023'].replace(',', '')) if item['2023'] else None\n                    company_profit_growth_2024 = float(item['2024'].replace(',', '')) if item['2024'] else None\n        \n        # 检查所有必需数据是否都存在\n        if (company_asset_turnover_2023 is None or company_asset_turnover_2024 is None or\n            industry_asset_turnover_2023 is None or industry_asset_turnover_2024 is None or\n            company_operating_profit_2023 is None or company_operating_profit_2024 is None or\n            company_profit_growth_2023 is None or company_profit_growth_2024 is None):\n            return False\n        \n        # 验证风险条件\n        condition1 = (company_asset_turnover_2023 < industry_asset_turnover_2023 and \n                     company_asset_turnover_2024 < industry_asset_turnover_2024)\n        \n        condition2 = (company_operating_profit_2023 < 0 and \n                     company_operating_profit_2024 < 0)\n        \n        condition3 = company_profit_growth_2024 > 0\n        \n        # 所有条件都满足时返回True（存在风险）\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, ZeroDivisionError) as e:\n        # 处理数据类型转换错误、类型错误和除零错误\n        return False\n    except Exception as e:\n        # 处理其他可能的异常\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "重大资产重组",
    "risk_description": "本年企业资产总计增长超过50%，或营业收入增长超过50%，或所有者权益合计增长超过50%。（模型公式编号：191101108）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 定义需要检查的增长率指标\n        growth_rate_items = ['资产总计增长率', '营业收入增长率', '所有者权益合计增长率']\n        \n        # 遍历所有项目，提取企业2024年的增长率数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            # 只处理企业类型且是指标列表中的项目\n            if item_type == '企业' and item_name in growth_rate_items:\n                # 获取2024年数据\n                value_2024 = item.get('2024', '')\n                \n                # 检查数据是否存在且可转换为数值\n                if value_2024 == '' or value_2024 is None:\n                    continue\n                \n                # 转换为浮点数\n                growth_rate = float(value_2024)\n                \n                # 检查增长率是否超过50%\n                if growth_rate > 50.0:\n                    return True\n        \n        # 所有指标都未超过50%或数据不足\n        return False\n        \n    except (ValueError, TypeError) as e:\n        # 处理数据类型转换错误\n        print(f\"数据转换错误: {e}\")\n        return False\n    except ZeroDivisionError as e:\n        # 处理除零错误（虽然此处不太可能出现）\n        print(f\"除零错误: {e}\")\n        return False\n    except Exception as e:\n        # 处理其他未知异常\n        print(f\"未知错误: {e}\")\n        return False"
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "本年企业“每元固定资产提供的营业收入”超过上年的1.2倍，固定资产减少不到10%，营业收入增长超过20%。（模型公式编号：191101080）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据\n        revenue_per_fixed_asset_2023 = None\n        revenue_per_fixed_asset_2024 = None\n        fixed_asset_growth_2024 = None\n        revenue_growth_2024 = None\n        \n        for item in model_items:\n            name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2023 = item.get('2023', '')\n            value_2024 = item.get('2024', '')\n            \n            if name == '每元固定资产及使用权资产提供的营业收入' and item_type == '企业':\n                revenue_per_fixed_asset_2023 = float(value_2023) if value_2023 else None\n                revenue_per_fixed_asset_2024 = float(value_2024) if value_2024 else None\n            \n            elif name == '固定资产及使用权资产增长率' and item_type == '企业':\n                fixed_asset_growth_2024 = float(value_2024) if value_2024 else None\n            \n            elif name == '营业收入增长率' and item_type == '企业':\n                revenue_growth_2024 = float(value_2024) if value_2024 else None\n        \n        # 检查数据完整性\n        if (revenue_per_fixed_asset_2023 is None or \n            revenue_per_fixed_asset_2024 is None or \n            fixed_asset_growth_2024 is None or \n            revenue_growth_2024 is None):\n            return False\n        \n        # 验证风险条件\n        condition1 = revenue_per_fixed_asset_2024 > revenue_per_fixed_asset_2023 * 1.2\n        condition2 = fixed_asset_growth_2024 > -10\n        condition3 = revenue_growth_2024 > 20\n        \n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, ZeroDivisionError) as e:\n        return False\n    except Exception as e:\n        return False"
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业应收账款周转率降低，存货周转率提高，营业收入增长超过20%。（模型公式编号：191101035）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 检查数据字典是否包含必要的model_items字段\n        if 'model_items' not in data_dict:\n            return False\n            \n        model_items = data_dict['model_items']\n        \n        # 初始化所需变量\n        ar_turnover_2023 = None\n        ar_turnover_2024 = None\n        inventory_turnover_2023 = None\n        inventory_turnover_2024 = None\n        revenue_growth_2024 = None\n        \n        # 遍历model_items提取所需数据\n        for item in model_items:\n            if item['项目名称'] == '应收票据、应收账款、应收款项融资及合同资产周转率【次】' and item['类型'] == '企业':\n                ar_turnover_2023 = float(item['2023']) if item['2023'] not in [None, ''] else None\n                ar_turnover_2024 = float(item['2024']) if item['2024'] not in [None, ''] else None\n            elif item['项目名称'] == '存货周转率【次】' and item['类型'] == '企业':\n                inventory_turnover_2023 = float(item['2023']) if item['2023'] not in [None, ''] else None\n                inventory_turnover_2024 = float(item['2024']) if item['2024'] not in [None, ''] else None\n            elif item['项目名称'] == '营业收入增长率' and item['类型'] == '企业':\n                revenue_growth_2024 = float(item['2024']) if item['2024'] not in [None, ''] else None\n        \n        # 检查所有必要数据是否都存在\n        if (ar_turnover_2023 is None or ar_turnover_2024 is None or \n            inventory_turnover_2023 is None or inventory_turnover_2024 is None or \n            revenue_growth_2024 is None):\n            return False\n        \n        # 验证风险条件\n        condition1 = ar_turnover_2024 < ar_turnover_2023  # 应收账款周转率本年相比上年降低\n        condition2 = inventory_turnover_2024 > inventory_turnover_2023  # 存货周转率本年相比上年提高\n        condition3 = revenue_growth_2024 > 20.0  # 营业收入增长率本年超过20%\n        \n        # 所有条件都满足时返回True，表示存在风险\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, ZeroDivisionError) as e:\n        # 处理数据类型转换错误、类型错误和除零错误\n        return False\n    except Exception as e:\n        # 处理其他可能的异常\n        return False"
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "少结转主营业务成本",
    "risk_description": "本年企业销售毛利增长率比营业收入增长率高10个百分点以上，存货增长超过15%。（模型公式编号：191101044）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 如果数据缺失或不足，返回False\n        if not model_items or len(model_items) < 3:\n            return False\n        \n        # 提取所需的企业数据\n        sales_profit_growth = None\n        revenue_growth = None\n        inventory_growth = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', '')\n            \n            # 只处理企业类型的数据\n            if item_type == '企业':\n                try:\n                    if item_name == '销售毛利增长率':\n                        sales_profit_growth = float(value_2024)\n                    elif item_name == '营业收入增长率':\n                        revenue_growth = float(value_2024)\n                    elif item_name == '存货增长率':\n                        inventory_growth = float(value_2024)\n                except (ValueError, TypeError):\n                    # 数据转换失败，返回False\n                    return False\n        \n        # 检查是否所有必需数据都存在\n        if sales_profit_growth is None or revenue_growth is None or inventory_growth is None:\n            return False\n        \n        # 验证风险条件\n        condition1 = (sales_profit_growth - revenue_growth) > 10\n        condition2 = inventory_growth > 15\n        \n        # 两个条件都满足时返回True，否则返回False\n        return condition1 and condition2\n        \n    except Exception as e:\n        # 捕获所有其他异常，返回False\n        return False"
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "货币资金错报",
    "risk_description": "本年企业货币资金超过“短长期债务”的5倍，股本无变动或增长不到1%，资本公积无变动或增长不到5%。（模型公式编号：191101103）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        money_funds_2024 = None\n        debt_2024 = None\n        equity_growth_rate_2024 = None\n        capital_reserve_growth_rate_2024 = None\n        \n        # 遍历model_items提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', '')\n            \n            # 只处理企业类型的数据\n            if item_type != '企业':\n                continue\n                \n            # 提取并转换数据\n            if item_name == '货币资金':\n                money_funds_2024 = float(str(value_2024).replace(',', '')) if value_2024 else None\n            elif item_name == '短长期债务':\n                debt_2024 = float(str(value_2024).replace(',', '')) if value_2024 else None\n            elif item_name == '股本增长率':\n                equity_growth_rate_2024 = float(str(value_2024).replace(',', '')) if value_2024 else None\n            elif item_name == '资本公积增长率':\n                capital_reserve_growth_rate_2024 = float(str(value_2024).replace(',', '')) if value_2024 else None\n        \n        # 检查数据是否完整\n        if any(x is None for x in [money_funds_2024, debt_2024, equity_growth_rate_2024, capital_reserve_growth_rate_2024]):\n            return False\n        \n        # 验证风险条件\n        condition1 = money_funds_2024 > 5 * debt_2024\n        condition2 = equity_growth_rate_2024 < 1.0 or abs(equity_growth_rate_2024) < 1e-10\n        condition3 = capital_reserve_growth_rate_2024 < 5.0 or abs(capital_reserve_growth_rate_2024) < 1e-10\n        \n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, ZeroDivisionError) as e:\n        # 处理数据类型转换错误和其他常见异常\n        return False\n    except Exception as e:\n        # 处理其他未知异常\n        return False"
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "违规资金收付",
    "risk_description": "本年企业收到的其他与经营活动有关的现金占经营活动现金流入小计的比重高于行业总体样本中85%的企业。（模型公式编号：191101075）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 检查数据字典是否包含必要的字段\n        if 'model_items' not in data_dict:\n            return False\n        \n        model_items = data_dict['model_items']\n        \n        # 检查model_items是否为列表且不为空\n        if not isinstance(model_items, list) or len(model_items) == 0:\n            return False\n        \n        # 提取企业和行业数据\n        enterprise_data = None\n        industry_data = None\n        \n        for item in model_items:\n            if not isinstance(item, dict):\n                continue\n                \n            if item.get('项目名称') == '收到其他与经营活动有关的现金占经营活动现金流入小计比(%)':\n                if item.get('类型') == '企业':\n                    enterprise_data = item\n                elif item.get('类型') == '行业':\n                    industry_data = item\n        \n        # 检查必要数据是否存在\n        if enterprise_data is None or industry_data is None:\n            return False\n        \n        # 提取2024年数据\n        enterprise_value_2024 = enterprise_data.get('2024')\n        industry_value = industry_data.get('2024')  # 行业85%分位数值\n        \n        # 检查数据是否存在\n        if enterprise_value_2024 is None or industry_value is None:\n            return False\n        \n        # 转换为数值类型\n        enterprise_value = float(enterprise_value_2024)\n        industry_threshold = float(industry_value)\n        \n        # 判断风险条件：企业指标值 > 行业85%分位数值\n        risk_exists = enterprise_value > industry_threshold\n        \n        return risk_exists\n        \n    except (ValueError, TypeError):\n        # 处理数据类型转换错误\n        return False\n    except ZeroDivisionError:\n        # 处理除零错误\n        return False\n    except Exception as e:\n        # 处理其他所有异常\n        return False"
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "少计成本或费用",
    "risk_description": "本年企业营业收入增长超过20%，“经营业务利润”增长率比营业收入增长率高30个百分点以上。（模型公式编号：191101010）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 检查数据字典是否包含必要的model_items字段\n        if 'model_items' not in data_dict:\n            return False\n        \n        model_items = data_dict['model_items']\n        \n        # 检查model_items是否为列表且不为空\n        if not isinstance(model_items, list) or len(model_items) == 0:\n            return False\n        \n        # 初始化所需变量\n        revenue_growth_rate = None\n        operating_profit_growth_rate = None\n        \n        # 遍历model_items查找所需数据\n        for item in model_items:\n            if not isinstance(item, dict):\n                continue\n                \n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', '')\n            \n            # 只处理企业类型的数据\n            if item_type != '企业':\n                continue\n            \n            # 获取2024年营业收入增长率\n            if item_name == '营业收入增长率' and value_2024 != '':\n                revenue_growth_rate = float(value_2024)\n            \n            # 获取2024年经营业务利润增长率\n            elif item_name == '经营业务利润增长率' and value_2024 != '':\n                operating_profit_growth_rate = float(value_2024)\n        \n        # 检查是否获取到所有必要数据\n        if revenue_growth_rate is None or operating_profit_growth_rate is None:\n            return False\n        \n        # 应用风险判断条件\n        # 条件1: 本年营业收入增长率 > 20%\n        condition1 = revenue_growth_rate > 20.0\n        \n        # 条件2: (经营业务利润增长率 - 营业收入增长率) > 30%\n        condition2 = (operating_profit_growth_rate - revenue_growth_rate) > 30.0\n        \n        # 两个条件都满足时返回True（存在风险）\n        return condition1 and condition2\n        \n    except (ValueError, TypeError):\n        # 处理数据类型转换错误\n        return False\n    except ZeroDivisionError:\n        # 处理除零错误\n        return False\n    except Exception as e:\n        # 处理其他所有异常\n        return False"
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "少计成本或费用",
    "risk_description": "企业总资产周转率连续两年不到行业均值的90%，本年毛利率超过行业均值的1.1倍，本年营业利润为正，且较上年增长。（模型公式编号：191101051）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        company_asset_turnover_2023 = None\n        company_asset_turnover_2024 = None\n        industry_asset_turnover_2023 = None\n        industry_asset_turnover_2024 = None\n        company_gross_margin_2024 = None\n        industry_gross_margin_2024 = None\n        company_operating_profit_2024 = None\n        company_profit_growth_rate_2024 = None\n        \n        # 提取数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_name == '总资产周转率':\n                if item_type == '企业':\n                    company_asset_turnover_2023 = float(item.get('2023', 0))\n                    company_asset_turnover_2024 = float(item.get('2024', 0))\n                elif item_type == '行业':\n                    industry_asset_turnover_2023 = float(item.get('2023', 0))\n                    industry_asset_turnover_2024 = float(item.get('2024', 0))\n            \n            elif item_name == '销售毛利率':\n                if item_type == '企业':\n                    company_gross_margin_2024 = float(item.get('2024', 0))\n                elif item_type == '行业':\n                    industry_gross_margin_2024 = float(item.get('2024', 0))\n            \n            elif item_name == '营业利润':\n                if item_type == '企业':\n                    # 处理带逗号的字符串\n                    profit_str = item.get('2024', '0').replace(',', '')\n                    company_operating_profit_2024 = float(profit_str)\n            \n            elif item_name == '营业利润增长率':\n                if item_type == '企业':\n                    company_profit_growth_rate_2024 = float(item.get('2024', 0))\n        \n        # 检查数据完整性\n        if (company_asset_turnover_2023 is None or company_asset_turnover_2024 is None or\n            industry_asset_turnover_2023 is None or industry_asset_turnover_2024 is None or\n            company_gross_margin_2024 is None or industry_gross_margin_2024 is None or\n            company_operating_profit_2024 is None or company_profit_growth_rate_2024 is None):\n            return False\n        \n        # 验证条件1: 企业2023年总资产周转率 < 行业2023年总资产周转率 × 90%\n        condition1 = company_asset_turnover_2023 < (industry_asset_turnover_2023 * 0.9)\n        \n        # 验证条件2: 企业2024年总资产周转率 < 行业2024年总资产周转率 × 90%\n        condition2 = company_asset_turnover_2024 < (industry_asset_turnover_2024 * 0.9)\n        \n        # 验证条件3: 企业2024年销售毛利率 > 行业2024年销售毛利率 × 1.1\n        condition3 = company_gross_margin_2024 > (industry_gross_margin_2024 * 1.1)\n        \n        # 验证条件4: 企业2024年营业利润 > 0\n        condition4 = company_operating_profit_2024 > 0\n        \n        # 验证条件5: 企业2024年营业利润增长率 > 0\n        condition5 = company_profit_growth_rate_2024 > 0\n        \n        # 所有条件都满足时返回True\n        return condition1 and condition2 and condition3 and condition4 and condition5\n        \n    except (ValueError, TypeError, ZeroDivisionError) as e:\n        # 处理数据类型转换错误和其他异常\n        return False\n    except Exception as e:\n        # 处理其他未知异常\n        return False"
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "与关联方易货交易",
    "risk_description": "本年企业销售商品、提供劳务收到的现金不到含税营业收入的80%，应付票据及应付账款减少，或增长不到10%。（模型公式编号：191101022）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        revenue_2024 = None\n        cash_received_2024 = None\n        payables_growth_2024 = None\n        \n        # 提取企业数据\n        for item in model_items:\n            item_type = item.get('类型', '')\n            item_name = item.get('项目名称', '')\n            \n            if item_type == '企业':\n                if item_name == '营业收入':\n                    revenue_2024_str = item.get('2024', '')\n                    if revenue_2024_str:\n                        revenue_2024 = float(revenue_2024_str.replace(',', ''))\n                \n                elif item_name == '销售商品、提供劳务收到的现金':\n                    cash_received_2024_str = item.get('2024', '')\n                    if cash_received_2024_str:\n                        cash_received_2024 = float(cash_received_2024_str.replace(',', ''))\n                \n                elif item_name == '应付票据及应付账款增长率':\n                    payables_growth_2024_str = item.get('2024', '')\n                    if payables_growth_2024_str:\n                        payables_growth_2024 = float(payables_growth_2024_str.replace(',', ''))\n        \n        # 检查数据完整性\n        if revenue_2024 is None or cash_received_2024 is None or payables_growth_2024 is None:\n            return False\n        \n        # 验证条件1：销售商品、提供劳务收到的现金 / 营业收入 < 80%\n        if revenue_2024 == 0:\n            return False\n        \n        cash_to_revenue_ratio = cash_received_2024 / revenue_2024\n        condition1 = cash_to_revenue_ratio < 0.8\n        \n        # 验证条件2：应付票据及应付账款增长率 < 10%\n        condition2 = payables_growth_2024 < 10\n        \n        # 风险触发条件：条件1与条件2同时满足\n        return condition1 and condition2\n        \n    except (ValueError, TypeError, ZeroDivisionError) as e:\n        # 处理数据类型转换错误、类型错误和除零错误\n        return False\n    except Exception as e:\n        # 处理其他可能的异常\n        return False"
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "与关联方易货交易",
    "risk_description": "企业销售商品、提供劳务收到的现金连续两年不到含税营业收入的80%，本年应付票据及应付账款减少，或增长不到10%。（模型公式编号：191101024）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型数据项\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据\n        revenue_2023 = None\n        revenue_2024 = None\n        cash_received_2023 = None\n        cash_received_2024 = None\n        payables_growth_2024 = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_name == '营业收入' and item_type == '企业':\n                revenue_2023 = item.get('2023')\n                revenue_2024 = item.get('2024')\n            elif item_name == '销售商品、提供劳务收到的现金' and item_type == '企业':\n                cash_received_2023 = item.get('2023')\n                cash_received_2024 = item.get('2024')\n            elif item_name == '应付票据及应付账款增长率' and item_type == '企业':\n                payables_growth_2024 = item.get('2024')\n        \n        # 检查数据完整性\n        if None in [revenue_2023, revenue_2024, cash_received_2023, cash_received_2024, payables_growth_2024]:\n            return False\n        \n        # 转换数据类型\n        revenue_2023 = float(str(revenue_2023).replace(',', ''))\n        revenue_2024 = float(str(revenue_2024).replace(',', ''))\n        cash_received_2023 = float(str(cash_received_2023).replace(',', ''))\n        cash_received_2024 = float(str(cash_received_2024).replace(',', ''))\n        payables_growth_2024 = float(str(payables_growth_2024).replace(',', ''))\n        \n        # 计算现金收入占营业收入的比例\n        cash_ratio_2023 = cash_received_2023 / revenue_2023\n        cash_ratio_2024 = cash_received_2024 / revenue_2024\n        \n        # 判断条件1：连续两年现金收入不到营业收入的80%\n        condition1 = cash_ratio_2023 < 0.8 and cash_ratio_2024 < 0.8\n        \n        # 判断条件2：本年应付票据及应付账款减少或增长不到10%\n        condition2 = payables_growth_2024 < 10\n        \n        # 综合风险判断\n        risk_exists = condition1 and condition2\n        \n        return risk_exists\n        \n    except (ValueError, TypeError, ZeroDivisionError) as e:\n        # 处理数据类型转换错误、类型错误和除零错误\n        return False\n    except Exception as e:\n        # 处理其他可能的异常\n        return False"
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "信用或资产减值损失错报",
    "risk_description": "本年企业资产减值损失为负值，上年为正值；或本年为正值，上年为负值。（注：由于利润表格式的变化，请自行确认该值系统取数正负号是否正确。）（模型公式编号：210601008）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取企业资产减值损失数据\n        enterprise_data = None\n        for item in model_items:\n            if (item.get('项目名称') == '资产减值损失' and \n                item.get('类型') == '企业'):\n                enterprise_data = item\n                break\n        \n        if not enterprise_data:\n            return False\n        \n        # 获取2023年和2024年数据\n        value_2023_str = enterprise_data.get('2023')\n        value_2024_str = enterprise_data.get('2024')\n        \n        if not value_2023_str or not value_2024_str:\n            return False\n        \n        # 转换数据类型（处理千分位分隔符）\n        value_2023 = float(value_2023_str.replace(',', ''))\n        value_2024 = float(value_2024_str.replace(',', ''))\n        \n        # 判断符号相反的条件\n        if (value_2024 > 0 and value_2023 < 0) or (value_2024 < 0 and value_2023 > 0):\n            return True\n        else:\n            return False\n            \n    except (ValueError, TypeError) as e:\n        # 处理数据类型转换错误\n        return False\n    except ZeroDivisionError as e:\n        # 处理除零错误（虽然此处不会发生，但按要求保留）\n        return False\n    except Exception as e:\n        # 处理其他所有异常\n        return False"
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "信用或资产减值损失错报",
    "risk_description": "本年企业存货增长超过10%，存货周转率较上年提高，本年存货周转率高于行业总体样本中85%的企业。（模型公式编号：191101048）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取企业数据和行业数据\n        enterprise_inventory_growth_rate = None\n        enterprise_inventory_turnover_2023 = None\n        enterprise_inventory_turnover_2024 = None\n        industry_inventory_turnover_2024 = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_name == '存货增长率' and item_type == '企业':\n                enterprise_inventory_growth_rate = item.get('2024')\n            \n            elif item_name == '存货周转率【次】' and item_type == '企业':\n                enterprise_inventory_turnover_2023 = item.get('2023')\n                enterprise_inventory_turnover_2024 = item.get('2024')\n            \n            elif item_name == '存货周转率【次】' and item_type == '行业':\n                industry_inventory_turnover_2024 = item.get('2024')\n        \n        # 检查数据是否完整\n        if (enterprise_inventory_growth_rate is None or \n            enterprise_inventory_turnover_2023 is None or \n            enterprise_inventory_turnover_2024 is None or \n            industry_inventory_turnover_2024 is None):\n            return False\n        \n        # 转换数据类型\n        growth_rate = float(enterprise_inventory_growth_rate)\n        turnover_2023 = float(enterprise_inventory_turnover_2023)\n        turnover_2024 = float(enterprise_inventory_turnover_2024)\n        industry_turnover = float(industry_inventory_turnover_2024)\n        \n        # 验证风险条件\n        condition1 = growth_rate > 10.0  # 本年存货增长率 > 10%\n        condition2 = turnover_2024 > turnover_2023  # 本年存货周转率 > 上年存货周转率\n        condition3 = turnover_2024 > industry_turnover  # 本年企业存货周转率 > 行业值\n        \n        # 所有条件都满足时存在风险\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError) as e:\n        # 处理数据类型转换错误\n        return False\n    except ZeroDivisionError as e:\n        # 处理除零错误\n        return False\n    except Exception as e:\n        # 处理其他异常\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "本年企业营业收入增长超过20%，应收账款周转率高于行业总体样本中85%的企业。（模型公式编号：191101030）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        enterprise_revenue_growth_2024 = None\n        enterprise_receivables_turnover_2024 = None\n        industry_receivables_turnover_2024 = None\n        \n        # 提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', '')\n            \n            # 跳过空值\n            if not value_2024:\n                continue\n                \n            # 营业收入增长率\n            if item_name == '营业收入增长率' and item_type == '企业':\n                enterprise_revenue_growth_2024 = float(value_2024)\n            \n            # 应收账款周转率\n            elif item_name == '应收票据、应收账款、应收款项融资及合同资产周转率【次】':\n                if item_type == '企业':\n                    enterprise_receivables_turnover_2024 = float(value_2024)\n                elif item_type == '行业':\n                    industry_receivables_turnover_2024 = float(value_2024)\n        \n        # 检查数据完整性\n        if (enterprise_revenue_growth_2024 is None or \n            enterprise_receivables_turnover_2024 is None or \n            industry_receivables_turnover_2024 is None):\n            return False\n        \n        # 验证风险条件\n        # 条件1: 本年营业收入增长率 > 20%\n        condition1 = enterprise_revenue_growth_2024 > 20.0\n        \n        # 条件2: 企业应收账款周转率 > 行业85分位数值\n        # 根据要求，直接使用行业类型的数据点作为85分位数值\n        condition2 = enterprise_receivables_turnover_2024 > industry_receivables_turnover_2024\n        \n        # 两个条件都满足时存在风险\n        return condition1 and condition2\n        \n    except (ValueError, TypeError) as e:\n        # 处理数据类型转换错误\n        return False\n    except ZeroDivisionError as e:\n        # 处理除零错误\n        return False\n    except Exception as e:\n        # 处理其他所有异常\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "本年企业应收账款周转率和存货周转率之比超过5，比行业均值之比大2。（模型公式编号：231201007）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        enterprise_ar_turnover = None\n        enterprise_inventory_turnover = None\n        industry_ar_turnover = None\n        industry_inventory_turnover = None\n        \n        # 遍历model_items提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', '')\n            \n            # 跳过空值\n            if not value_2024:\n                continue\n                \n            # 转换数据类型\n            try:\n                numeric_value = float(value_2024)\n            except (ValueError, TypeError):\n                continue\n            \n            # 根据项目名称和类型匹配数据\n            if '应收账款' in item_name and item_type == '企业':\n                enterprise_ar_turnover = numeric_value\n            elif '存货周转率' in item_name and item_type == '企业':\n                enterprise_inventory_turnover = numeric_value\n            elif '应收账款' in item_name and item_type == '行业':\n                industry_ar_turnover = numeric_value\n            elif '存货周转率' in item_name and item_type == '行业':\n                industry_inventory_turnover = numeric_value\n        \n        # 检查所有必需数据是否都存在\n        if (enterprise_ar_turnover is None or enterprise_inventory_turnover is None or \n            industry_ar_turnover is None or industry_inventory_turnover is None):\n            return False\n        \n        # 计算企业比值和行业比值\n        enterprise_ratio = enterprise_ar_turnover / enterprise_inventory_turnover\n        industry_ratio = industry_ar_turnover / industry_inventory_turnover\n        \n        # 应用风险判断条件\n        condition1 = enterprise_ratio > 5\n        condition2 = (enterprise_ratio - industry_ratio) > 2\n        \n        # 返回风险判断结果\n        return condition1 and condition2\n        \n    except ZeroDivisionError:\n        # 处理除零错误\n        return False\n    except (ValueError, TypeError, KeyError) as e:\n        # 处理其他可能的异常\n        return False\n    except Exception as e:\n        # 处理其他未预料到的异常\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业营业收入增长超过20%，且高于销售商品和提供劳务收到的现金增长率的1.1倍，行业营业收入增长率均值低于销售商品和提供劳务收到的现金增长率均值。（模型公式编号：191101003）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        enterprise_revenue_growth = None\n        enterprise_cash_growth = None\n        industry_revenue_growth = None\n        industry_cash_growth = None\n        \n        # 提取各项数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', '')\n            \n            # 跳过空值\n            if not value_2024:\n                continue\n                \n            # 转换数据类型\n            try:\n                numeric_value = float(value_2024)\n            except (ValueError, TypeError):\n                continue\n            \n            # 根据项目名称和类型分类存储\n            if item_name == '营业收入增长率':\n                if item_type == '企业':\n                    enterprise_revenue_growth = numeric_value\n                elif item_type == '行业':\n                    industry_revenue_growth = numeric_value\n            \n            elif item_name == '销售商品、提供劳务收到的现金增长率':\n                if item_type == '企业':\n                    enterprise_cash_growth = numeric_value\n                elif item_type == '行业':\n                    industry_cash_growth = numeric_value\n        \n        # 检查所有必需数据是否都存在\n        if (enterprise_revenue_growth is None or enterprise_cash_growth is None or \n            industry_revenue_growth is None or industry_cash_growth is None):\n            return False\n        \n        # 验证风险条件\n        condition1 = enterprise_revenue_growth > 20.0\n        condition2 = enterprise_revenue_growth > (enterprise_cash_growth * 1.1)\n        condition3 = industry_revenue_growth < industry_cash_growth\n        \n        # 所有条件都满足时返回True（存在风险）\n        return condition1 and condition2 and condition3\n        \n    except Exception as e:\n        # 捕获所有其他异常，确保函数不会崩溃\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业营业收入增长超过20%，营业收入增长率超过销售商品和提供劳务收到的现金增长率的1.5倍。（模型公式编号：210101002）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 检查数据字典是否包含必要的字段\n        if 'model_items' not in data_dict:\n            return False\n            \n        model_items = data_dict['model_items']\n        \n        # 初始化所需变量\n        revenue_growth_rate = None\n        cash_received_growth_rate = None\n        \n        # 从数据中提取所需指标\n        for item in model_items:\n            if item.get('项目名称') == '营业收入增长率' and item.get('类型') == '企业':\n                revenue_growth_rate = item.get('2024')\n            elif item.get('项目名称') == '销售商品、提供劳务收到的现金增长率' and item.get('类型') == '企业':\n                cash_received_growth_rate = item.get('2024')\n        \n        # 检查数据是否完整\n        if revenue_growth_rate is None or cash_received_growth_rate is None:\n            return False\n        \n        # 转换数据类型\n        revenue_growth = float(revenue_growth_rate)\n        cash_growth = float(cash_received_growth_rate)\n        \n        # 验证风险条件\n        condition1 = revenue_growth > 20.0\n        condition2 = revenue_growth > (cash_growth * 1.5)\n        \n        # 返回风险判断结果\n        return condition1 and condition2\n        \n    except (ValueError, TypeError):\n        # 处理数据类型转换错误\n        return False\n    except ZeroDivisionError:\n        # 处理除零错误\n        return False\n    except Exception as e:\n        # 处理其他所有异常\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "持续经营假设不合理",
    "risk_description": "企业经营活动产生的现金流量净额连续两年为负，本年营业利润较上年增长。（模型公式编号：191101053）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 检查数据字典和model_items是否存在\n        if not data_dict or 'model_items' not in data_dict:\n            return False\n            \n        model_items = data_dict['model_items']\n        \n        # 提取所需数据\n        cash_flow_data = {}\n        profit_data = {}\n        \n        for item in model_items:\n            if item['项目名称'] == '经营活动产生的现金流量净额':\n                if item['类型'] == '企业':\n                    cash_flow_data['2023'] = item.get('2023')\n                    cash_flow_data['2024'] = item.get('2024')\n            elif item['项目名称'] == '营业利润增长率':\n                if item['类型'] == '企业':\n                    profit_data['2023'] = item.get('2023')\n                    profit_data['2024'] = item.get('2024')\n        \n        # 检查数据完整性\n        required_fields = ['2023', '2024']\n        for field in required_fields:\n            if field not in cash_flow_data or cash_flow_data[field] is None:\n                return False\n            if field not in profit_data or profit_data[field] is None:\n                return False\n        \n        # 数据类型转换和处理\n        try:\n            cash_flow_2023 = float(str(cash_flow_data['2023']).replace(',', ''))\n            cash_flow_2024 = float(str(cash_flow_data['2024']).replace(',', ''))\n            profit_2023 = float(str(profit_data['2023']).replace(',', ''))\n            profit_2024 = float(str(profit_data['2024']).replace(',', ''))\n        except (ValueError, TypeError):\n            return False\n        \n        # 验证风险条件\n        # 1. 经营活动产生的现金流量净额连续两年为负值\n        cash_flow_negative = cash_flow_2023 < 0 and cash_flow_2024 < 0\n        \n        # 2. 本年营业利润较上年实现正增长\n        profit_growth = profit_2024 > profit_2023\n        \n        return cash_flow_negative and profit_growth\n        \n    except Exception as e:\n        # 捕获所有其他异常情况\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "与供应商存在潜在关联关系",
    "risk_description": "本年企业不含税应付票据及应付账款超过存货，在建工程减少或增长不到10%，且应付票据及应付账款占总资产比重超过行业均值。（模型公式编号：191101101）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        enterprise_accounts_payable = None\n        enterprise_inventory = None\n        enterprise_construction_growth = None\n        enterprise_accounts_payable_ratio = None\n        industry_accounts_payable_ratio = None\n        \n        # 提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', '')\n            \n            if item_name == '应付票据及应付账款（不含税）' and item_type == '企业':\n                enterprise_accounts_payable = float(value_2024.replace(',', '')) if value_2024 else None\n            elif item_name == '存货' and item_type == '企业':\n                enterprise_inventory = float(value_2024.replace(',', '')) if value_2024 else None\n            elif item_name == '在建工程增长率' and item_type == '企业':\n                enterprise_construction_growth = float(value_2024) if value_2024 else None\n            elif item_name == '应付票据及应付账款占总资产比重(%)' and item_type == '企业':\n                enterprise_accounts_payable_ratio = float(value_2024) if value_2024 else None\n            elif item_name == '应付票据及应付账款占总资产比重(%)' and item_type == '行业':\n                industry_accounts_payable_ratio = float(value_2024) if value_2024 else None\n        \n        # 检查数据完整性\n        if (enterprise_accounts_payable is None or \n            enterprise_inventory is None or \n            enterprise_construction_growth is None or \n            enterprise_accounts_payable_ratio is None or \n            industry_accounts_payable_ratio is None):\n            return False\n        \n        # 验证条件1：本年企业不含税应付票据及应付账款超过存货\n        condition1 = enterprise_accounts_payable > enterprise_inventory\n        \n        # 验证条件2：在建工程减少或增长不到10%\n        condition2 = -10 < enterprise_construction_growth < 10\n        \n        # 验证条件3：应付票据及应付账款占总资产比重超过行业均值\n        condition3 = enterprise_accounts_payable_ratio > industry_accounts_payable_ratio\n        \n        # 所有条件同时满足时存在风险\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, ZeroDivisionError) as e:\n        # 处理数据类型转换错误和其他常见异常\n        return False\n    except Exception as e:\n        # 处理其他所有异常\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "与供应商存在潜在关联关系",
    "risk_description": "本年企业应付账款占存货的比例高于行业总体样本中85%的企业。（模型公式编号：210601021）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化变量\n        enterprise_value_2024 = None\n        industry_value_2024 = None\n        \n        # 遍历所有项目数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', '')\n            \n            # 跳过空值\n            if not value_2024:\n                continue\n                \n            # 获取企业2024年应付账款占存货的比例\n            if item_name == '应付账款占存货的比例' and item_type == '企业':\n                enterprise_value_2024 = float(value_2024)\n            \n            # 获取行业2024年应付账款占存货的比例（85分位值）\n            elif item_name == '应付账款占存货的比例' and item_type == '行业':\n                industry_value_2024 = float(value_2024)\n        \n        # 检查数据是否完整\n        if enterprise_value_2024 is None or industry_value_2024 is None:\n            return False\n        \n        # 验证风险条件：企业值高于行业85分位值\n        risk_exists = enterprise_value_2024 > industry_value_2024\n        \n        return risk_exists\n        \n    except (ValueError, TypeError) as e:\n        # 处理数据类型转换错误\n        return False\n    except ZeroDivisionError as e:\n        # 处理除零错误\n        return False\n    except Exception as e:\n        # 处理其他异常\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "货币资金错报",
    "risk_description": "本年企业货币资金超过5000万元，货币资金占资产总计的比重超过行业均值，利息收入占本年货币资金平均余额的比例不到1%。（模型公式编号：191101073）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        cash_2024 = None\n        cash_ratio_company = None\n        cash_ratio_industry = None\n        interest_income_2024 = None\n        cash_2023 = None\n        \n        # 提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', '')\n            \n            if item_name == '货币资金' and item_type == '企业':\n                cash_2024 = float(value_2024.replace(',', '')) if value_2024 else None\n                cash_2023_val = item.get('2023', '')\n                cash_2023 = float(cash_2023_val.replace(',', '')) if cash_2023_val else None\n            \n            elif item_name == '货币资金占资产总计比(%)' and item_type == '企业':\n                cash_ratio_company = float(value_2024) if value_2024 else None\n            \n            elif item_name == '货币资金占资产总计比(%)' and item_type == '行业':\n                cash_ratio_industry = float(value_2024) if value_2024 else None\n            \n            elif item_name == '利息收入' and item_type == '企业':\n                interest_income_2024 = float(value_2024.replace(',', '')) if value_2024 else None\n        \n        # 检查数据完整性\n        if None in [cash_2024, cash_ratio_company, cash_ratio_industry, interest_income_2024, cash_2023]:\n            return False\n        \n        # 条件1: 本年货币资金超过5000万元\n        condition1 = cash_2024 > 50000000\n        \n        # 条件2: 货币资金占资产总计的比重超过行业均值\n        condition2 = cash_ratio_company > cash_ratio_industry\n        \n        # 计算货币资金平均余额\n        cash_avg_balance = (cash_2023 + cash_2024) / 2\n        \n        # 计算利息收入占比\n        interest_ratio = (interest_income_2024 / cash_avg_balance) * 100\n        \n        # 条件3: 利息收入占本年货币资金平均余额的比例不到1%\n        condition3 = interest_ratio < 1\n        \n        # 所有条件同时满足时存在风险\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, ZeroDivisionError):\n        return False\n    except Exception as e:\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "违规资金收付",
    "risk_description": "本年企业收到的其他与经营活动有关的现金占经营活动现金流入小计的比重高于行业总体样本中85%的企业。（模型公式编号：191101075）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        if 'model_items' not in data_dict:\n            return False\n        \n        model_items = data_dict['model_items']\n        if not isinstance(model_items, list) or len(model_items) == 0:\n            return False\n        \n        # 提取企业数据和行业数据\n        enterprise_data = None\n        industry_data = None\n        \n        for item in model_items:\n            if not isinstance(item, dict):\n                continue\n                \n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if (item_name == '收到其他与经营活动有关的现金占经营活动现金流入小计比(%)' and \n                item_type == '企业'):\n                enterprise_data = item\n            \n            if (item_name == '收到其他与经营活动有关的现金占经营活动现金流入小计比(%)' and \n                item_type == '行业'):\n                industry_data = item\n        \n        # 检查数据完整性\n        if enterprise_data is None or industry_data is None:\n            return False\n        \n        # 获取2024年数据（本年）\n        enterprise_value_2024 = enterprise_data.get('2024')\n        industry_value_2024 = industry_data.get('2024')\n        \n        if enterprise_value_2024 is None or industry_value_2024 is None:\n            return False\n        \n        # 转换数据类型\n        enterprise_ratio = float(enterprise_value_2024)\n        industry_threshold = float(industry_value_2024)  # 行业85分位数阈值\n        \n        # 验证风险条件：企业指标值 > 行业85分位数阈值\n        if enterprise_ratio > industry_threshold:\n            return True\n        else:\n            return False\n            \n    except (ValueError, TypeError):\n        # 处理数据类型转换错误\n        return False\n    except ZeroDivisionError:\n        # 处理除零错误\n        return False\n    except Exception as e:\n        # 处理其他所有异常\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "以前少计、本年多计成本或费用",
    "risk_description": "本年企业管理费用占营业收入的比重较上年的变动值比行业的变动值高5个百分点。（模型公式编号：191101070）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化变量\n        company_2023 = None\n        company_2024 = None\n        industry_2023 = None\n        industry_2024 = None\n        \n        # 提取企业数据和行业数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_name == '管理费用占营业收入比(%)':\n                if item_type == '企业':\n                    company_2023 = item.get('2023')\n                    company_2024 = item.get('2024')\n                elif item_type == '行业':\n                    industry_2023 = item.get('2023')\n                    industry_2024 = item.get('2024')\n        \n        # 检查数据完整性\n        if None in [company_2023, company_2024, industry_2023, industry_2024]:\n            return False\n        \n        # 转换数据类型\n        company_2023_val = float(company_2023)\n        company_2024_val = float(company_2024)\n        industry_2023_val = float(industry_2023)\n        industry_2024_val = float(industry_2024)\n        \n        # 计算企业变动值和行业变动值\n        company_change = company_2024_val - company_2023_val\n        industry_change = industry_2024_val - industry_2023_val\n        \n        # 计算变动差异\n        change_difference = company_change - industry_change\n        \n        # 判断风险条件：变动差异大于5个百分点\n        if change_difference > 5:\n            return True\n        else:\n            return False\n            \n    except (ValueError, TypeError, ZeroDivisionError) as e:\n        # 处理数据类型转换错误、类型错误和除零错误\n        return False\n    except Exception as e:\n        # 处理其他所有异常\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "信用或资产减值损失错报",
    "risk_description": "本年企业在建工程较上年变动不超过10%，在建工程占资产总计的比重高于行业总体样本中85%的企业。（模型公式编号：210601022）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        construction_growth_rate = None\n        enterprise_ratio = None\n        industry_ratio = None\n        \n        # 遍历model_items提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', '')\n            \n            # 跳过空值\n            if not value_2024:\n                continue\n                \n            # 转换数据类型\n            try:\n                numeric_value = float(value_2024)\n            except (ValueError, TypeError):\n                continue\n            \n            # 提取在建工程增长率（企业）\n            if item_name == '在建工程增长率' and item_type == '企业':\n                construction_growth_rate = numeric_value\n            \n            # 提取在建工程占资产总计比（企业）\n            elif item_name == '在建工程占资产总计比(%)' and item_type == '企业':\n                enterprise_ratio = numeric_value\n            \n            # 提取在建工程占资产总计比（行业）\n            elif item_name == '在建工程占资产总计比(%)' and item_type == '行业':\n                industry_ratio = numeric_value\n        \n        # 检查数据是否完整\n        if construction_growth_rate is None or enterprise_ratio is None or industry_ratio is None:\n            return False\n        \n        # 验证条件1：在建工程增长率绝对值不超过10%\n        condition1 = abs(construction_growth_rate) <= 10\n        \n        # 验证条件2：企业占比高于行业值（85分位数）\n        condition2 = enterprise_ratio > industry_ratio\n        \n        # 两个条件都满足时存在风险\n        return condition1 and condition2\n        \n    except Exception as e:\n        # 处理所有其他异常情况\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "投资收益或资产处置收益错报",
    "risk_description": "企业总资产周转率连续两年低于行业均值，“经营业务利润”连续两年为负，本年营业利润较上年增长。（模型公式编号：191101019）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        company_tat_2023 = None\n        company_tat_2024 = None\n        industry_tat_2023 = None\n        industry_tat_2024 = None\n        company_business_profit_2023 = None\n        company_business_profit_2024 = None\n        company_profit_growth_2023 = None\n        company_profit_growth_2024 = None\n        \n        # 提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_name == '总资产周转率':\n                if item_type == '企业':\n                    company_tat_2023 = item.get('2023')\n                    company_tat_2024 = item.get('2024')\n                elif item_type == '行业':\n                    industry_tat_2023 = item.get('2023')\n                    industry_tat_2024 = item.get('2024')\n            \n            elif item_name == '经营业务利润':\n                if item_type == '企业':\n                    company_business_profit_2023 = item.get('2023')\n                    company_business_profit_2024 = item.get('2024')\n            \n            elif item_name == '营业利润增长率':\n                if item_type == '企业':\n                    company_profit_growth_2023 = item.get('2023')\n                    company_profit_growth_2024 = item.get('2024')\n        \n        # 检查数据完整性\n        if (company_tat_2023 is None or company_tat_2024 is None or \n            industry_tat_2023 is None or industry_tat_2024 is None or \n            company_business_profit_2023 is None or company_business_profit_2024 is None or \n            company_profit_growth_2023 is None or company_profit_growth_2024 is None):\n            return False\n        \n        # 数据清洗和转换\n        # 处理总资产周转率（去除可能的逗号分隔符）\n        company_tat_2023 = float(str(company_tat_2023).replace(',', ''))\n        company_tat_2024 = float(str(company_tat_2024).replace(',', ''))\n        industry_tat_2023 = float(str(industry_tat_2023).replace(',', ''))\n        industry_tat_2024 = float(str(industry_tat_2024).replace(',', ''))\n        \n        # 处理经营业务利润（去除逗号和货币符号）\n        company_business_profit_2023 = float(str(company_business_profit_2023).replace(',', '').replace('¥', '').replace('$', ''))\n        company_business_profit_2024 = float(str(company_business_profit_2024).replace(',', '').replace('¥', '').replace('$', ''))\n        \n        # 处理营业利润增长率\n        company_profit_growth_2023 = float(str(company_profit_growth_2023).replace(',', ''))\n        company_profit_growth_2024 = float(str(company_profit_growth_2024).replace(',', ''))\n        \n        # 验证风险条件\n        # 条件1：企业总资产周转率连续两年低于行业均值\n        condition1 = (company_tat_2023 < industry_tat_2023 and \n                      company_tat_2024 < industry_tat_2024)\n        \n        # 条件2：企业经营业务利润连续两年为负值\n        condition2 = (company_business_profit_2023 < 0 and \n                      company_business_profit_2024 < 0)\n        \n        # 条件3：企业营业利润增长率本年较上年有所增长\n        condition3 = company_profit_growth_2024 > company_profit_growth_2023\n        \n        # 所有条件都满足时返回True（存在风险）\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, ZeroDivisionError) as e:\n        # 处理数据类型转换错误、类型错误和除零错误\n        return False\n    except Exception as e:\n        # 处理其他可能的异常\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "非正常筹资",
    "risk_description": "本年企业短期借款、一年内到期的非流动负债、长期借款之和比上年减少，应收账款增长，取得借款收到的现金小于偿还债务支付的现金，企业财务费用增长超过50%。（模型公式编号：191101102）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据项\n        data_map = {}\n        for item in model_items:\n            name = item.get('项目名称', '')\n            if name:\n                data_map[name] = {\n                    '2023': item.get('2023', '-'),\n                    '2024': item.get('2024', '-'),\n                    '类型': item.get('类型', '')\n                }\n        \n        # 检查必要数据是否存在\n        required_fields = [\n            '短期借款', '一年内到期的非流动负债', '长期借款',\n            '应收票据、应收账款、应收款项融资及合同资产增长率',\n            '取得借款收到的现金', '偿还债务支付的现金', '财务费用增长率'\n        ]\n        \n        for field in required_fields:\n            if field not in data_map:\n                return False\n        \n        # 数据转换函数\n        def convert_value(value_str):\n            if value_str == '-' or value_str == '':\n                return None\n            try:\n                # 处理带百分号的数值\n                if '%' in str(value_str):\n                    return float(str(value_str).replace('%', '').replace(',', ''))\n                # 处理带逗号的数值\n                return float(str(value_str).replace(',', ''))\n            except (ValueError, TypeError):\n                return None\n        \n        # 获取2023年和2024年的负债数据\n        short_loan_2023 = convert_value(data_map['短期借款']['2023'])\n        short_loan_2024 = convert_value(data_map['短期借款']['2024'])\n        \n        current_liab_2023 = convert_value(data_map['一年内到期的非流动负债']['2023'])\n        current_liab_2024 = convert_value(data_map['一年内到期的非流动负债']['2024'])\n        \n        long_loan_2023 = convert_value(data_map['长期借款']['2023'])\n        long_loan_2024 = convert_value(data_map['长期借款']['2024'])\n        \n        # 检查负债数据是否完整\n        if any(x is None for x in [short_loan_2023, short_loan_2024, current_liab_2023, \n                                  current_liab_2024, long_loan_2023, long_loan_2024]):\n            return False\n        \n        # 计算负债总额变化\n        total_debt_2023 = short_loan_2023 + current_liab_2023 + long_loan_2023\n        total_debt_2024 = short_loan_2024 + current_liab_2024 + long_loan_2024\n        \n        # 条件1：本年负债总额比上年减少\n        condition1 = total_debt_2024 < total_debt_2023\n        \n        # 获取应收账款增长率数据\n        ar_growth_2023 = convert_value(data_map['应收票据、应收账款、应收款项融资及合同资产增长率']['2023'])\n        ar_growth_2024 = convert_value(data_map['应收票据、应收账款、应收款项融资及合同资产增长率']['2024'])\n        \n        if ar_growth_2023 is None or ar_growth_2024 is None:\n            return False\n        \n        # 条件2：应收账款增长率本年为正且比上年显著上升\n        condition2 = (ar_growth_2024 > 0) and (ar_growth_2024 > ar_growth_2023)\n        \n        # 获取现金流入流出数据\n        borrow_cash_2024 = convert_value(data_map['取得借款收到的现金']['2024'])\n        repay_cash_2024 = convert_value(data_map['偿还债务支付的现金']['2024'])\n        \n        if borrow_cash_2024 is None or repay_cash_2024 is None:\n            return False\n        \n        # 条件3：取得借款收到的现金小于偿还债务支付的现金\n        condition3 = borrow_cash_2024 < repay_cash_2024\n        \n        # 获取财务费用增长率数据\n        finance_cost_growth_2023 = convert_value(data_map['财务费用增长率']['2023'])\n        finance_cost_growth_2024 = convert_value(data_map['财务费用增长率']['2024'])\n        \n        if finance_cost_growth_2023 is None or finance_cost_growth_2024 is None:\n            return False\n        \n        # 条件4：财务费用增长率超过50%\n        condition4 = finance_cost_growth_2024 > 50\n        \n        # 所有条件都满足时返回True（存在风险）\n        return condition1 and condition2 and condition3 and condition4\n        \n    except (ValueError, TypeError, ZeroDivisionError, KeyError, AttributeError) as e:\n        # 处理各种异常情况\n        return False\n    except Exception as e:\n        # 处理其他未知异常\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "重大资产重组",
    "risk_description": "本年企业资产总计增长超过50%，或营业收入增长超过50%，或所有者权益合计增长超过50%。（模型公式编号：191101108）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 检查数据是否足够\n        if not model_items or len(model_items) < 3:\n            return False\n        \n        # 定义需要检查的指标名称\n        target_indicators = ['资产总计增长率', '营业收入增长率', '所有者权益合计增长率']\n        \n        # 阈值设定\n        threshold = 50.0\n        \n        # 遍历所有项目，查找企业类型的指标数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            # 只处理企业类型且是指标列表中的项目\n            if item_type == '企业' and item_name in target_indicators:\n                # 获取2024年数据\n                value_2024 = item.get('2024', '')\n                \n                # 检查数据是否存在且可转换为数值\n                if value_2024 == '' or value_2024 is None:\n                    continue\n                \n                # 转换为浮点数\n                growth_rate = float(value_2024)\n                \n                # 检查是否超过阈值\n                if growth_rate > threshold:\n                    return True\n        \n        # 所有指标都未超过阈值\n        return False\n        \n    except (ValueError, TypeError) as e:\n        # 处理数据类型转换错误\n        return False\n    except ZeroDivisionError as e:\n        # 处理除零错误（虽然这里没有除法运算，但保留以防万一）\n        return False\n    except Exception as e:\n        # 处理其他所有异常\n        return False"
  }
]