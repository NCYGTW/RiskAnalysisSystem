[
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "本年企业营业收入增长超过20%，应收账款周转率高于行业总体样本中85%的企业。（模型公式编号：191101030）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化变量\n        revenue_growth_rate_2024 = None\n        enterprise_receivables_turnover_2024 = None\n        industry_receivables_turnover_2024 = None\n        \n        # 遍历所有项目数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024')\n            \n            if value_2024 is None:\n                continue\n                \n            try:\n                value_2024 = float(value_2024)\n            except (ValueError, TypeError):\n                continue\n            \n            # 获取企业2024年营业收入增长率\n            if item_name == '营业收入增长率' and item_type == '企业':\n                revenue_growth_rate_2024 = value_2024\n            \n            # 获取企业2024年应收账款周转率\n            elif item_name == '应收票据、应收账款、应收款项融资及合同资产周转率【次】' and item_type == '企业':\n                enterprise_receivables_turnover_2024 = value_2024\n            \n            # 获取行业2024年应收账款周转率（作为85%分位数的替代值）\n            elif item_name == '应收票据、应收账款、应收款项融资及合同资产周转率【次】' and item_type == '行业':\n                industry_receivables_turnover_2024 = value_2024\n        \n        # 检查数据是否完整\n        if (revenue_growth_rate_2024 is None or \n            enterprise_receivables_turnover_2024 is None or \n            industry_receivables_turnover_2024 is None):\n            return False\n        \n        # 应用风险判断条件\n        condition1 = revenue_growth_rate_2024 > 20.0\n        condition2 = enterprise_receivables_turnover_2024 > industry_receivables_turnover_2024\n        \n        # 两个条件都满足时存在风险\n        return condition1 and condition2\n        \n    except Exception as e:\n        # 发生任何异常时返回False\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业应收账款周转率降低，存货周转率提高，营业收入增长超过20%。（模型公式编号：191101035）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        ar_turnover_2023 = None\n        ar_turnover_2024 = None\n        inventory_turnover_2023 = None\n        inventory_turnover_2024 = None\n        revenue_growth_2024 = None\n        \n        # 提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            # 只处理企业类型的数据\n            if item_type != '企业':\n                continue\n                \n            if '应收票据、应收账款、应收款项融资及合同资产周转率' in item_name:\n                ar_turnover_2023 = float(item.get('2023', 0))\n                ar_turnover_2024 = float(item.get('2024', 0))\n            elif '存货周转率' in item_name:\n                inventory_turnover_2023 = float(item.get('2023', 0))\n                inventory_turnover_2024 = float(item.get('2024', 0))\n            elif '营业收入增长率' in item_name:\n                revenue_growth_2024 = float(item.get('2024', 0))\n        \n        # 检查数据完整性\n        if (ar_turnover_2023 is None or ar_turnover_2024 is None or \n            inventory_turnover_2023 is None or inventory_turnover_2024 is None or \n            revenue_growth_2024 is None):\n            return False\n        \n        # 验证风险条件\n        # 1. 本年应收账款周转率低于上年\n        condition1 = ar_turnover_2024 < ar_turnover_2023\n        \n        # 2. 本年存货周转率高于上年\n        condition2 = inventory_turnover_2024 > inventory_turnover_2023\n        \n        # 3. 本年营业收入增长率超过20%阈值\n        condition3 = revenue_growth_2024 > 20.0\n        \n        # 所有条件同时满足时存在风险\n        risk_exists = condition1 and condition2 and condition3\n        \n        return risk_exists\n        \n    except (ValueError, TypeError, KeyError, AttributeError) as e:\n        # 处理所有可能的异常情况\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业股本较上年无变动，长期股权投资变动不超过5%，营业收入增长超过30%。（模型公式编号：191101112）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需指标的企业数据\n        equity_growth = None\n        long_term_investment_growth = None\n        revenue_growth = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            # 只处理企业类型的数据\n            if item_type != '企业':\n                continue\n                \n            if item_name == '股本增长率':\n                equity_growth = item.get('2024')\n            elif item_name == '长期股权投资增长率':\n                long_term_investment_growth = item.get('2024')\n            elif item_name == '营业收入增长率':\n                revenue_growth = item.get('2024')\n        \n        # 检查数据是否存在\n        if equity_growth is None or long_term_investment_growth is None or revenue_growth is None:\n            return False\n        \n        # 转换为浮点数\n        equity_growth_val = float(equity_growth)\n        long_term_investment_growth_val = float(long_term_investment_growth)\n        revenue_growth_val = float(revenue_growth)\n        \n        # 验证风险条件\n        condition1 = equity_growth_val == 0.00  # 股本增长率等于0.00\n        condition2 = long_term_investment_growth_val <= 5.00  # 长期股权投资增长率不超过5%\n        condition3 = revenue_growth_val > 30.00  # 营业收入增长率超过30%\n        \n        # 所有条件同时满足时存在风险\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, KeyError, AttributeError):\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "违规资金收付",
    "risk_description": "本年企业银行手续费（财务费用-利息费用+利息收入，未考虑汇兑损益影响）占经营活动现金流出小计、投资活动现金流出小计及筹资活动现金流出小计三项之和的比例超过0.5%。（模型公式编号：191101089）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 提取2024年企业数据\n        financial_expense = None\n        interest_expense = None\n        interest_income = None\n        operating_outflow = None\n        investing_outflow = None\n        financing_outflow = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', None)\n            \n            if item_type != '企业' or value_2024 is None:\n                continue\n                \n            # 转换字符串数值为浮点数\n            try:\n                numeric_value = float(str(value_2024).replace(',', ''))\n            except (ValueError, TypeError):\n                continue\n                \n            if item_name == '财务费用':\n                financial_expense = numeric_value\n            elif item_name == '利息费用':\n                interest_expense = numeric_value\n            elif item_name == '利息收入':\n                interest_income = numeric_value\n            elif item_name == '经营活动现金流出小计':\n                operating_outflow = numeric_value\n            elif item_name == '投资活动现金流出小计':\n                investing_outflow = numeric_value\n            elif item_name == '筹资活动现金流出小计':\n                financing_outflow = numeric_value\n        \n        # 检查所有必需数据是否都存在\n        if None in [financial_expense, interest_expense, interest_income, \n                   operating_outflow, investing_outflow, financing_outflow]:\n            return False\n        \n        # 计算银行手续费和现金流出总和\n        bank_fee = financial_expense - interest_expense + interest_income\n        total_cash_outflow = operating_outflow + investing_outflow + financing_outflow\n        \n        # 避免除零错误\n        if total_cash_outflow == 0:\n            return False\n        \n        # 计算风险比例\n        risk_ratio = bank_fee / total_cash_outflow\n        \n        # 检查是否超过阈值0.5%\n        threshold = 0.005\n        \n        return risk_ratio > threshold\n        \n    except Exception as e:\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "违规资金收付",
    "risk_description": "本年企业其他流动资产增长超过40%，且占资产总计的比重超过行业总体样本中85%的企业。（模型公式编号：191101083）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型数据项\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据\n        growth_rate_item = None\n        company_ratio_item = None\n        industry_ratio_item = None\n        \n        for item in model_items:\n            if item.get('项目名称') == '其他流动资产增长率' and item.get('类型') == '企业':\n                growth_rate_item = item\n            elif item.get('项目名称') == '其他流动资产占资产总计比(%)' and item.get('类型') == '企业':\n                company_ratio_item = item\n            elif item.get('项目名称') == '其他流动资产占资产总计比(%)' and item.get('类型') == '行业':\n                industry_ratio_item = item\n        \n        # 检查数据完整性\n        if not all([growth_rate_item, company_ratio_item, industry_ratio_item]):\n            return False\n        \n        # 获取本年数据\n        growth_rate_2024 = float(growth_rate_item.get('2024', 0))\n        company_ratio_2024 = float(company_ratio_item.get('2024', 0))\n        industry_ratio_2024 = float(industry_ratio_item.get('2024', 0))\n        \n        # 验证风险条件\n        condition1 = growth_rate_2024 > 40  # 本年增长率超过40%\n        condition2 = company_ratio_2024 > industry_ratio_2024  # 企业占比超过行业值（85分位值）\n        \n        # 两个条件同时满足时存在风险\n        return condition1 and condition2\n        \n    except (ValueError, TypeError, KeyError):\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "违规资金收付",
    "risk_description": "本年企业其他流动资产占流动资产合计的比重超过15%。（模型公式编号：191101100）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 从data_dict中获取model_items列表\n        model_items = data_dict.get('model_items', [])\n        \n        # 查找企业类型的数据点\n        enterprise_data = None\n        for item in model_items:\n            if item.get('类型') == '企业':\n                enterprise_data = item\n                break\n        \n        # 如果找不到企业数据，返回False\n        if enterprise_data is None:\n            return False\n        \n        # 获取2024年的其他流动资产占流动资产合计比(%)\n        ratio_2024 = enterprise_data.get('2024')\n        \n        # 如果2024年数据缺失，返回False\n        if ratio_2024 is None:\n            return False\n        \n        # 将字符串转换为浮点数\n        ratio_value = float(ratio_2024)\n        \n        # 判断是否超过15%阈值\n        if ratio_value > 15.0:\n            return True\n        else:\n            return False\n            \n    except (ValueError, TypeError, KeyError):\n        # 处理数据转换错误、类型错误或键错误等异常情况\n        return False\n    except Exception as e:\n        # 处理其他所有可能的异常\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "违规资金收付",
    "risk_description": "以前少计、本年多计成本或费用",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 提取所需数据项\n        interest_expense_data = {}\n        debt_data = {}\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_name == '利息费用' and item_type == '企业':\n                interest_expense_data = item\n            elif item_name == '短长期债务' and item_type == '企业':\n                debt_data = item\n        \n        # 检查数据完整性\n        if not interest_expense_data or not debt_data:\n            return False\n        \n        # 提取具体数值并转换为浮点数\n        interest_2023 = float(interest_expense_data.get('2023', '0').replace(',', ''))\n        interest_2024 = float(interest_expense_data.get('2024', '0').replace(',', ''))\n        debt_2023 = float(debt_data.get('2023', '0').replace(',', ''))\n        debt_2024 = float(debt_data.get('2024', '0').replace(',', ''))\n        \n        # 检查数据有效性\n        if interest_2023 == 0 or debt_2023 == 0:\n            return False\n        \n        # 计算增长率\n        interest_growth_rate = (interest_2024 - interest_2023) / interest_2023\n        debt_change_rate = (debt_2024 - debt_2023) / debt_2023\n        \n        # 应用风险判断条件\n        condition1 = interest_growth_rate > 0.5  # 利息费用同比增长率 > 50%\n        condition2 = debt_change_rate < -0.2    # 债务规模同比下降率 > 20%\n        condition3 = (interest_growth_rate > 0 and debt_change_rate < 0)  # 变动方向不一致\n        \n        # 综合判断风险\n        if condition1 and condition2 and condition3:\n            return True\n        else:\n            return False\n            \n    except (ValueError, TypeError, ZeroDivisionError, AttributeError):\n        return False\n    except Exception as e:\n        return False"
  },
  {
    "company_name": "浙江联翔智能家居股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业营业收入增长超过20%，且大于销售商品和提供劳务收到的现金增长率，同时其差额超过行业均值的3倍。（模型公式编号：191101002）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 从data_dict获取model_items数据\n        model_items = data_dict['model_items']\n        \n        # 初始化所需变量\n        corp_revenue_growth = None\n        industry_revenue_growth = None\n        corp_cash_growth = None\n        industry_cash_growth = None\n        \n        # 提取各项数据\n        for item in model_items:\n            item_name = item['项目名称']\n            item_type = item['类型']\n            \n            if item_name == '营业收入增长率':\n                if item_type == '企业':\n                    corp_revenue_growth = float(item['2024'])\n                elif item_type == '行业':\n                    industry_revenue_growth = float(item['2024'])\n            \n            elif item_name == '销售商品、提供劳务收到的现金增长率':\n                if item_type == '企业':\n                    corp_cash_growth = float(item['2024'])\n                elif item_type == '行业':\n                    industry_cash_growth = float(item['2024'])\n        \n        # 检查数据是否完整\n        if any(x is None for x in [corp_revenue_growth, industry_revenue_growth, \n                                  corp_cash_growth, industry_cash_growth]):\n            return False\n        \n        # 计算差额\n        corp_difference = corp_revenue_growth - corp_cash_growth\n        industry_difference = industry_revenue_growth - industry_cash_growth\n        \n        # 验证风险条件\n        condition1 = corp_revenue_growth > 20\n        condition2 = corp_revenue_growth > corp_cash_growth\n        condition3 = corp_difference > (3 * industry_difference)\n        \n        # 返回风险评估结果\n        return condition1 and condition2 and condition3\n        \n    except (KeyError, TypeError, ValueError):\n        return False"
  },
  {
    "company_name": "浙江联翔智能家居股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业应收账款周转率降低，存货周转率提高，营业收入增长超过20%。（模型公式编号：191101035）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据\n        ar_turnover_2023 = None\n        ar_turnover_2024 = None\n        inventory_turnover_2023 = None\n        inventory_turnover_2024 = None\n        revenue_growth_2024 = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_name == '应收票据、应收账款、应收款项融资及合同资产周转率【次】' and item_type == '企业':\n                ar_turnover_2023 = float(item.get('2023', 0))\n                ar_turnover_2024 = float(item.get('2024', 0))\n            \n            elif item_name == '存货周转率【次】' and item_type == '企业':\n                inventory_turnover_2023 = float(item.get('2023', 0))\n                inventory_turnover_2024 = float(item.get('2024', 0))\n            \n            elif item_name == '营业收入增长率' and item_type == '企业':\n                revenue_growth_2024 = float(item.get('2024', 0))\n        \n        # 检查数据完整性\n        if (ar_turnover_2023 is None or ar_turnover_2024 is None or \n            inventory_turnover_2023 is None or inventory_turnover_2024 is None or \n            revenue_growth_2024 is None):\n            return False\n        \n        # 验证风险条件\n        # 1. 应收账款周转率显著下降（从42.13降至5.84）\n        ar_turnover_decline = ar_turnover_2024 < ar_turnover_2023\n        \n        # 2. 存货周转率有所提升（从1.69升至2.53）\n        inventory_turnover_increase = inventory_turnover_2024 > inventory_turnover_2023\n        \n        # 3. 营业收入增长率大幅提高（从-21.73%升至37.83%），且超过20%\n        revenue_growth_high = revenue_growth_2024 > 20.0\n        \n        # 综合判断：三个条件同时满足时存在风险\n        if ar_turnover_decline and inventory_turnover_increase and revenue_growth_high:\n            return True\n        else:\n            return False\n            \n    except (ValueError, TypeError, KeyError):\n        return False"
  },
  {
    "company_name": "浙江联翔智能家居股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业应收账款增长额占营业收入的比重高于行业总体样本中85%的企业。（模型公式编号：191101061）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取企业和行业数据\n        enterprise_data = None\n        industry_data = None\n        \n        for item in model_items:\n            if item.get('类型') == '企业':\n                enterprise_data = item\n            elif item.get('类型') == '行业':\n                industry_data = item\n        \n        # 检查数据完整性\n        if not enterprise_data or not industry_data:\n            return False\n        \n        # 获取2024年企业数据（本年数据）\n        enterprise_value_2024 = enterprise_data.get('2024')\n        if enterprise_value_2024 is None:\n            return False\n        \n        # 获取行业85%分位数值（直接使用行业数据点的值）\n        industry_percentile_value = industry_data.get('2024')\n        if industry_percentile_value is None:\n            return False\n        \n        # 转换为数值类型\n        enterprise_value = float(enterprise_value_2024)\n        industry_threshold = float(industry_percentile_value)\n        \n        # 验证风险条件：企业值高于行业85%分位数值\n        return enterprise_value > industry_threshold\n        \n    except (ValueError, TypeError, KeyError, AttributeError) as e:\n        # 处理所有可能的异常情况\n        return False"
  },
  {
    "company_name": "浙江联翔智能家居股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业营业收入增长超过20%，营业收入增长率超过销售商品和提供劳务收到的现金增长率的1.5倍。（模型公式编号：210101002）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 从data_dict中获取model_items\n        model_items = data_dict.get('model_items', [])\n        \n        # 如果数据缺失或不足，返回False\n        if not model_items or len(model_items) < 2:\n            return False\n        \n        # 提取所需数据项\n        revenue_growth_rate = None\n        cash_received_growth_rate = None\n        \n        for item in model_items:\n            if item.get('项目名称') == '营业收入增长率':\n                revenue_growth_rate = item.get('2024')\n            elif item.get('项目名称') == '销售商品、提供劳务收到的现金增长率':\n                cash_received_growth_rate = item.get('2024')\n        \n        # 检查数据是否存在\n        if revenue_growth_rate is None or cash_received_growth_rate is None:\n            return False\n        \n        # 转换为数值类型\n        revenue_growth_rate = float(revenue_growth_rate)\n        cash_received_growth_rate = float(cash_received_growth_rate)\n        \n        # 验证风险条件\n        # 1. 本年企业营业收入增长超过20%\n        # 2. 营业收入增长率超过销售商品和提供劳务收到的现金增长率的1.5倍\n        condition1 = revenue_growth_rate > 20\n        condition2 = revenue_growth_rate > 1.5 * cash_received_growth_rate\n        \n        return condition1 and condition2\n        \n    except (ValueError, TypeError, KeyError) as e:\n        # 处理可能的异常情况\n        return False"
  },
  {
    "company_name": "浙江联翔智能家居股份有限公司",
    "risk_category": "少结转主营业务成本",
    "risk_description": "本年企业股本较上年无变动，长期股权投资减少，营业收入增长超过30%。（模型公式编号：191101110）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 如果数据为空，返回False\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        equity_growth_2024 = None\n        investment_growth_2024 = None\n        revenue_growth_2024 = None\n        \n        # 遍历所有项目，提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', '')\n            \n            # 只处理企业类型的数据\n            if item_type != '企业':\n                continue\n                \n            # 转换2024年数据为浮点数\n            try:\n                if value_2024 == '-' or value_2024 == '':\n                    continue\n                numeric_value = float(value_2024)\n            except (ValueError, TypeError):\n                continue\n            \n            # 根据项目名称提取对应数据\n            if item_name == '股本增长率':\n                equity_growth_2024 = numeric_value\n            elif item_name == '长期股权投资增长率':\n                investment_growth_2024 = numeric_value\n            elif item_name == '营业收入增长率':\n                revenue_growth_2024 = numeric_value\n        \n        # 检查所有必需数据是否都存在\n        if equity_growth_2024 is None or investment_growth_2024 is None or revenue_growth_2024 is None:\n            return False\n        \n        # 验证风险条件\n        # 1. 股本增长率 = 0%（本年较上年无变动）\n        condition1 = abs(equity_growth_2024 - 0.0) < 1e-6\n        \n        # 2. 长期股权投资增长率 < 0%（呈现减少趋势）\n        condition2 = investment_growth_2024 < 0.0\n        \n        # 3. 营业收入增长率 > 30%（大幅增长）\n        condition3 = revenue_growth_2024 > 30.0\n        \n        # 三个条件同时满足时触发风险\n        return condition1 and condition2 and condition3\n        \n    except Exception as e as e:\n        # 处理任何异常情况，返回False\n        return False"
  },
  {
    "company_name": "浙江联翔智能家居股份有限公司",
    "risk_category": "少计成本或费用",
    "risk_description": "本年企业营业收入增长超过20%，“经营业务利润”增长率比营业收入增长率高30个百分点以上。（模型公式编号：191101010）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需指标的企业数据\n        revenue_growth = None\n        profit_growth = None\n        \n        for item in model_items:\n            if item.get('项目名称') == '营业收入增长率' and item.get('类型') == '企业':\n                revenue_growth = item.get('2024')\n            elif item.get('项目名称') == '经营业务利润增长率' and item.get('类型') == '企业':\n                profit_growth = item.get('2024')\n        \n        # 检查数据是否存在\n        if revenue_growth is None or profit_growth is None:\n            return False\n        \n        # 转换为数值类型\n        revenue_growth = float(revenue_growth)\n        profit_growth = float(profit_growth)\n        \n        # 验证风险条件\n        condition1 = revenue_growth > 20.0\n        condition2 = (profit_growth - revenue_growth) > 30.0\n        \n        # 同时满足两个条件则存在风险\n        return condition1 and condition2\n        \n    except (ValueError, TypeError, KeyError):\n        return False\n    except Exception as e:\n        return False"
  },
  {
    "company_name": "浙江联翔智能家居股份有限公司",
    "risk_category": "少计成本或费用",
    "risk_description": "以前少计、本年多计信用或资产减值损失",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        model_items = data_dict.get('model_items', [])\n        \n        # 提取所需数据\n        credit_loss_data = None\n        receivables_data = None\n        prepayments_data = None\n        other_receivables_data = None\n        \n        for item in model_items:\n            if item['项目名称'] == '信用减值损失':\n                credit_loss_data = item\n            elif item['项目名称'] == '应收票据、应收账款、应收款项融资及合同资产':\n                receivables_data = item\n            elif item['项目名称'] == '预付款项':\n                prepayments_data = item\n            elif item['项目名称'] == '其他应收款':\n                other_receivables_data = item\n        \n        # 检查数据完整性\n        if not all([credit_loss_data, receivables_data, prepayments_data, other_receivables_data]):\n            return False\n        \n        # 转换数据格式（去除逗号并转换为浮点数）\n        def convert_value(value_str):\n            if isinstance(value_str, str):\n                return float(value_str.replace(',', ''))\n            return float(value_str)\n        \n        credit_loss_2023 = convert_value(credit_loss_data['2023'])\n        credit_loss_2024 = convert_value(credit_loss_data['2024'])\n        receivables_2023 = convert_value(receivables_data['2023'])\n        receivables_2024 = convert_value(receivables_data['2024'])\n        prepayments_2023 = convert_value(prepayments_data['2023'])\n        prepayments_2024 = convert_value(prepayments_data['2024'])\n        other_receivables_2023 = convert_value(other_receivables_data['2023'])\n        other_receivables_2024 = convert_value(other_receivables_data['2024'])\n        \n        # 计算变化率和绝对值\n        credit_loss_change = abs(credit_loss_2024 - credit_loss_2023)\n        receivables_change = receivables_2024 - receivables_2023\n        prepayments_change = prepayments_2024 - prepayments_2023\n        other_receivables_change = other_receivables_2024 - other_receivables_2023\n        \n        # 判断条件\n        condition1 = credit_loss_change > 1000000  # 信用减值损失大幅增加\n        condition2 = receivables_change > 50000000  # 应收款项大幅增加\n        condition3 = other_receivables_change > 2000000  # 其他应收款大幅增加\n        condition4 = prepayments_change < 0  # 预付款项减少\n        \n        # 综合判断风险\n        if condition1 and condition2 and condition3 and condition4:\n            return True\n        else:\n            return False\n            \n    except (KeyError, ValueError, TypeError, AttributeError):\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "企业营业收入连续两年增长，且本年增长率高于行业总体样本中85%的企业。（模型公式编号：191101005）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取企业数据和行业数据\n        enterprise_data = None\n        industry_data = None\n        \n        for item in model_items:\n            if item.get('项目名称') == '营业收入增长率':\n                if item.get('类型') == '企业':\n                    enterprise_data = item\n                elif item.get('类型') == '行业':\n                    industry_data = item\n        \n        # 检查数据完整性\n        if not enterprise_data or not industry_data:\n            return False\n        \n        # 获取企业2023年和2024年增长率\n        growth_2023 = float(enterprise_data.get('2023', 0))\n        growth_2024 = float(enterprise_data.get('2024', 0))\n        \n        # 获取行业2024年85分位数值（直接使用行业数据点的值）\n        industry_85_percentile = float(industry_data.get('2024', 0))\n        \n        # 验证风险条件\n        # 1. 企业2023年营业收入增长率 > 0\n        # 2. 企业2024年营业收入增长率 > 0\n        # 3. 企业2024年营业收入增长率 > 行业85分位数增长率\n        condition1 = growth_2023 > 0\n        condition2 = growth_2024 > 0\n        condition3 = growth_2024 > industry_85_percentile\n        \n        # 所有条件都满足时返回True（存在风险）\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, KeyError, AttributeError):\n        # 处理数据转换错误、类型错误、键错误等异常情况\n        return False\n    except Exception as e:\n        # 处理其他所有可能的异常\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "本年企业营业收入增长超过20%，在建工程增长超过30%，应收账款减少，或增长不到10%。（模型公式编号：191101021）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化各增长率变量\n        revenue_growth = None\n        construction_growth = None\n        receivables_growth = None\n        \n        # 遍历所有项目，提取企业类型的数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', '')\n            \n            # 只处理企业类型的数据\n            if item_type != '企业':\n                continue\n                \n            # 转换2024年数据为浮点数（处理可能的逗号分隔）\n            try:\n                if isinstance(value_2024, str):\n                    value_2024 = float(value_2024.replace(',', ''))\n                else:\n                    value_2024 = float(value_2024)\n            except (ValueError, TypeError):\n                continue\n            \n            # 根据项目名称匹配对应的增长率\n            if '营业收入增长率' in item_name:\n                revenue_growth = value_2024\n            elif '在建工程增长率' in item_name:\n                construction_growth = value_2024\n            elif '应收票据、应收账款、应收款项融资及合同资产增长率' in item_name:\n                receivables_growth = value_2024\n        \n        # 检查所有必要数据是否都存在\n        if revenue_growth is None or construction_growth is None or receivables_growth is None:\n            return False\n        \n        # 应用风险判断条件\n        condition1 = revenue_growth > 20.0  # 营业收入增长率 > 20%\n        condition2 = construction_growth > 30.0  # 在建工程增长率 > 30%\n        condition3 = receivables_growth < 0 or receivables_growth < 10.0  # 应收账款相关项目增长率 < 0 或 < 10%\n        \n        # 所有条件同时满足时返回True（存在风险）\n        return condition1 and condition2 and condition3\n        \n    except Exception as e:\n        # 发生任何异常时返回False\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "本年企业“每元工资提供的营业收入”比前二年均值高1.2倍，营业收入增长超过20%。（模型公式编号：191101056）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        model_items = data_dict.get('model_items', [])\n        \n        # 提取所需数据项\n        wage_revenue_data = {}\n        revenue_growth_data = {}\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_name == '每元工资提供的营业收入' and item_type == '企业':\n                wage_revenue_data = item\n            elif item_name == '营业收入增长率' and item_type == '企业':\n                revenue_growth_data = item\n        \n        # 检查数据完整性\n        if not wage_revenue_data or not revenue_growth_data:\n            return False\n        \n        # 获取本年每元工资提供的营业收入\n        current_wage_revenue = wage_revenue_data.get('2024')\n        if current_wage_revenue is None:\n            return False\n        \n        # 获取前两年数据（2022和2023）\n        prev_year_1 = wage_revenue_data.get('2023')\n        prev_year_2 = wage_revenue_data.get('2022')\n        \n        # 检查前两年数据是否完整\n        if prev_year_1 is None or prev_year_2 is None:\n            return False\n        \n        # 转换为数值类型\n        try:\n            current_wage_revenue = float(current_wage_revenue)\n            prev_year_1 = float(prev_year_1)\n            prev_year_2 = float(prev_year_2)\n        except (ValueError, TypeError):\n            return False\n        \n        # 计算前两年均值\n        prev_years_avg = (prev_year_1 + prev_year_2) / 2\n        \n        # 条件1：本年每元工资提供的营业收入 > 前二年均值 × 1.2\n        condition1 = current_wage_revenue > prev_years_avg * 1.2\n        \n        # 获取本年营业收入增长率\n        current_revenue_growth = revenue_growth_data.get('2024')\n        if current_revenue_growth is None:\n            return False\n        \n        # 转换为数值类型\n        try:\n            current_revenue_growth = float(current_revenue_growth)\n        except (ValueError, TypeError):\n            return False\n        \n        # 条件2：营业收入增长率 > 20%\n        condition2 = current_revenue_growth > 20\n        \n        # 两个条件需同时满足\n        return condition1 and condition2\n        \n    except Exception as e:\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "本年企业“每元固定资产提供的营业收入”超过上年的1.2倍，固定资产减少不到10%，营业收入增长超过20%。（模型公式编号：191101080）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需指标数据\n        fixed_asset_revenue_data = {}\n        fixed_asset_growth_data = {}\n        revenue_growth_data = {}\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_name == '每元固定资产及使用权资产提供的营业收入' and item_type == '企业':\n                fixed_asset_revenue_data['2023'] = float(item.get('2023', 0))\n                fixed_asset_revenue_data['2024'] = float(item.get('2024', 0))\n            \n            elif item_name == '固定资产及使用权资产增长率' and item_type == '企业':\n                fixed_asset_growth_data['2023'] = float(item.get('2023', 0))\n                fixed_asset_growth_data['2024'] = float(item.get('2024', 0))\n            \n            elif item_name == '营业收入增长率' and item_type == '企业':\n                revenue_growth_data['2023'] = float(item.get('2023', 0))\n                revenue_growth_data['2024'] = float(item.get('2024', 0))\n        \n        # 检查数据完整性\n        if (len(fixed_asset_revenue_data) != 2 or \n            len(fixed_asset_growth_data) != 2 or \n            len(revenue_growth_data) != 2):\n            return False\n        \n        # 验证风险条件\n        condition1 = fixed_asset_revenue_data['2024'] > fixed_asset_revenue_data['2023'] * 1.2\n        condition2 = fixed_asset_growth_data['2024'] > -10  # 固定资产减少率 < 10% 等价于 增长率 > -10%\n        condition3 = revenue_growth_data['2024'] > 20\n        \n        # 所有条件同时满足时存在风险\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, KeyError):\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "本年企业固定资产原值增减不超过20%，“每元固定资产原值提供的营业收入”超过上年的1.5倍，营业收入增长超过20%。（模型公式编号：200201001）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据项\n        fixed_asset_growth = None\n        revenue_per_asset = None\n        revenue_growth = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_name == '固定资产及使用权资产原值增长率' and item_type == '企业':\n                fixed_asset_growth = item.get('2024')\n            elif item_name == '每元固定资产及使用权资产原值提供的营业收入' and item_type == '企业':\n                revenue_per_asset = item.get('2024')\n                revenue_per_asset_prev = item.get('2023')\n            elif item_name == '营业收入增长率' and item_type == '企业':\n                revenue_growth = item.get('2024')\n        \n        # 检查数据是否存在\n        if fixed_asset_growth is None or revenue_per_asset is None or revenue_growth is None or revenue_per_asset_prev is None:\n            return False\n        \n        # 转换为数值类型\n        fixed_asset_growth = float(fixed_asset_growth)\n        revenue_per_asset = float(revenue_per_asset)\n        revenue_per_asset_prev = float(revenue_per_asset_prev)\n        revenue_growth = float(revenue_growth)\n        \n        # 验证风险条件\n        condition1 = abs(fixed_asset_growth) <= 20  # 固定资产原值增减不超过20%\n        condition2 = revenue_per_asset > revenue_per_asset_prev * 1.5  # 每元固定资产原值提供的营业收入超过上年的1.5倍\n        condition3 = revenue_growth > 20  # 营业收入增长超过20%\n        \n        # 所有条件同时满足时存在风险\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, KeyError):\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业营业收入增长超过20%，且大于销售商品和提供劳务收到的现金增长率，同时其差额超过行业均值的3倍。（模型公式编号：191101002）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 如果数据缺失或不足，返回False\n        if not model_items or len(model_items) < 4:\n            return False\n        \n        # 初始化各指标值\n        company_revenue_growth = None\n        industry_revenue_growth = None\n        company_cash_growth = None\n        industry_cash_growth = None\n        \n        # 从数据中提取所需指标\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', '')\n            \n            # 跳过空值\n            if not value_2024:\n                continue\n                \n            try:\n                numeric_value = float(value_2024)\n            except (ValueError, TypeError):\n                continue\n            \n            if item_name == '营业收入增长率':\n                if item_type == '企业':\n                    company_revenue_growth = numeric_value\n                elif item_type == '行业':\n                    industry_revenue_growth = numeric_value\n            \n            elif item_name == '销售商品、提供劳务收到的现金增长率':\n                if item_type == '企业':\n                    company_cash_growth = numeric_value\n                elif item_type == '行业':\n                    industry_cash_growth = numeric_value\n        \n        # 检查是否所有必需数据都存在\n        if any(x is None for x in [company_revenue_growth, industry_revenue_growth, \n                                  company_cash_growth, industry_cash_growth]):\n            return False\n        \n        # 验证风险条件\n        condition1 = company_revenue_growth > 20  # 企业本年营业收入增长率 > 20%\n        condition2 = company_revenue_growth > company_cash_growth  # 企业营业收入增长率 > 企业现金增长率\n        condition3 = (company_revenue_growth - company_cash_growth) > 3 * (industry_revenue_growth - industry_cash_growth)\n        \n        # 所有条件都满足时存在风险\n        return condition1 and condition2 and condition3\n        \n    except Exception as e:\n        # 发生任何异常时返回False\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业营业收入增长超过20%，营业收入增长率超过销售商品和提供劳务收到的现金增长率的1.5倍。（模型公式编号：210101002）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        model_items = data_dict['model_items']\n        \n        # 提取所需数据\n        revenue_growth = None\n        cash_growth = None\n        \n        for item in model_items:\n            if item['项目名称'] == '营业收入增长率' and item['类型'] == '企业':\n                revenue_growth = float(item['2024'])\n            elif item['项目名称'] == '销售商品、提供劳务收到的现金增长率' and item['类型'] == '企业':\n                cash_growth = float(item['2024'])\n        \n        # 检查数据是否完整\n        if revenue_growth is None or cash_growth is None:\n            return False\n        \n        # 验证风险条件\n        condition1 = revenue_growth > 20.0\n        condition2 = revenue_growth > 1.5 * cash_growth\n        \n        return condition1 and condition2\n        \n    except (KeyError, TypeError, ValueError, IndexError):\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "少结转主营业务成本",
    "risk_description": "本年企业存货周转率降低，应收账款周转率提高，营业收入增长超过20%。（模型公式编号：191101033）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        inventory_turnover_2023 = None\n        inventory_turnover_2024 = None\n        receivables_turnover_2023 = None\n        receivables_turnover_2024 = None\n        revenue_growth_2024 = None\n        \n        # 提取各项指标数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if '存货周转率' in item_name and item_type == '企业':\n                inventory_turnover_2023 = float(item.get('2023', 0))\n                inventory_turnover_2024 = float(item.get('2024', 0))\n            \n            elif ('应收' in item_name and '周转率' in item_name) and item_type == '企业':\n                receivables_turnover_2023 = float(item.get('2023', 0))\n                receivables_turnover_2024 = float(item.get('2024', 0))\n            \n            elif '营业收入增长率' in item_name and item_type == '企业':\n                revenue_growth_2024 = float(item.get('2024', 0))\n        \n        # 检查数据完整性\n        if (inventory_turnover_2023 is None or inventory_turnover_2024 is None or\n            receivables_turnover_2023 is None or receivables_turnover_2024 is None or\n            revenue_growth_2024 is None):\n            return False\n        \n        # 验证风险条件\n        condition1 = inventory_turnover_2024 < inventory_turnover_2023  # 存货周转率降低\n        condition2 = receivables_turnover_2024 > receivables_turnover_2023  # 应收账款周转率提高\n        condition3 = revenue_growth_2024 > 20  # 营业收入增长超过20%\n        \n        # 所有条件同时满足时返回True\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, KeyError):\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "少结转主营业务成本",
    "risk_description": "本年企业应收账款周转率与存货周转率均不到行业均值的90%，毛利率比行业均值高10个百分点以上。（模型公式编号：191101045）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 如果数据为空，返回False\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        enterprise_ar_turnover = None\n        industry_ar_turnover = None\n        enterprise_inventory_turnover = None\n        industry_inventory_turnover = None\n        enterprise_gross_margin = None\n        industry_gross_margin = None\n        \n        # 遍历所有项目提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', None)\n            \n            # 跳过缺失2024年数据的项目\n            if value_2024 is None:\n                continue\n            \n            # 尝试将字符串转换为浮点数\n            try:\n                numeric_value = float(value_2024)\n            except (ValueError, TypeError):\n                continue\n            \n            # 根据项目名称和类型识别数据\n            if '应收票据、应收账款、应收款项融资及合同资产周转率' in item_name:\n                if item_type == '企业':\n                    enterprise_ar_turnover = numeric_value\n                elif item_type == '行业':\n                    industry_ar_turnover = numeric_value\n            \n            elif '存货周转率' in item_name:\n                if item_type == '企业':\n                    enterprise_inventory_turnover = numeric_value\n                elif item_type == '行业':\n                    industry_inventory_turnover = numeric_value\n            \n            elif '销售毛利率' in item_name:\n                if item_type == '企业':\n                    enterprise_gross_margin = numeric_value\n                elif item_type == '行业':\n                    industry_gross_margin = numeric_value\n        \n        # 检查所有必需数据是否都存在\n        if (enterprise_ar_turnover is None or industry_ar_turnover is None or\n            enterprise_inventory_turnover is None or industry_inventory_turnover is None or\n            enterprise_gross_margin is None or industry_gross_margin is None):\n            return False\n        \n        # 验证三个风险条件\n        condition1 = enterprise_ar_turnover < industry_ar_turnover * 0.9\n        condition2 = enterprise_inventory_turnover < industry_inventory_turnover * 0.9\n        condition3 = enterprise_gross_margin > industry_gross_margin + 10\n        \n        # 三个条件必须同时满足才存在风险\n        return condition1 and condition2 and condition3\n        \n    except Exception as e:\n        # 处理任何可能的异常，返回False\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "少结转主营业务成本",
    "risk_description": "本年企业存货增长率超过营业成本增长率的1.2倍，存货期末余额超过营业成本的1.2倍。（模型公式编号：210601002）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        model_items = data_dict.get('model_items', [])\n        \n        # 提取所需数据项\n        inventory_growth_rate = None\n        cost_growth_rate = None\n        inventory_balance = None\n        operating_cost = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', None)\n            \n            if value_2024 is None:\n                continue\n                \n            # 转换数值格式（处理逗号分隔符）\n            try:\n                if isinstance(value_2024, str):\n                    value_2024 = float(value_2024.replace(',', ''))\n                else:\n                    value_2024 = float(value_2024)\n            except (ValueError, TypeError):\n                continue\n                \n            if item_name == '存货增长率' and item_type == '企业':\n                inventory_growth_rate = value_2024\n            elif item_name == '营业成本增长率' and item_type == '企业':\n                cost_growth_rate = value_2024\n            elif item_name == '存货' and item_type == '企业':\n                inventory_balance = value_2024\n            elif item_name == '营业成本' and item_type == '企业':\n                operating_cost = value_2024\n        \n        # 检查数据完整性\n        if None in [inventory_growth_rate, cost_growth_rate, inventory_balance, operating_cost]:\n            return False\n        \n        # 验证风险条件\n        condition1 = inventory_growth_rate > cost_growth_rate * 1.2\n        condition2 = inventory_balance > operating_cost * 1.2\n        \n        return condition1 and condition2\n        \n    except Exception as e:\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "与供应商存在潜在关联关系",
    "risk_description": "本年企业销售商品、提供劳务收到的现金超过含税营业收入，应付票据及应付账款增长，或减少不到10%。（模型公式编号：191101025）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 定义所需数据变量\n        revenue_2024 = None\n        cash_received_2024 = None\n        payables_growth_2024 = None\n        vat_rate = 0.13  # 默认增值税税率13%\n        \n        # 提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', None)\n            \n            if value_2024 is None:\n                continue\n                \n            # 转换数值类型\n            try:\n                if item_name in ['营业收入', '销售商品、提供劳务收到的现金']:\n                    numeric_value = float(str(value_2024).replace(',', ''))\n                else:\n                    numeric_value = float(value_2024)\n            except (ValueError, TypeError):\n                continue\n            \n            # 分配数据到对应变量\n            if item_name == '营业收入':\n                revenue_2024 = numeric_value\n            elif item_name == '销售商品、提供劳务收到的现金':\n                cash_received_2024 = numeric_value\n            elif item_name == '应付票据及应付账款增长率':\n                payables_growth_2024 = numeric_value\n        \n        # 检查数据完整性\n        if revenue_2024 is None or cash_received_2024 is None or payables_growth_2024 is None:\n            return False\n        \n        # 计算含税营业收入\n        tax_included_revenue = revenue_2024 * (1 + vat_rate)\n        \n        # 验证风险条件\n        condition1 = cash_received_2024 > tax_included_revenue\n        condition2 = -10 <= payables_growth_2024 <= 10\n        \n        return condition1 and condition2\n        \n    except Exception as e:\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "违规资金收付",
    "risk_description": "本年企业收到的其他与经营活动有关的现金占经营活动现金流入小计的比重高于行业总体样本中85%的企业。（模型公式编号：191101075）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取企业和行业数据\n        enterprise_data = None\n        industry_data = None\n        \n        for item in model_items:\n            if item.get('项目名称') == '收到其他与经营活动有关的现金占经营活动现金流入小计比(%)':\n                if item.get('类型') == '企业':\n                    enterprise_data = item\n                elif item.get('类型') == '行业':\n                    industry_data = item\n        \n        # 检查数据完整性\n        if enterprise_data is None or industry_data is None:\n            return False\n        \n        # 获取企业本年(2024年)数据\n        enterprise_value_2024 = enterprise_data.get('2024')\n        if enterprise_value_2024 is None:\n            return False\n        \n        # 获取行业85分位数数据（直接使用行业数据点的值）\n        industry_percentile_85 = industry_data.get('2024')\n        if industry_percentile_85 is None:\n            return False\n        \n        # 转换为数值类型\n        enterprise_value = float(enterprise_value_2024)\n        industry_threshold = float(industry_percentile_85)\n        \n        # 判断风险：企业值高于行业85分位数\n        return enterprise_value > industry_threshold\n        \n    except (ValueError, TypeError, KeyError, AttributeError):\n        return False"
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "本年企业“每元固定资产提供的营业收入”超过上年的1.2倍，固定资产减少不到10%，营业收入增长超过20%。（模型公式编号：191101080）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        revenue_per_fixed_asset_2023 = None\n        revenue_per_fixed_asset_2024 = None\n        fixed_asset_growth_2024 = None\n        revenue_growth_2024 = None\n        \n        # 提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_name == '每元固定资产及使用权资产提供的营业收入' and item_type == '企业':\n                revenue_per_fixed_asset_2023 = item.get('2023')\n                revenue_per_fixed_asset_2024 = item.get('2024')\n            \n            elif item_name == '固定资产及使用权资产增长率' and item_type == '企业':\n                fixed_asset_growth_2024 = item.get('2024')\n            \n            elif item_name == '营业收入增长率' and item_type == '企业':\n                revenue_growth_2024 = item.get('2024')\n        \n        # 检查数据完整性\n        if (revenue_per_fixed_asset_2023 is None or revenue_per_fixed_asset_2024 is None or \n            fixed_asset_growth_2024 is None or revenue_growth_2024 is None):\n            return False\n        \n        # 转换数据类型\n        revenue_per_fixed_asset_2023 = float(revenue_per_fixed_asset_2023)\n        revenue_per_fixed_asset_2024 = float(revenue_per_fixed_asset_2024)\n        fixed_asset_growth_2024 = float(fixed_asset_growth_2024) / 100  # 转换为小数\n        revenue_growth_2024 = float(revenue_growth_2024) / 100  # 转换为小数\n        \n        # 验证三个条件\n        condition1 = revenue_per_fixed_asset_2024 > revenue_per_fixed_asset_2023 * 1.2\n        condition2 = fixed_asset_growth_2024 > -0.1  # 固定资产减少不到10%\n        condition3 = revenue_growth_2024 > 0.2  # 营业收入增长超过20%\n        \n        # 三个条件需同时满足\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, AttributeError):\n        return False"
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业应收账款周转率降低，存货周转率提高，营业收入增长超过20%。（模型公式编号：191101035）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 检查数据是否足够\n        if len(model_items) < 3:\n            return False\n        \n        # 提取所需数据项\n        ar_turnover_data = None\n        inventory_turnover_data = None\n        revenue_growth_data = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            \n            if '应收票据、应收账款、应收款项融资及合同资产周转率' in item_name:\n                ar_turnover_data = item\n            elif '存货周转率' in item_name:\n                inventory_turnover_data = item\n            elif '营业收入增长率' in item_name:\n                revenue_growth_data = item\n        \n        # 检查所有必需数据是否存在\n        if not all([ar_turnover_data, inventory_turnover_data, revenue_growth_data]):\n            return False\n        \n        # 提取具体数值\n        ar_turnover_2023 = float(ar_turnover_data.get('2023', 0))\n        ar_turnover_2024 = float(ar_turnover_data.get('2024', 0))\n        \n        inventory_turnover_2023 = float(inventory_turnover_data.get('2023', 0))\n        inventory_turnover_2024 = float(inventory_turnover_data.get('2024', 0))\n        \n        revenue_growth_2024 = float(revenue_growth_data.get('2024', 0))\n        \n        # 验证风险条件\n        condition1 = ar_turnover_2024 < ar_turnover_2023  # 应收账款周转率降低\n        condition2 = inventory_turnover_2024 > inventory_turnover_2023  # 存货周转率提高\n        condition3 = revenue_growth_2024 > 20  # 营业收入增长超过20%\n        \n        # 所有条件同时满足时存在风险\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, KeyError, AttributeError):\n        return False"
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "货币资金错报",
    "risk_description": "本年企业货币资金超过“短长期债务”的5倍，股本无变动或增长不到1%，资本公积无变动或增长不到5%。（模型公式编号：191101103）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 提取所需的企业数据\n        monetary_fund = None\n        short_long_debt = None\n        equity_growth_rate = None\n        capital_reserve_growth_rate = None\n        \n        for item in model_items:\n            if item.get('项目名称') == '货币资金' and item.get('类型') == '企业':\n                monetary_fund = float(item.get('2024', '0').replace(',', ''))\n            elif item.get('项目名称') == '短长期债务' and item.get('类型') == '企业':\n                short_long_debt = float(item.get('2024', '0').replace(',', ''))\n            elif item.get('项目名称') == '股本增长率' and item.get('类型') == '企业':\n                equity_growth_rate = float(item.get('2024', '0').replace(',', ''))\n            elif item.get('项目名称') == '资本公积增长率' and item.get('类型') == '企业':\n                capital_reserve_growth_rate = float(item.get('2024', '0').replace(',', ''))\n        \n        # 检查数据是否完整\n        if any(x is None for x in [monetary_fund, short_long_debt, equity_growth_rate, capital_reserve_growth_rate]):\n            return False\n        \n        # 验证风险条件\n        condition1 = monetary_fund > 5 * short_long_debt\n        condition2 = equity_growth_rate <= 0.01  # 1%\n        condition3 = capital_reserve_growth_rate <= 0.05  # 5%\n        \n        # 三个条件需同时满足\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, AttributeError, KeyError):\n        return False"
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "少计成本或费用",
    "risk_description": "本年企业营业收入增长超过20%，“经营业务利润”增长率比营业收入增长率高30个百分点以上。（模型公式编号：191101010）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据\n        revenue_growth = None\n        profit_growth = None\n        \n        for item in model_items:\n            if item['项目名称'] == '营业收入增长率' and item['类型'] == '企业':\n                revenue_growth = item.get('2024')\n            elif item['项目名称'] == '经营业务利润增长率' and item['类型'] == '企业':\n                profit_growth = item.get('2024')\n        \n        # 检查数据是否存在\n        if revenue_growth is None or profit_growth is None:\n            return False\n        \n        # 转换为数值类型\n        revenue_growth_val = float(revenue_growth)\n        profit_growth_val = float(profit_growth)\n        \n        # 验证风险条件\n        condition1 = revenue_growth_val > 20  # 营业收入增长率 > 20%\n        condition2 = (profit_growth_val - revenue_growth_val) > 30  # 利润增长率比收入增长率高30个百分点\n        \n        # 两个条件同时满足时存在风险\n        return condition1 and condition2\n        \n    except (ValueError, TypeError, KeyError):\n        # 处理数据转换错误或键缺失的情况\n        return False\n    except Exception as e:\n        # 处理其他所有异常\n        return False"
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "少计成本或费用",
    "risk_description": "企业总资产周转率连续两年不到行业均值的90%，本年毛利率超过行业均值的1.1倍，本年营业利润为正，且较上年增长。（模型公式编号：191101051）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n            \n        # 提取所需数据\n        data_map = {}\n        for item in model_items:\n            name = item['项目名称']\n            type_ = item['类型']\n            key = f\"{name}_{type_}\"\n            data_map[key] = item\n        \n        # 获取企业数据\n        tat_company_2023 = float(data_map.get('总资产周转率_企业', {}).get('2023', 0))\n        tat_company_2024 = float(data_map.get('总资产周转率_企业', {}).get('2024', 0))\n        gross_margin_company_2024 = float(data_map.get('销售毛利率_企业', {}).get('2024', 0))\n        op_company_2024 = float(data_map.get('营业利润_企业', {}).get('2024', 0).replace(',', ''))\n        op_growth_company_2024 = float(data_map.get('营业利润增长率_企业', {}).get('2024', 0))\n        \n        # 获取行业数据\n        tat_industry_2023 = float(data_map.get('总资产周转率_行业', {}).get('2023', 0))\n        tat_industry_2024 = float(data_map.get('总资产周转率_行业', {}).get('2024', 0))\n        gross_margin_industry_2024 = float(data_map.get('销售毛利率_行业', {}).get('2024', 0))\n        \n        # 验证条件\n        condition1 = tat_company_2023 < tat_industry_2023 * 0.9\n        condition2 = tat_company_2024 < tat_industry_2024 * 0.9\n        condition3 = gross_margin_company_2024 > gross_margin_industry_2024 * 1.1\n        condition4 = op_company_2024 > 0\n        condition5 = op_growth_company_2024 > 0\n        \n        # 所有条件都满足时返回True\n        return condition1 and condition2 and condition3 and condition4 and condition5\n        \n    except (KeyError, ValueError, TypeError, AttributeError):\n        return False"
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "与关联方易货交易",
    "risk_description": "企业销售商品、提供劳务收到的现金连续两年不到含税营业收入的80%，本年应付票据及应付账款减少，或增长不到10%。（模型公式编号：191101024）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据项\n        revenue_data = {}\n        cash_received_data = {}\n        payables_growth_data = {}\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_name == '营业收入' and item_type == '企业':\n                revenue_data['2023'] = float(item.get('2023', 0).replace(',', '')) if item.get('2023') else 0\n                revenue_data['2024'] = float(item.get('2024', 0).replace(',', '')) if item.get('2024') else 0\n            \n            elif item_name == '销售商品、提供劳务收到的现金' and item_type == '企业':\n                cash_received_data['2023'] = float(item.get('2023', 0).replace(',', '')) if item.get('2023') else 0\n                cash_received_data['2024'] = float(item.get('2024', 0).replace(',', '')) if item.get('2024') else 0\n            \n            elif item_name == '应付票据及应付账款增长率' and item_type == '企业':\n                payables_growth_data['2024'] = float(item.get('2024', 0)) if item.get('2024') else 0\n        \n        # 检查数据完整性\n        if (not revenue_data or '2023' not in revenue_data or '2024' not in revenue_data or\n            not cash_received_data or '2023' not in cash_received_data or '2024' not in cash_received_data or\n            not payables_growth_data or '2024' not in payables_growth_data):\n            return False\n        \n        # 条件1：销售商品、提供劳务收到的现金连续两年不到含税营业收入的80%\n        tax_rate = 1.13  # 13%增值税率\n        \n        # 计算2023年现金收入比\n        cash_ratio_2023 = cash_received_data['2023'] / (revenue_data['2023'] * tax_rate)\n        condition1_2023 = cash_ratio_2023 < 0.8\n        \n        # 计算2024年现金收入比\n        cash_ratio_2024 = cash_received_data['2024'] / (revenue_data['2024'] * tax_rate)\n        condition1_2024 = cash_ratio_2024 < 0.8\n        \n        # 连续两年满足条件\n        condition1 = condition1_2023 and condition1_2024\n        \n        # 条件2：本年应付票据及应付账款减少或增长不到10%\n        payables_growth_2024 = payables_growth_data['2024']\n        condition2 = payables_growth_2024 < 0 or payables_growth_2024 < 0.1\n        \n        # 风险触发：两个条件同时满足\n        return condition1 and condition2\n        \n    except (ValueError, TypeError, ZeroDivisionError, KeyError):\n        return False\n    except Exception as e:\n        return False"
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "信用或资产减值损失错报",
    "risk_description": "本年企业资产减值损失为负值，上年为正值；或本年为正值，上年为负值。（注：由于利润表格式的变化，请自行确认该值系统取数正负号是否正确。）（模型公式编号：210601008）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 从data_dict中获取model_items数据\n        model_items = data_dict['model_items']\n        \n        # 查找资产减值损失的企业数据\n        current_year_value = None\n        previous_year_value = None\n        \n        for item in model_items:\n            if item['项目名称'] == '资产减值损失' and item['类型'] == '企业':\n                # 获取2024年（本年）数据\n                if '2024' in item and item['2024']:\n                    current_year_value = float(str(item['2024']).replace(',', ''))\n                \n                # 获取2023年（上年）数据\n                if '2023' in item and item['2023']:\n                    previous_year_value = float(str(item['2023']).replace(',', ''))\n                \n                break\n        \n        # 检查数据是否完整\n        if current_year_value is None or previous_year_value is None:\n            return False\n        \n        # 判断风险条件：本年与上年符号相反\n        # (本年值 < 0 AND 上年值 > 0) OR (本年值 > 0 AND 上年值 < 0)\n        if (current_year_value < 0 and previous_year_value > 0) or (current_year_value > 0 and previous_year_value < 0):\n            return True\n        else:\n            return False\n            \n    except (KeyError, ValueError, TypeError, AttributeError):\n        # 处理各种可能的异常情况\n        return False"
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "信用或资产减值损失错报",
    "risk_description": "本年企业存货增长超过10%，存货周转率较上年提高，本年存货周转率高于行业总体样本中85%的企业。（模型公式编号：191101048）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据\n        inventory_growth_rate = None\n        inventory_turnover_2023 = None\n        inventory_turnover_2024 = None\n        industry_inventory_turnover_2024 = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_name == '存货增长率' and item_type == '企业':\n                inventory_growth_rate = item.get('2024')\n            \n            elif item_name == '存货周转率【次】':\n                if item_type == '企业':\n                    inventory_turnover_2023 = item.get('2023')\n                    inventory_turnover_2024 = item.get('2024')\n                elif item_type == '行业':\n                    industry_inventory_turnover_2024 = item.get('2024')\n        \n        # 检查数据完整性\n        if any(x is None for x in [inventory_growth_rate, inventory_turnover_2023, \n                                  inventory_turnover_2024, industry_inventory_turnover_2024]):\n            return False\n        \n        # 转换为数值类型\n        inventory_growth_rate = float(inventory_growth_rate)\n        inventory_turnover_2023 = float(inventory_turnover_2023)\n        inventory_turnover_2024 = float(inventory_turnover_2024)\n        industry_inventory_turnover_2024 = float(industry_inventory_turnover_2024)\n        \n        # 验证三个条件\n        condition1 = inventory_growth_rate > 10.0  # 本年存货增长率 > 10%\n        condition2 = inventory_turnover_2024 > inventory_turnover_2023  # 本年存货周转率 > 上年存货周转率\n        condition3 = inventory_turnover_2024 > industry_inventory_turnover_2024  # 本年存货周转率 > 行业值\n        \n        # 所有条件都满足时返回True（存在风险）\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, KeyError):\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "本年企业营业收入增长超过20%，应收账款周转率高于行业总体样本中85%的企业。（模型公式编号：191101030）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        enterprise_revenue_growth = None\n        enterprise_receivable_turnover = None\n        industry_receivable_turnover = None\n        \n        # 遍历model_items提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', None)\n            \n            if value_2024 is None:\n                continue\n                \n            try:\n                numeric_value = float(value_2024)\n            except (ValueError, TypeError):\n                continue\n            \n            if item_name == '营业收入增长率' and item_type == '企业':\n                enterprise_revenue_growth = numeric_value\n            \n            elif (item_name == '应收票据、应收账款、应收款项融资及合同资产周转率【次】' and \n                  item_type == '企业'):\n                enterprise_receivable_turnover = numeric_value\n            \n            elif (item_name == '应收票据、应收账款、应收款项融资及合同资产周转率【次】' and \n                  item_type == '行业'):\n                industry_receivable_turnover = numeric_value\n        \n        # 检查数据是否完整\n        if (enterprise_revenue_growth is None or \n            enterprise_receivable_turnover is None or \n            industry_receivable_turnover is None):\n            return False\n        \n        # 验证风险条件\n        condition1 = enterprise_revenue_growth > 20.0\n        condition2 = enterprise_receivable_turnover > industry_receivable_turnover\n        \n        return condition1 and condition2\n        \n    except Exception as e:\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "本年企业应收账款周转率和存货周转率之比超过5，比行业均值之比大2。（模型公式编号：231201007）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 从data_dict中获取model_items数据\n        model_items = data_dict['model_items']\n        \n        # 初始化变量\n        enterprise_ar_turnover = None\n        enterprise_inventory_turnover = None\n        industry_ar_turnover = None\n        industry_inventory_turnover = None\n        \n        # 遍历所有项目，提取所需数据\n        for item in model_items:\n            item_name = item['项目名称']\n            item_type = item['类型']\n            year_2024 = float(item['2024']) if item['2024'] else None\n            \n            # 提取企业应收账款周转率\n            if item_type == '企业' and '应收账款周转率' in item_name:\n                enterprise_ar_turnover = year_2024\n            \n            # 提取企业存货周转率\n            elif item_type == '企业' and '存货周转率' in item_name:\n                enterprise_inventory_turnover = year_2024\n            \n            # 提取行业应收账款周转率\n            elif item_type == '行业' and '应收账款周转率' in item_name:\n                industry_ar_turnover = year_2024\n            \n            # 提取行业存货周转率\n            elif item_type == '行业' and '存货周转率' in item_name:\n                industry_inventory_turnover = year_2024\n        \n        # 检查数据是否完整\n        if None in [enterprise_ar_turnover, enterprise_inventory_turnover, \n                   industry_ar_turnover, industry_inventory_turnover]:\n            return False\n        \n        # 计算企业应收账款周转率与存货周转率的比值\n        enterprise_ratio = enterprise_ar_turnover / enterprise_inventory_turnover\n        \n        # 计算行业应收账款周转率与存货周转率的比值\n        industry_ratio = industry_ar_turnover / industry_inventory_turnover\n        \n        # 检查风险条件\n        condition1 = enterprise_ratio > 5\n        condition2 = (enterprise_ratio - industry_ratio) > 2\n        \n        # 返回风险判断结果\n        return condition1 and condition2\n        \n    except (KeyError, TypeError, ValueError, ZeroDivisionError):\n        # 处理数据缺失、类型错误、除零错误等异常情况\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业营业收入增长超过20%，且高于销售商品和提供劳务收到的现金增长率的1.1倍，行业营业收入增长率均值低于销售商品和提供劳务收到的现金增长率均值。（模型公式编号：191101003）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 从data_dict中获取model_items数据\n        model_items = data_dict['model_items']\n        \n        # 初始化所需变量\n        enterprise_revenue_growth = None\n        enterprise_cash_growth = None\n        industry_revenue_growth = None\n        industry_cash_growth = None\n        \n        # 遍历model_items提取所需数据\n        for item in model_items:\n            item_name = item['项目名称']\n            item_type = item['类型']\n            \n            if item_name == '营业收入增长率':\n                if item_type == '企业':\n                    enterprise_revenue_growth = float(item['2024'])\n                elif item_type == '行业':\n                    industry_revenue_growth = float(item['2024'])\n            \n            elif item_name == '销售商品、提供劳务收到的现金增长率':\n                if item_type == '企业':\n                    enterprise_cash_growth = float(item['2024'])\n                elif item_type == '行业':\n                    industry_cash_growth = float(item['2024'])\n        \n        # 检查是否有任何数据缺失\n        if (enterprise_revenue_growth is None or enterprise_cash_growth is None or \n            industry_revenue_growth is None or industry_cash_growth is None):\n            return False\n        \n        # 验证风险条件\n        condition1 = enterprise_revenue_growth > 20.0\n        condition2 = enterprise_revenue_growth > (enterprise_cash_growth * 1.1)\n        condition3 = industry_revenue_growth < industry_cash_growth\n        \n        # 所有条件都满足时返回True，否则返回False\n        return condition1 and condition2 and condition3\n        \n    except (KeyError, TypeError, ValueError, IndexError):\n        # 处理数据缺失、类型错误、值错误等异常情况\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业营业收入增长超过20%，营业收入增长率超过销售商品和提供劳务收到的现金增长率的1.5倍。（模型公式编号：210101002）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 提取所需的企业数据\n        revenue_growth_rate = None\n        cash_received_growth_rate = None\n        \n        for item in model_items:\n            if item.get('类型') == '企业':\n                if item.get('项目名称') == '营业收入增长率':\n                    revenue_growth_rate = float(item.get('2024', 0))\n                elif item.get('项目名称') == '销售商品、提供劳务收到的现金增长率':\n                    cash_received_growth_rate = float(item.get('2024', 0))\n        \n        # 检查数据是否完整\n        if revenue_growth_rate is None or cash_received_growth_rate is None:\n            return False\n        \n        # 验证风险条件\n        condition1 = revenue_growth_rate > 20  # 营业收入增长率超过20%\n        condition2 = revenue_growth_rate > (cash_received_growth_rate * 1.5)  # 营业收入增长率超过现金增长率的1.5倍\n        \n        # 同时满足两个条件则存在风险\n        return condition1 and condition2\n        \n    except (ValueError, TypeError, KeyError, AttributeError):\n        # 处理任何可能的异常情况\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "与供应商存在潜在关联关系",
    "risk_description": "本年企业不含税应付票据及应付账款超过存货，在建工程减少或增长不到10%，且应付票据及应付账款占总资产比重超过行业均值。（模型公式编号：191101101）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 从data_dict中获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 提取所需的企业数据和行业数据\n        enterprise_data = {}\n        industry_data = {}\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_type == '企业':\n                enterprise_data[item_name] = item\n            elif item_type == '行业':\n                industry_data[item_name] = item\n        \n        # 检查必要数据是否存在\n        required_enterprise_items = ['应付票据及应付账款（不含税）', '存货', '在建工程', '总资产']\n        required_industry_items = ['行业应付票据及应付账款占总资产比重均值']\n        \n        # 验证企业数据完整性\n        for item_name in required_enterprise_items:\n            if item_name not in enterprise_data:\n                return False\n        \n        # 验证行业数据完整性\n        for item_name in required_industry_items:\n            if item_name not in industry_data:\n                return False\n        \n        # 提取企业数据值\n        accounts_payable = float(enterprise_data['应付票据及应付账款（不含税）'].get('2024', '0').replace(',', ''))\n        inventory = float(enterprise_data['存货'].get('2024', '0').replace(',', ''))\n        construction_in_progress_2024 = float(enterprise_data['在建工程'].get('2024', '0').replace(',', ''))\n        total_assets = float(enterprise_data['总资产'].get('2024', '0').replace(',', ''))\n        \n        # 提取在建工程2023年数据（用于变化率计算）\n        construction_in_progress_2023_str = enterprise_data['在建工程'].get('2023', '0')\n        construction_in_progress_2023 = float(construction_in_progress_2023_str.replace(',', '')) if construction_in_progress_2023_str else 0\n        \n        # 提取行业均值\n        industry_ratio = float(industry_data['行业应付票据及应付账款占总资产比重均值'].get('2024', '0').replace(',', ''))\n        \n        # 条件1: 本年企业不含税应付票据及应付账款 > 存货\n        condition1 = accounts_payable > inventory\n        \n        # 条件2: 在建工程年度变化率 <= 10%\n        if construction_in_progress_2023 != 0:\n            change_rate = (construction_in_progress_2024 - construction_in_progress_2023) / abs(construction_in_progress_2023)\n            condition2 = abs(change_rate) <= 0.10\n        else:\n            # 如果2023年在建工程为0，则无法计算变化率，默认满足条件\n            condition2 = True\n        \n        # 条件3: 应付票据及应付账款占总资产比重 > 行业均值\n        if total_assets != 0:\n            enterprise_ratio = accounts_payable / total_assets\n            condition3 = enterprise_ratio > industry_ratio\n        else:\n            condition3 = False\n        \n        # 所有条件都满足时返回True（存在风险）\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, ZeroDivisionError, AttributeError, KeyError):\n        # 处理所有可能的异常情况\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "违规资金收付",
    "risk_description": "本年企业收到的其他与经营活动有关的现金占经营活动现金流入小计的比重高于行业总体样本中85%的企业。（模型公式编号：191101075）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 从data_dict中获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 提取企业数据和行业数据\n        enterprise_data = {}\n        industry_data = {}\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', '')\n            \n            if item_type == '企业':\n                enterprise_data[item_name] = value_2024\n            elif item_type == '行业':\n                industry_data[item_name] = value_2024\n        \n        # 检查所需数据是否存在\n        required_enterprise_items = ['收到的其他与经营活动有关的现金', '经营活动现金流入小计']\n        required_industry_items = ['收到的其他与经营活动有关的现金占经营活动现金流入小计的比例']\n        \n        # 验证企业数据是否完整\n        for item in required_enterprise_items:\n            if item not in enterprise_data:\n                return False\n        \n        # 验证行业数据是否完整\n        for item in required_industry_items:\n            if item not in industry_data:\n                return False\n        \n        # 提取具体数值并转换为浮点数\n        other_operating_cash = float(str(enterprise_data['收到的其他与经营活动有关的现金']).replace(',', ''))\n        total_operating_cash_inflow = float(str(enterprise_data['经营活动现金流入小计']).replace(',', ''))\n        industry_percentile_85 = float(str(industry_data['收到的其他与经营活动有关的现金占经营活动现金流入小计的比例']))\n        \n        # 计算企业比例\n        if total_operating_cash_inflow == 0:\n            return False\n            \n        enterprise_ratio = (other_operating_cash / total_operating_cash_inflow) * 100\n        \n        # 验证风险条件：企业比例是否超过行业85%分位数\n        return enterprise_ratio > industry_percentile_85\n        \n    except (ValueError, TypeError, KeyError, ZeroDivisionError):\n        return False\n    except Exception as e:\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "违规资金收付",
    "risk_description": "本年企业管理费用占营业收入的比重较上年的变动值比行业的变动值高5个百分点。（模型公式编号：191101070）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取企业和行业数据\n        enterprise_data = None\n        industry_data = None\n        \n        for item in model_items:\n            if item.get('项目名称') == '管理费用占营业收入比(%)':\n                if item.get('类型') == '企业':\n                    enterprise_data = item\n                elif item.get('类型') == '行业':\n                    industry_data = item\n        \n        # 检查数据完整性\n        if not enterprise_data or not industry_data:\n            return False\n        \n        # 提取具体数值\n        ent_2023 = float(enterprise_data.get('2023', 0))\n        ent_2024 = float(enterprise_data.get('2024', 0))\n        ind_2023 = float(industry_data.get('2023', 0))\n        ind_2024 = float(industry_data.get('2024', 0))\n        \n        # 计算变动值\n        enterprise_change = ent_2024 - ent_2023\n        industry_change = ind_2024 - ind_2023\n        \n        # 计算变动值差异\n        change_difference = enterprise_change - industry_change\n        \n        # 判断风险条件\n        return change_difference > 5\n        \n    except (ValueError, TypeError, KeyError):\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "信用或资产减值损失错报",
    "risk_description": "本年企业在建工程较上年变动不超过10%，在建工程占资产总计的比重高于行业总体样本中85%的企业。（模型公式编号：210601022）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取企业数据和行业数据\n        enterprise_growth_rate = None\n        enterprise_ratio = None\n        industry_ratio = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_name == '在建工程增长率' and item_type == '企业':\n                enterprise_growth_rate = item.get('2024')\n            elif item_name == '在建工程占资产总计比(%)' and item_type == '企业':\n                enterprise_ratio = item.get('2024')\n            elif item_name == '在建工程占资产总计比(%)' and item_type == '行业':\n                industry_ratio = item.get('2024')\n        \n        # 检查数据完整性\n        if enterprise_growth_rate is None or enterprise_ratio is None or industry_ratio is None:\n            return False\n        \n        # 转换数据类型\n        enterprise_growth_rate = float(enterprise_growth_rate)\n        enterprise_ratio = float(enterprise_ratio)\n        industry_ratio = float(industry_ratio)\n        \n        # 条件1：本年企业在建工程较上年变动不超过10%\n        condition1 = abs(enterprise_growth_rate) <= 10\n        \n        # 条件2：在建工程占资产总计的比重高于行业85%分位数\n        # 注意：根据要求，直接使用行业数据点的值作为85%分位数\n        condition2 = enterprise_ratio > industry_ratio\n        \n        # 两个条件都满足时存在风险\n        return condition1 and condition2\n        \n    except (ValueError, TypeError, KeyError):\n        return False\n    except Exception as e:\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "投资收益或资产处置收益错报",
    "risk_description": "企业总资产周转率连续两年低于行业均值，“经营业务利润”连续两年为负，本年营业利润较上年增长。（模型公式编号：191101019）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        company_asset_turnover_2023 = None\n        company_asset_turnover_2024 = None\n        industry_asset_turnover_2023 = None\n        industry_asset_turnover_2024 = None\n        company_operating_profit_2023 = None\n        company_operating_profit_2024 = None\n        company_profit_growth_2023 = None\n        company_profit_growth_2024 = None\n        \n        # 提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_name == '总资产周转率' and item_type == '企业':\n                company_asset_turnover_2023 = float(item.get('2023', 0))\n                company_asset_turnover_2024 = float(item.get('2024', 0))\n            elif item_name == '总资产周转率' and item_type == '行业':\n                industry_asset_turnover_2023 = float(item.get('2023', 0))\n                industry_asset_turnover_2024 = float(item.get('2024', 0))\n            elif item_name == '经营业务利润' and item_type == '企业':\n                # 处理带逗号的字符串格式\n                profit_2023 = item.get('2023', '0').replace(',', '')\n                profit_2024 = item.get('2024', '0').replace(',', '')\n                company_operating_profit_2023 = float(profit_2023)\n                company_operating_profit_2024 = float(profit_2024)\n            elif item_name == '营业利润增长率' and item_type == '企业':\n                company_profit_growth_2023 = float(item.get('2023', 0))\n                company_profit_growth_2024 = float(item.get('2024', 0))\n        \n        # 检查数据完整性\n        if (company_asset_turnover_2023 is None or company_asset_turnover_2024 is None or\n            industry_asset_turnover_2023 is None or industry_asset_turnover_2024 is None or\n            company_operating_profit_2023 is None or company_operating_profit_2024 is None or\n            company_profit_growth_2023 is None or company_profit_growth_2024 is None):\n            return False\n        \n        # 验证风险条件\n        condition1 = company_asset_turnover_2023 < industry_asset_turnover_2023\n        condition2 = company_asset_turnover_2024 < industry_asset_turnover_2024\n        condition3 = company_operating_profit_2023 < 0\n        condition4 = company_operating_profit_2024 < 0\n        condition5 = company_profit_growth_2024 > company_profit_growth_2023\n        \n        # 所有条件同时满足时存在风险\n        return condition1 and condition2 and condition3 and condition4 and condition5\n        \n    except (ValueError, TypeError, AttributeError):\n        return False"
  }
]