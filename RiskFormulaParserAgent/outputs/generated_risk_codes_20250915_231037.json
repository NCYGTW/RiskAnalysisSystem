[
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "本年企业营业收入增长超过20%，应收账款周转率高于行业总体样本中85%的企业。（模型公式编号：191101030）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        model_items = data_dict['model_items']\n        \n        # 提取企业营业收入增长率（2024年）\n        revenue_growth = None\n        # 提取企业应收账款周转率（2024年）\n        enterprise_receivable_turnover = None\n        # 提取行业应收账款周转率（2024年）\n        industry_receivable_turnover = None\n        \n        for item in model_items:\n            if item['项目名称'] == '营业收入增长率' and item['类型'] == '企业':\n                revenue_growth = float(item['2024'])\n            elif item['项目名称'] == '应收票据、应收账款、应收款项融资及合同资产周转率【次】':\n                if item['类型'] == '企业':\n                    enterprise_receivable_turnover = float(item['2024'])\n                elif item['类型'] == '行业':\n                    industry_receivable_turnover = float(item['2024'])\n        \n        # 检查是否有任何必要数据缺失\n        if revenue_growth is None or enterprise_receivable_turnover is None or industry_receivable_turnover is None:\n            return False\n        \n        # 验证风险条件\n        # 1. 本年企业营业收入增长率 > 20%\n        # 2. 企业应收账款周转率 > 行业应收账款周转率的85%分位数\n        # 注意：根据要求，直接使用行业值作为85%分位数\n        condition1 = revenue_growth > 20\n        condition2 = enterprise_receivable_turnover > industry_receivable_turnover\n        \n        return condition1 and condition2\n        \n    except (KeyError, ValueError, TypeError):\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "本年企业“每元固定资产提供的营业收入”超过上年的1.2倍，固定资产减少不到10%，营业收入增长超过20%。（模型公式编号：191101080）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据项\n        revenue_per_fixed_asset_2023 = None\n        revenue_per_fixed_asset_2024 = None\n        fixed_asset_growth_rate_2024 = None\n        revenue_growth_rate_2024 = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_name == '每元固定资产及使用权资产提供的营业收入' and item_type == '企业':\n                revenue_per_fixed_asset_2023 = float(item.get('2023', 0))\n                revenue_per_fixed_asset_2024 = float(item.get('2024', 0))\n            \n            elif item_name == '固定资产及使用权资产增长率' and item_type == '企业':\n                fixed_asset_growth_rate_2024 = float(item.get('2024', 0))\n            \n            elif item_name == '营业收入增长率' and item_type == '企业':\n                revenue_growth_rate_2024 = float(item.get('2024', 0))\n        \n        # 检查数据完整性\n        if (revenue_per_fixed_asset_2023 is None or \n            revenue_per_fixed_asset_2024 is None or \n            fixed_asset_growth_rate_2024 is None or \n            revenue_growth_rate_2024 is None):\n            return False\n        \n        # 验证风险条件\n        condition1 = revenue_per_fixed_asset_2024 > revenue_per_fixed_asset_2023 * 1.2\n        condition2 = fixed_asset_growth_rate_2024 > -10.0  # 固定资产减少不到10%\n        condition3 = revenue_growth_rate_2024 > 20.0\n        \n        # 同时满足三个条件时存在风险\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, KeyError):\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业营业收入增长超过20%，且大于销售商品和提供劳务收到的现金增长率，同时其差额超过行业均值的3倍。（模型公式编号：191101002）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 提取所需数据\n        company_revenue_growth = None\n        company_cash_growth = None\n        industry_revenue_growth = None\n        industry_cash_growth = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', None)\n            \n            if value_2024 is None:\n                continue\n                \n            try:\n                numeric_value = float(value_2024)\n            except (ValueError, TypeError):\n                continue\n                \n            if item_name == '营业收入增长率' and item_type == '企业':\n                company_revenue_growth = numeric_value\n            elif item_name == '销售商品、提供劳务收到的现金增长率' and item_type == '企业':\n                company_cash_growth = numeric_value\n            elif item_name == '营业收入增长率' and item_type == '行业':\n                industry_revenue_growth = numeric_value\n            elif item_name == '销售商品、提供劳务收到的现金增长率' and item_type == '行业':\n                industry_cash_growth = numeric_value\n        \n        # 检查数据完整性\n        if any(x is None for x in [company_revenue_growth, company_cash_growth, \n                                  industry_revenue_growth, industry_cash_growth]):\n            return False\n        \n        # 验证风险条件\n        condition1 = company_revenue_growth > 20\n        condition2 = company_revenue_growth > company_cash_growth\n        condition3 = (company_revenue_growth - company_cash_growth) > 3 * (industry_revenue_growth - industry_cash_growth)\n        \n        return condition1 and condition2 and condition3\n        \n    except Exception as e:\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年行业营业收入增长率高于销售商品、提供劳务收到的现金增长率，且其差额和上年比扩大；同时，本年企业营业收入增长率高于销售商品、提供劳务收到的现金增长率且和上年比差异扩大；且企业本年营业收入增长率和销售商品、提供劳务收到的现金增长率的差额比行业高5个百分点以上。（模型公式编号：191101018）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化变量\n        enterprise_revenue_growth_2024 = None\n        enterprise_revenue_growth_2023 = None\n        enterprise_cash_growth_2024 = None\n        enterprise_cash_growth_2023 = None\n        industry_revenue_growth_2024 = None\n        industry_revenue_growth_2023 = None\n        industry_cash_growth_2024 = None\n        industry_cash_growth_2023 = None\n        \n        # 提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_name == '营业收入增长率' and item_type == '企业':\n                enterprise_revenue_growth_2024 = float(item.get('2024', 0))\n                enterprise_revenue_growth_2023 = float(item.get('2023', 0))\n            elif item_name == '销售商品、提供劳务收到的现金增长率' and item_type == '企业':\n                enterprise_cash_growth_2024 = float(item.get('2024', 0))\n                enterprise_cash_growth_2023 = float(item.get('2023', 0))\n            elif item_name == '营业收入增长率' and item_type == '行业':\n                industry_revenue_growth_2024 = float(item.get('2024', 0))\n                industry_revenue_growth_2023 = float(item.get('2023', 0))\n            elif item_name == '销售商品、提供劳务收到的现金增长率' and item_type == '行业':\n                industry_cash_growth_2024 = float(item.get('2024', 0))\n                industry_cash_growth_2023 = float(item.get('2023', 0))\n        \n        # 检查数据完整性\n        if any(x is None for x in [\n            enterprise_revenue_growth_2024, enterprise_revenue_growth_2023,\n            enterprise_cash_growth_2024, enterprise_cash_growth_2023,\n            industry_revenue_growth_2024, industry_revenue_growth_2023,\n            industry_cash_growth_2024, industry_cash_growth_2023\n        ]):\n            return False\n        \n        # 条件1: 本年行业营业收入增长率 > 本年行业销售商品、提供劳务收到的现金增长率\n        condition1 = industry_revenue_growth_2024 > industry_cash_growth_2024\n        \n        # 条件2: (本年行业营业收入增长率 - 本年行业销售商品、提供劳务收到的现金增长率) > \n        #        (上年行业营业收入增长率 - 上年行业销售商品、提供劳务收到的现金增长率)\n        industry_diff_2024 = industry_revenue_growth_2024 - industry_cash_growth_2024\n        industry_diff_2023 = industry_revenue_growth_2023 - industry_cash_growth_2023\n        condition2 = industry_diff_2024 > industry_diff_2023\n        \n        # 条件3: 本年企业营业收入增长率 > 本年企业销售商品、提供劳务收到的现金增长率\n        condition3 = enterprise_revenue_growth_2024 > enterprise_cash_growth_2024\n        \n        # 条件4: (本年企业营业收入增长率 - 本年企业销售商品、提供劳务收到的现金增长率) > \n        #        (上年企业营业收入增长率 - 上年企业销售商品、提供劳务收到的现金增长率)\n        enterprise_diff_2024 = enterprise_revenue_growth_2024 - enterprise_cash_growth_2024\n        enterprise_diff_2023 = enterprise_revenue_growth_2023 - enterprise_cash_growth_2023\n        condition4 = enterprise_diff_2024 > enterprise_diff_2023\n        \n        # 条件5: (本年企业营业收入增长率 - 本年企业销售商品、提供劳务收到的现金增长率) - \n        #        (本年行业营业收入增长率 - 本年行业销售商品、提供劳务收到的现金增长率) > 5\n        condition5 = (enterprise_diff_2024 - industry_diff_2024) > 5\n        \n        # 所有条件同时满足时返回True\n        return condition1 and condition2 and condition3 and condition4 and condition5\n        \n    except Exception as e as e:\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业应收账款周转率降低，存货周转率提高，营业收入增长超过20%。（模型公式编号：191101035）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 提取所需指标数据\n        ar_turnover_data = None\n        inventory_turnover_data = None\n        revenue_growth_data = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            \n            if '应收票据、应收账款、应收款项融资及合同资产周转率' in item_name:\n                ar_turnover_data = item\n            elif '存货周转率' in item_name:\n                inventory_turnover_data = item\n            elif '营业收入增长率' in item_name:\n                revenue_growth_data = item\n        \n        # 检查数据完整性\n        if not all([ar_turnover_data, inventory_turnover_data, revenue_growth_data]):\n            return False\n        \n        # 提取具体数值\n        ar_turnover_2023 = float(ar_turnover_data.get('2023', 0))\n        ar_turnover_2024 = float(ar_turnover_data.get('2024', 0))\n        \n        inventory_turnover_2023 = float(inventory_turnover_data.get('2023', 0))\n        inventory_turnover_2024 = float(inventory_turnover_data.get('2024', 0))\n        \n        revenue_growth_2024 = float(revenue_growth_data.get('2024', 0))\n        \n        # 验证风险条件\n        # 1. 应收账款周转率降低\n        ar_decrease = ar_turnover_2024 < ar_turnover_2023\n        \n        # 2. 存货周转率提高\n        inventory_increase = inventory_turnover_2024 > inventory_turnover_2023\n        \n        # 3. 营业收入增长率超过20%\n        revenue_high_growth = revenue_growth_2024 > 20.0\n        \n        # 所有条件同时满足时存在风险\n        return ar_decrease and inventory_increase and revenue_high_growth\n        \n    except (ValueError, TypeError, KeyError):\n        # 处理数据转换错误或键不存在的情况\n        return False\n    except Exception as e:\n        # 处理其他所有异常\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业股本较上年无变动，长期股权投资变动不超过5%，营业收入增长超过30%。（模型公式编号：191101112）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需指标的企业数据\n        equity_growth_rate_2024 = None\n        long_term_investment_growth_rate_2024 = None\n        revenue_growth_rate_2024 = None\n        \n        # 遍历所有项目数据，提取所需的企业指标值\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            # 只处理企业类型的数据\n            if item_type != '企业':\n                continue\n                \n            if item_name == '股本增长率':\n                equity_growth_rate_2024 = item.get('2024')\n            elif item_name == '长期股权投资增长率':\n                long_term_investment_growth_rate_2024 = item.get('2024')\n            elif item_name == '营业收入增长率':\n                revenue_growth_rate_2024 = item.get('2024')\n        \n        # 检查所有必需数据是否都存在\n        if (equity_growth_rate_2024 is None or \n            long_term_investment_growth_rate_2024 is None or \n            revenue_growth_rate_2024 is None):\n            return False\n        \n        # 将字符串转换为浮点数\n        equity_growth = float(equity_growth_rate_2024)\n        long_term_investment_growth = float(long_term_investment_growth_rate_2024)\n        revenue_growth = float(revenue_growth_rate_2024)\n        \n        # 应用风险判断条件\n        condition1 = equity_growth == 0  # 股本增长率 == 0\n        condition2 = long_term_investment_growth <= 5  # 长期股权投资增长率 <= 5%\n        condition3 = revenue_growth > 30  # 营业收入增长率 > 30%\n        \n        # 所有条件同时满足时返回True（存在风险）\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, KeyError):\n        # 处理数据转换错误、类型错误或键不存在的情况\n        return False\n    except Exception as e:\n        # 处理其他所有异常情况\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "关联方占用资金",
    "risk_description": "本年企业预付账款增长超过50%，且占流动资产比重高于行业总体样本中85%的企业。（模型公式编号：200301004）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据\n        prepayment_growth_rate = None\n        prepayment_current_ratio = None\n        prepayment_industry_ratio = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_name == '预付款项增长率' and item_type == '企业':\n                prepayment_growth_rate = item.get('2024')\n            \n            elif item_name == '预付款项占流动资产合计比(%)':\n                if item_type == '企业':\n                    prepayment_current_ratio = item.get('2024')\n                elif item_type == '行业':\n                    prepayment_industry_ratio = item.get('2024')\n        \n        # 检查数据完整性\n        if (prepayment_growth_rate is None or \n            prepayment_current_ratio is None or \n            prepayment_industry_ratio is None):\n            return False\n        \n        # 转换为数值类型\n        prepayment_growth_rate = float(prepayment_growth_rate)\n        prepayment_current_ratio = float(prepayment_current_ratio)\n        prepayment_industry_ratio = float(prepayment_industry_ratio)\n        \n        # 验证风险条件\n        condition1 = prepayment_growth_rate > 50  # 预付款项增长率 > 50%\n        condition2 = prepayment_current_ratio > prepayment_industry_ratio  # 预付款项占流动资产合计比 > 行业值\n        \n        return condition1 and condition2\n        \n    except (ValueError, TypeError, KeyError):\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "货币资金错报",
    "risk_description": "本年企业货币资金超过“短长期债务”的5倍，股本无变动或增长不到1%，资本公积无变动或增长不到5%。（模型公式编号：191101103）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n            \n        # 提取所需数据\n        data_map = {}\n        for item in model_items:\n            name = item.get('项目名称')\n            if name:\n                data_map[name] = item\n        \n        # 检查必需数据是否存在\n        required_fields = ['货币资金', '短长期债务', '股本增长率', '资本公积增长率']\n        for field in required_fields:\n            if field not in data_map:\n                return False\n        \n        # 获取2024年数据\n        cash_2024 = float(data_map['货币资金']['2024'].replace(',', ''))\n        debt_2024 = float(data_map['短长期债务']['2024'].replace(',', ''))\n        equity_growth_2024 = float(data_map['股本增长率']['2024'])\n        capital_reserve_growth_2024 = float(data_map['资本公积增长率']['2024'])\n        \n        # 验证风险条件\n        condition1 = cash_2024 > debt_2024 * 5\n        condition2 = equity_growth_2024 <= 1.0\n        condition3 = capital_reserve_growth_2024 <= 5.0\n        \n        return condition1 and condition2 and condition3\n        \n    except (KeyError, ValueError, TypeError, AttributeError):\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "违规资金收付",
    "risk_description": "本年企业银行手续费（财务费用-利息费用+利息收入，未考虑汇兑损益影响）占经营活动现金流出小计、投资活动现金流出小计及筹资活动现金流出小计三项之和的比例超过0.5%。（模型公式编号：191101089）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        financial_expense = None\n        interest_expense = None\n        interest_income = None\n        operating_outflow = None\n        investing_outflow = None\n        financing_outflow = None\n        \n        # 提取2024年企业数据\n        for item in model_items:\n            if item.get('类型') == '企业':\n                item_name = item.get('项目名称')\n                value_2024 = item.get('2024')\n                \n                if value_2024 is None:\n                    continue\n                    \n                # 转换字符串为数值（处理逗号分隔符）\n                try:\n                    numeric_value = float(str(value_2024).replace(',', ''))\n                except (ValueError, TypeError):\n                    continue\n                \n                # 根据项目名称分配数值\n                if item_name == '财务费用':\n                    financial_expense = numeric_value\n                elif item_name == '利息费用':\n                    interest_expense = numeric_value\n                elif item_name == '利息收入':\n                    interest_income = numeric_value\n                elif item_name == '经营活动现金流出小计':\n                    operating_outflow = numeric_value\n                elif item_name == '投资活动现金流出小计':\n                    investing_outflow = numeric_value\n                elif item_name == '筹资活动现金流出小计':\n                    financing_outflow = numeric_value\n        \n        # 检查所有必需数据是否齐全\n        if None in [financial_expense, interest_expense, interest_income, \n                   operating_outflow, investing_outflow, financing_outflow]:\n            return False\n        \n        # 计算银行手续费\n        bank_fee = financial_expense - interest_expense + interest_income\n        \n        # 计算三项现金流出总和\n        total_cash_outflow = operating_outflow + investing_outflow + financing_outflow\n        \n        # 避免除零错误\n        if total_cash_outflow == 0:\n            return False\n        \n        # 计算比例\n        ratio = bank_fee / total_cash_outflow\n        \n        # 判断风险：比例超过0.5%\n        return ratio > 0.005\n        \n    except Exception as e:\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "违规资金收付",
    "risk_description": "本年企业其他流动资产增长超过40%，且占资产总计的比重超过行业总体样本中85%的企业。（模型公式编号：191101083）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据\n        growth_rate_2024 = None\n        enterprise_ratio_2024 = None\n        industry_ratio_2024 = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', None)\n            \n            if value_2024 is None:\n                continue\n                \n            try:\n                value_2024 = float(value_2024)\n            except (ValueError, TypeError):\n                continue\n            \n            if item_name == '其他流动资产增长率' and item_type == '企业':\n                growth_rate_2024 = value_2024\n            elif item_name == '其他流动资产占资产总计比(%)' and item_type == '企业':\n                enterprise_ratio_2024 = value_2024\n            elif item_name == '其他流动资产占资产总计比(%)' and item_type == '行业':\n                industry_ratio_2024 = value_2024\n        \n        # 检查数据完整性\n        if growth_rate_2024 is None or enterprise_ratio_2024 is None or industry_ratio_2024 is None:\n            return False\n        \n        # 验证风险条件\n        condition1 = growth_rate_2024 > 40  # 企业本年其他流动资产增长率 > 40%\n        condition2 = enterprise_ratio_2024 > industry_ratio_2024  # 企业本年占比 > 行业值（85%分位数）\n        \n        return condition1 and condition2\n        \n    except Exception as e:\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "违规资金收付",
    "risk_description": "本年企业其他流动资产占流动资产合计的比重超过15%。（模型公式编号：191101100）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 查找企业类型的数据点\n        enterprise_data = None\n        for item in model_items:\n            if item.get('类型') == '企业':\n                enterprise_data = item\n                break\n        \n        # 如果找不到企业数据，返回False\n        if enterprise_data is None:\n            return False\n        \n        # 获取2024年的值\n        value_2024 = enterprise_data.get('2024')\n        \n        # 检查数据是否存在\n        if value_2024 is None:\n            return False\n            \n        # 转换为数值类型\n        ratio = float(value_2024)\n        \n        # 判断风险条件：本年企业其他流动资产占流动资产合计的比重超过15%\n        return ratio > 15.0\n        \n    except (ValueError, TypeError, KeyError):\n        # 处理所有可能的异常情况\n        return False\n    except Exception as e:\n        # 处理其他未知异常\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "违规资金收付",
    "risk_description": "以前少计、本年多计成本或费用",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 提取所需数据项\n        interest_expense_data = {}\n        debt_data = {}\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_name == '利息费用' and item_type == '企业':\n                interest_expense_data = item\n            elif item_name == '短长期债务' and item_type == '企业':\n                debt_data = item\n        \n        # 检查数据完整性\n        if not interest_expense_data or not debt_data:\n            return False\n        \n        # 提取具体数值并转换为浮点数\n        interest_2023 = float(interest_expense_data.get('2023', '0').replace(',', ''))\n        interest_2024 = float(interest_expense_data.get('2024', '0').replace(',', ''))\n        debt_2023 = float(debt_data.get('2023', '0').replace(',', ''))\n        debt_2024 = float(debt_data.get('2024', '0').replace(',', ''))\n        \n        # 检查数据有效性\n        if interest_2023 <= 0 or interest_2024 <= 0 or debt_2023 <= 0 or debt_2024 <= 0:\n            return False\n        \n        # 计算利息费用同比增长率\n        interest_growth_rate = (interest_2024 - interest_2023) / interest_2023\n        \n        # 计算债务规模同比下降率\n        debt_decline_rate = (debt_2023 - debt_2024) / debt_2023\n        \n        # 计算利息费用占债务比率\n        interest_debt_ratio_2023 = interest_2023 / debt_2023\n        interest_debt_ratio_2024 = interest_2024 / debt_2024\n        \n        # 应用风险判断条件\n        condition1 = interest_growth_rate >= 0.76  # 利息费用同比增长76%\n        condition2 = debt_decline_rate >= 0.20    # 债务规模同比下降20%\n        condition3 = interest_debt_ratio_2024 >= 2 * interest_debt_ratio_2023  # 比率异常升高\n        \n        # 综合判断风险\n        if condition1 and condition2 and condition3:\n            return True\n        else:\n            return False\n            \n    except (ValueError, TypeError, ZeroDivisionError):\n        return False"
  },
  {
    "company_name": "广州信邦智能装备股份有限公司",
    "risk_category": "违规资金收付",
    "risk_description": "本年企业利息费用占“短长期债务”平均余额的比例比上年提高了3个百分点以上。（模型公式编号：191101085）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需数据变量\n        current_interest_expense = None\n        previous_interest_expense = None\n        current_short_debt_start = None\n        current_short_debt_end = None\n        current_long_debt_start = None\n        current_long_debt_end = None\n        previous_short_debt_start = None\n        previous_short_debt_end = None\n        previous_long_debt_start = None\n        previous_long_debt_end = None\n        \n        # 从数据中提取所需字段\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            # 只处理企业类型的数据\n            if item_type != '企业':\n                continue\n                \n            if item_name == '利息费用':\n                current_interest_expense = float(item.get('2024', 0))\n                previous_interest_expense = float(item.get('2023', 0))\n            elif item_name == '短期债务':\n                current_short_debt_start = float(item.get('2024期初', 0))\n                current_short_debt_end = float(item.get('2024期末', 0))\n                previous_short_debt_start = float(item.get('2023期初', 0))\n                previous_short_debt_end = float(item.get('2023期末', 0))\n            elif item_name == '长期债务':\n                current_long_debt_start = float(item.get('2024期初', 0))\n                current_long_debt_end = float(item.get('2024期末', 0))\n                previous_long_debt_start = float(item.get('2023期初', 0))\n                previous_long_debt_end = float(item.get('2023期末', 0))\n        \n        # 检查所有必需数据是否完整\n        required_data = [\n            current_interest_expense, previous_interest_expense,\n            current_short_debt_start, current_short_debt_end,\n            current_long_debt_start, current_long_debt_end,\n            previous_short_debt_start, previous_short_debt_end,\n            previous_long_debt_start, previous_long_debt_end\n        ]\n        \n        # 如果有任何数据缺失，返回False\n        if any(x is None for x in required_data):\n            return False\n        \n        # 计算本年短长期债务平均余额\n        current_short_debt_avg = (current_short_debt_start + current_short_debt_end) / 2\n        current_long_debt_avg = (current_long_debt_start + current_long_debt_end) / 2\n        current_total_debt_avg = current_short_debt_avg + current_long_debt_avg\n        \n        # 计算上年短长期债务平均余额\n        previous_short_debt_avg = (previous_short_debt_start + previous_short_debt_end) / 2\n        previous_long_debt_avg = (previous_long_debt_start + previous_long_debt_end) / 2\n        previous_total_debt_avg = previous_short_debt_avg + previous_long_debt_avg\n        \n        # 避免除零错误\n        if current_total_debt_avg == 0 or previous_total_debt_avg == 0:\n            return False\n        \n        # 计算本年利息保障比例\n        current_ratio = (current_interest_expense / current_total_debt_avg) * 100\n        \n        # 计算上年利息保障比例\n        previous_ratio = (previous_interest_expense / previous_total_debt_avg) * 100\n        \n        # 判断比例变化是否超过3个百分点\n        ratio_change = current_ratio - previous_ratio\n        \n        return ratio_change > 3\n        \n    except (ValueError, TypeError, ZeroDivisionError):\n        return False"
  },
  {
    "company_name": "浙江联翔智能家居股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "本年企业“每元工资提供的营业收入”比前二年均值高1.2倍，营业收入增长超过20%。（模型公式编号：191101056）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 从data_dict中获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 如果数据缺失或不足，返回False\n        if not model_items or len(model_items) < 2:\n            return False\n        \n        # 提取所需数据项\n        wage_revenue_data = {}\n        revenue_growth_data = {}\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_name == '每元工资提供的营业收入' and item_type == '企业':\n                wage_revenue_data = item\n            elif item_name == '营业收入增长率' and item_type == '企业':\n                revenue_growth_data = item\n        \n        # 检查数据完整性\n        if not wage_revenue_data or not revenue_growth_data:\n            return False\n        \n        # 获取具体数值\n        wage_revenue_2022 = wage_revenue_data.get('2022')\n        wage_revenue_2023 = wage_revenue_data.get('2023')\n        wage_revenue_2024 = wage_revenue_data.get('2024')\n        revenue_growth_2024 = revenue_growth_data.get('2024')\n        \n        # 检查数据是否存在\n        if (wage_revenue_2022 is None or wage_revenue_2023 is None or \n            wage_revenue_2024 is None or revenue_growth_2024 is None):\n            return False\n        \n        # 转换数据类型\n        wage_revenue_2022 = float(wage_revenue_2022)\n        wage_revenue_2023 = float(wage_revenue_2023)\n        wage_revenue_2024 = float(wage_revenue_2024)\n        revenue_growth_2024 = float(revenue_growth_2024)\n        \n        # 计算前两年均值\n        prev_two_years_avg = (wage_revenue_2022 + wage_revenue_2023) / 2\n        \n        # 验证风险条件\n        condition1 = wage_revenue_2024 > prev_two_years_avg * 1.2\n        condition2 = revenue_growth_2024 > 20\n        \n        # 两个条件都满足时存在风险\n        return condition1 and condition2\n        \n    except (ValueError, TypeError, KeyError, AttributeError):\n        # 处理所有可能的异常情况\n        return False"
  },
  {
    "company_name": "浙江联翔智能家居股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业营业收入增长超过20%，且大于销售商品和提供劳务收到的现金增长率，同时其差额超过行业均值的3倍。（模型公式编号：191101002）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 从data_dict中获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 提取所需数据\n        enterprise_revenue_growth = None\n        industry_revenue_growth = None\n        enterprise_cash_growth = None\n        industry_cash_growth = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', None)\n            \n            if value_2024 is None:\n                continue\n                \n            try:\n                value_2024 = float(value_2024)\n            except (ValueError, TypeError):\n                continue\n            \n            if item_name == '营业收入增长率' and item_type == '企业':\n                enterprise_revenue_growth = value_2024\n            elif item_name == '营业收入增长率' and item_type == '行业':\n                industry_revenue_growth = value_2024\n            elif item_name == '销售商品、提供劳务收到的现金增长率' and item_type == '企业':\n                enterprise_cash_growth = value_2024\n            elif item_name == '销售商品、提供劳务收到的现金增长率' and item_type == '行业':\n                industry_cash_growth = value_2024\n        \n        # 检查数据是否完整\n        if None in [enterprise_revenue_growth, industry_revenue_growth, enterprise_cash_growth, industry_cash_growth]:\n            return False\n        \n        # 应用风险判断条件\n        condition1 = enterprise_revenue_growth > 20\n        condition2 = enterprise_revenue_growth > enterprise_cash_growth\n        condition3 = (enterprise_revenue_growth - enterprise_cash_growth) > 3 * (industry_revenue_growth - industry_cash_growth)\n        \n        # 返回风险判断结果\n        return condition1 and condition2 and condition3\n        \n    except Exception as e:\n        return False"
  },
  {
    "company_name": "浙江联翔智能家居股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业应收账款周转率降低，存货周转率提高，营业收入增长超过20%。（模型公式编号：191101035）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        model_items = data_dict.get('model_items', [])\n        \n        # 提取所需数据\n        ar_turnover_2023 = None\n        ar_turnover_2024 = None\n        inventory_turnover_2023 = None\n        inventory_turnover_2024 = None\n        revenue_growth_2023 = None\n        revenue_growth_2024 = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_name == '应收票据、应收账款、应收款项融资及合同资产周转率【次】' and item_type == '企业':\n                ar_turnover_2023 = float(item.get('2023', 0))\n                ar_turnover_2024 = float(item.get('2024', 0))\n            \n            elif item_name == '存货周转率【次】' and item_type == '企业':\n                inventory_turnover_2023 = float(item.get('2023', 0))\n                inventory_turnover_2024 = float(item.get('2024', 0))\n            \n            elif item_name == '营业收入增长率' and item_type == '企业':\n                revenue_growth_2023 = float(item.get('2023', 0))\n                revenue_growth_2024 = float(item.get('2024', 0))\n        \n        # 检查数据完整性\n        if (ar_turnover_2023 is None or ar_turnover_2024 is None or \n            inventory_turnover_2023 is None or inventory_turnover_2024 is None or \n            revenue_growth_2023 is None or revenue_growth_2024 is None):\n            return False\n        \n        # 验证风险条件\n        ar_turnover_decline = ar_turnover_2024 < ar_turnover_2023\n        inventory_turnover_increase = inventory_turnover_2024 > inventory_turnover_2023\n        revenue_growth_high = revenue_growth_2024 > 20\n        \n        # 判断是否存在风险\n        if ar_turnover_decline and inventory_turnover_increase and revenue_growth_high:\n            return True\n        else:\n            return False\n            \n    except (ValueError, TypeError, KeyError):\n        return False"
  },
  {
    "company_name": "浙江联翔智能家居股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业应收账款增长额占营业收入的比重高于行业总体样本中85%的企业。（模型公式编号：191101061）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 从data_dict中获取model_items\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取企业数据和行业数据\n        enterprise_data = None\n        industry_data = None\n        \n        for item in model_items:\n            if item.get('类型') == '企业':\n                enterprise_data = item\n            elif item.get('类型') == '行业':\n                industry_data = item\n        \n        # 检查数据完整性\n        if not enterprise_data or not industry_data:\n            return False\n        \n        # 获取企业2024年应收账款增长额占营业收入的比例\n        enterprise_ratio_2024 = enterprise_data.get('2024')\n        if enterprise_ratio_2024 is None:\n            return False\n        \n        # 获取行业85%分位数值（直接使用行业数据点的值）\n        industry_percentile_85 = industry_data.get('2024')\n        if industry_percentile_85 is None:\n            return False\n        \n        # 转换为数值类型\n        enterprise_ratio = float(enterprise_ratio_2024)\n        industry_threshold = float(industry_percentile_85)\n        \n        # 判断风险条件：企业占比 > 行业85%分位数值\n        return enterprise_ratio > industry_threshold\n        \n    except (ValueError, TypeError, KeyError):\n        return False\n    except Exception as e:\n        return False"
  },
  {
    "company_name": "浙江联翔智能家居股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业营业收入增长超过20%，营业收入增长率超过销售商品和提供劳务收到的现金增长率的1.5倍。（模型公式编号：210101002）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 提取所需的企业数据\n        revenue_growth = None\n        cash_growth = None\n        \n        for item in model_items:\n            if item.get('类型') == '企业':\n                if item.get('项目名称') == '营业收入增长率':\n                    revenue_growth = float(item.get('2024', 0))\n                elif item.get('项目名称') == '销售商品、提供劳务收到的现金增长率':\n                    cash_growth = float(item.get('2024', 0))\n        \n        # 检查数据是否完整\n        if revenue_growth is None or cash_growth is None:\n            return False\n        \n        # 验证风险条件\n        condition1 = revenue_growth > 20\n        condition2 = revenue_growth > (cash_growth * 1.5)\n        \n        return condition1 and condition2\n        \n    except (ValueError, TypeError, KeyError):\n        return False\n    except Exception as e:\n        return False"
  },
  {
    "company_name": "浙江联翔智能家居股份有限公司",
    "risk_category": "少结转主营业务成本",
    "risk_description": "本年企业应收账款周转率与存货周转率均不到行业均值的90%，毛利率比行业均值高10个百分点以上。（模型公式编号：191101045）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 如果数据缺失或不足，返回False\n        if not model_items or len(model_items) < 6:\n            return False\n        \n        # 初始化变量\n        ar_turnover_company = None\n        ar_turnover_industry = None\n        inventory_turnover_company = None\n        inventory_turnover_industry = None\n        gross_margin_company = None\n        gross_margin_industry = None\n        \n        # 提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', None)\n            \n            if value_2024 is None:\n                continue\n                \n            try:\n                value = float(value_2024)\n            except (ValueError, TypeError):\n                continue\n                \n            if '应收票据、应收账款、应收款项融资及合同资产周转率' in item_name:\n                if item_type == '企业':\n                    ar_turnover_company = value\n                elif item_type == '行业':\n                    ar_turnover_industry = value\n                    \n            elif '存货周转率' in item_name:\n                if item_type == '企业':\n                    inventory_turnover_company = value\n                elif item_type == '行业':\n                    inventory_turnover_industry = value\n                    \n            elif '销售毛利率' in item_name:\n                if item_type == '企业':\n                    gross_margin_company = value\n                elif item_type == '行业':\n                    gross_margin_industry = value\n        \n        # 检查所有必需数据是否都存在\n        if (ar_turnover_company is None or ar_turnover_industry is None or\n            inventory_turnover_company is None or inventory_turnover_industry is None or\n            gross_margin_company is None or gross_margin_industry is None):\n            return False\n        \n        # 验证风险条件\n        condition_1 = ar_turnover_company < (ar_turnover_industry * 0.9)\n        condition_2 = inventory_turnover_company < (inventory_turnover_industry * 0.9)\n        condition_3 = gross_margin_company > (gross_margin_industry + 10)\n        \n        # 所有条件同时满足时存在风险\n        return condition_1 and condition_2 and condition_3\n        \n    except Exception as e as e:\n        # 处理任何异常情况，返回False\n        return False"
  },
  {
    "company_name": "浙江联翔智能家居股份有限公司",
    "risk_category": "少结转主营业务成本",
    "risk_description": "本年企业股本较上年无变动，长期股权投资减少，营业收入增长超过30%。（模型公式编号：191101110）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需指标值\n        equity_growth = None\n        long_term_investment_growth = None\n        revenue_growth = None\n        \n        # 遍历model_items提取所需指标\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', '')\n            \n            # 只处理企业类型的数据\n            if item_type != '企业':\n                continue\n                \n            if item_name == '股本增长率':\n                equity_growth = float(value_2024) if value_2024 != '-' else None\n            elif item_name == '长期股权投资增长率':\n                long_term_investment_growth = float(value_2024) if value_2024 != '-' else None\n            elif item_name == '营业收入增长率':\n                revenue_growth = float(value_2024) if value_2024 != '-' else None\n        \n        # 检查数据是否完整\n        if equity_growth is None or long_term_investment_growth is None or revenue_growth is None:\n            return False\n        \n        # 验证风险条件\n        # 1. 本年股本增长率为0（无变动）\n        condition1 = abs(equity_growth) < 0.001  # 考虑浮点数精度\n        \n        # 2. 长期股权投资增长率为负（减少）\n        condition2 = long_term_investment_growth < 0\n        \n        # 3. 营业收入增长率大于30%（增长超过30%）\n        condition3 = revenue_growth > 30\n        \n        # 所有条件同时满足时存在风险\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, KeyError, AttributeError):\n        return False"
  },
  {
    "company_name": "浙江联翔智能家居股份有限公司",
    "risk_category": "少计成本或费用",
    "risk_description": "本年企业营业收入增长超过20%，“经营业务利润”增长率比营业收入增长率高30个百分点以上。（模型公式编号：191101010）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 提取所需数据\n        revenue_growth = None\n        profit_growth = None\n        \n        for item in model_items:\n            if item.get('项目名称') == '营业收入增长率' and item.get('类型') == '企业':\n                revenue_growth = item.get('2024')\n            elif item.get('项目名称') == '经营业务利润增长率' and item.get('类型') == '企业':\n                profit_growth = item.get('2024')\n        \n        # 检查数据是否存在\n        if revenue_growth is None or profit_growth is None:\n            return False\n        \n        # 转换为数值类型\n        revenue_growth_val = float(revenue_growth)\n        profit_growth_val = float(profit_growth)\n        \n        # 验证风险条件\n        condition1 = revenue_growth_val > 20.0\n        condition2 = (profit_growth_val - revenue_growth_val) > 30.0\n        \n        return condition1 and condition2\n        \n    except (ValueError, TypeError, AttributeError, KeyError):\n        return False"
  },
  {
    "company_name": "浙江联翔智能家居股份有限公司",
    "risk_category": "少计成本或费用",
    "risk_description": "企业营业收入前二年持续下降，本年增长，且比本年销售费用增幅高4个百分点以上，营业利润上年为负，本年为正。（模型公式编号：191101013）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n            \n        # 提取所需数据\n        revenue_growth_data = None\n        sales_expense_growth_data = None\n        operating_profit_data = None\n        \n        for item in model_items:\n            if item['项目名称'] == '营业收入增长率' and item['类型'] == '企业':\n                revenue_growth_data = item\n            elif item['项目名称'] == '销售费用增长率' and item['类型'] == '企业':\n                sales_expense_growth_data = item\n            elif item['项目名称'] == '营业利润' and item['类型'] == '企业':\n                operating_profit_data = item\n        \n        # 检查数据完整性\n        if not all([revenue_growth_data, sales_expense_growth_data, operating_profit_data]):\n            return False\n        \n        # 提取具体数值\n        revenue_growth_2023 = float(revenue_growth_data['2023'])\n        revenue_growth_2024 = float(revenue_growth_data['2024'])\n        sales_expense_growth_2024 = float(sales_expense_growth_data['2024'])\n        operating_profit_2023 = float(operating_profit_data['2023'].replace(',', ''))\n        operating_profit_2024 = float(operating_profit_data['2024'].replace(',', ''))\n        \n        # 验证条件\n        condition1 = revenue_growth_2023 < 0  # 2023年营业收入增长率为负\n        condition2 = revenue_growth_2024 > 0  # 2024年营业收入增长率为正\n        condition3 = (revenue_growth_2024 - sales_expense_growth_2024) > 4  # 增长率差大于4个百分点\n        condition4 = operating_profit_2023 < 0  # 2023年营业利润为负\n        condition5 = operating_profit_2024 > 0  # 2024年营业利润为正\n        \n        # 所有条件都满足时存在风险\n        return condition1 and condition2 and condition3 and condition4 and condition5\n        \n    except (KeyError, ValueError, TypeError, AttributeError):\n        return False"
  },
  {
    "company_name": "浙江联翔智能家居股份有限公司",
    "risk_category": "少计成本或费用",
    "risk_description": "以前少计、本年多计信用或资产减值损失",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型数据项\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据\n        credit_loss_data = None\n        receivables_data = None\n        other_receivables_data = None\n        industry_ratio_data = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_name == '信用减值损失' and item_type == '企业':\n                credit_loss_data = item\n            elif item_name == '应收票据、应收账款、应收款项融资及合同资产' and item_type == '企业':\n                receivables_data = item\n            elif item_name == '其他应收款' and item_type == '企业':\n                other_receivables_data = item\n            elif '信用减值损失' in item_name and item_type == '行业':\n                industry_ratio_data = item\n        \n        # 检查数据完整性\n        if not all([credit_loss_data, receivables_data, other_receivables_data]):\n            return False\n        \n        # 提取具体数值（去除逗号并转换为浮点数）\n        credit_loss_2023 = float(credit_loss_data.get('2023', '0').replace(',', ''))\n        credit_loss_2024 = float(credit_loss_data.get('2024', '0').replace(',', ''))\n        \n        receivables_2023 = float(receivables_data.get('2023', '0').replace(',', ''))\n        receivables_2024 = float(receivables_data.get('2024', '0').replace(',', ''))\n        \n        other_receivables_2023 = float(other_receivables_data.get('2023', '0').replace(',', ''))\n        other_receivables_2024 = float(other_receivables_data.get('2024', '0').replace(',', ''))\n        \n        # 计算应收款项总额\n        total_receivables_2023 = receivables_2023 + other_receivables_2023\n        total_receivables_2024 = receivables_2024 + other_receivables_2024\n        \n        # 计算信用减值损失变化率\n        credit_loss_change = abs(credit_loss_2024 - credit_loss_2023) / abs(credit_loss_2023) if credit_loss_2023 != 0 else float('inf')\n        \n        # 计算应收款项总额变化率\n        receivables_change = abs(total_receivables_2024 - total_receivables_2023) / abs(total_receivables_2023) if total_receivables_2023 != 0 else float('inf')\n        \n        # 计算本年计提比例\n        provision_ratio_2024 = abs(credit_loss_2024) / total_receivables_2024 if total_receivables_2024 != 0 else 0\n        \n        # 获取行业平均计提比例\n        industry_ratio = 0.0\n        if industry_ratio_data and '2024' in industry_ratio_data:\n            industry_ratio = float(industry_ratio_data.get('2024', '0').replace(',', ''))\n        \n        # 风险判断条件\n        # 1. 信用减值损失大幅增加（变化率超过100%）\n        condition1 = credit_loss_change > 1.0\n        \n        # 2. 应收款项总额大幅增长（变化率超过50%）\n        condition2 = receivables_change > 0.5\n        \n        # 3. 计提比例显著高于行业平均水平（超过行业平均的1.5倍）\n        condition3 = provision_ratio_2024 > industry_ratio * 1.5 if industry_ratio > 0 else False\n        \n        # 存在任一风险条件即返回True\n        return condition1 or condition2 or condition3\n        \n    except (ValueError, TypeError, ZeroDivisionError, AttributeError, KeyError):\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "企业营业收入连续两年增长，且本年增长率高于行业总体样本中85%的企业。（模型公式编号：191101005）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取企业数据和行业数据\n        company_data = []\n        industry_data = None\n        \n        for item in model_items:\n            if item['项目名称'] == '营业收入增长率':\n                if item['类型'] == '企业':\n                    # 提取企业2023和2024年数据\n                    growth_2023 = float(item.get('2023', 0))\n                    growth_2024 = float(item.get('2024', 0))\n                    company_data = [growth_2023, growth_2024]\n                elif item['类型'] == '行业':\n                    # 提取行业2024年数据（作为85分位数值）\n                    industry_85_percentile = float(item.get('2024', 0))\n                    industry_data = industry_85_percentile\n        \n        # 检查数据完整性\n        if len(company_data) != 2 or industry_data is None:\n            return False\n        \n        # 验证条件1：企业连续两年增长率为正值\n        condition1 = company_data[0] > 0 and company_data[1] > 0\n        \n        # 验证条件2：企业2024年增长率高于行业85分位数值\n        condition2 = company_data[1] > industry_data\n        \n        # 返回风险判断结果\n        return condition1 and condition2\n        \n    except (ValueError, TypeError, KeyError):\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "本年企业营业收入增长超过20%，在建工程增长超过30%，应收账款减少，或增长不到10%。（模型公式编号：191101021）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 从data_dict中获取model_items\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需增长率数据\n        revenue_growth = None\n        construction_growth = None\n        receivables_growth = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', '')\n            \n            # 只处理企业类型的数据\n            if item_type != '企业':\n                continue\n                \n            # 转换数值格式（处理千分位逗号）\n            if isinstance(value_2024, str):\n                value_2024 = value_2024.replace(',', '')\n            \n            # 根据项目名称获取对应的增长率\n            if item_name == '营业收入增长率':\n                revenue_growth = float(value_2024)\n            elif item_name == '在建工程增长率':\n                construction_growth = float(value_2024)\n            elif item_name == '应收票据、应收账款、应收款项融资及合同资产增长率':\n                receivables_growth = float(value_2024)\n        \n        # 检查是否有数据缺失\n        if revenue_growth is None or construction_growth is None or receivables_growth is None:\n            return False\n        \n        # 验证风险条件\n        condition1 = revenue_growth > 20 and construction_growth > 30\n        condition2 = revenue_growth > 20 and receivables_growth < 10\n        condition3 = construction_growth > 30 and receivables_growth < 10\n        \n        # 满足任一条件即返回True（存在风险）\n        return condition1 or condition2 or condition3\n        \n    except (ValueError, TypeError, AttributeError, KeyError):\n        # 处理所有可能的异常情况\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "本年企业“每元工资提供的营业收入”比前二年均值高1.2倍，营业收入增长超过20%。（模型公式编号：191101056）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 检查数据是否足够\n        if len(model_items) < 2:\n            return False\n        \n        # 提取所需数据项\n        revenue_per_wage_data = None\n        revenue_growth_data = None\n        \n        for item in model_items:\n            if item.get('项目名称') == '每元工资提供的营业收入' and item.get('类型') == '企业':\n                revenue_per_wage_data = item\n            elif item.get('项目名称') == '营业收入增长率' and item.get('类型') == '企业':\n                revenue_growth_data = item\n        \n        # 检查数据是否存在\n        if revenue_per_wage_data is None or revenue_growth_data is None:\n            return False\n        \n        # 提取具体数值\n        # 需要2022年数据但未提供，假设数据不足\n        if '2022' not in revenue_per_wage_data or '2023' not in revenue_per_wage_data or '2024' not in revenue_per_wage_data:\n            return False\n        \n        # 转换数据类型\n        wage_revenue_2022 = float(revenue_per_wage_data['2022'])\n        wage_revenue_2023 = float(revenue_per_wage_data['2023'])\n        wage_revenue_2024 = float(revenue_per_wage_data['2024'])\n        \n        # 检查营业收入增长率数据\n        if '2024' not in revenue_growth_data:\n            return False\n        \n        revenue_growth_2024 = float(revenue_growth_data['2024'])\n        \n        # 计算前两年均值\n        prev_two_years_avg = (wage_revenue_2022 + wage_revenue_2023) / 2\n        \n        # 验证条件1：本年每元工资提供的营业收入 > 前二年均值 × 1.2\n        condition1 = wage_revenue_2024 > prev_two_years_avg * 1.2\n        \n        # 验证条件2：营业收入增长率 > 20%\n        condition2 = revenue_growth_2024 > 20.0\n        \n        # 返回风险判断结果\n        return condition1 and condition2\n        \n    except (KeyError, ValueError, TypeError, ZeroDivisionError):\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "本年企业“每元固定资产提供的营业收入”超过上年的1.2倍，固定资产减少不到10%，营业收入增长超过20%。（模型公式编号：191101080）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 从data_dict中获取model_items\n        model_items = data_dict.get('model_items', [])\n        \n        # 初始化所需变量\n        revenue_per_fixed_asset_2023 = None\n        revenue_per_fixed_asset_2024 = None\n        fixed_asset_growth_2024 = None\n        revenue_growth_2024 = None\n        \n        # 遍历model_items提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_name == '每元固定资产及使用权资产提供的营业收入' and item_type == '企业':\n                revenue_per_fixed_asset_2023 = float(item.get('2023', 0))\n                revenue_per_fixed_asset_2024 = float(item.get('2024', 0))\n            \n            elif item_name == '固定资产及使用权资产增长率' and item_type == '企业':\n                fixed_asset_growth_2024 = float(item.get('2024', 0))\n            \n            elif item_name == '营业收入增长率' and item_type == '企业':\n                revenue_growth_2024 = float(item.get('2024', 0))\n        \n        # 检查数据是否完整\n        if (revenue_per_fixed_asset_2023 is None or revenue_per_fixed_asset_2024 is None or\n            fixed_asset_growth_2024 is None or revenue_growth_2024 is None):\n            return False\n        \n        # 验证风险条件\n        condition1 = revenue_per_fixed_asset_2024 > revenue_per_fixed_asset_2023 * 1.2\n        condition2 = fixed_asset_growth_2024 > -10  # 固定资产减少不到10%\n        condition3 = revenue_growth_2024 > 20\n        \n        # 所有条件都满足时返回True（存在风险）\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, KeyError):\n        # 处理数据转换错误或键不存在的情况\n        return False\n    except Exception as e:\n        # 处理其他所有异常\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "本年企业固定资产原值增减不超过20%，“每元固定资产原值提供的营业收入”超过上年的1.5倍，营业收入增长超过20%。（模型公式编号：200201001）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 提取所需数据\n        fixed_asset_growth = None\n        revenue_per_asset = None\n        revenue_growth = None\n        \n        for item in model_items:\n            if item.get('项目名称') == '固定资产及使用权资产原值增长率' and item.get('类型') == '企业':\n                fixed_asset_growth = item.get('2024')\n            elif item.get('项目名称') == '每元固定资产及使用权资产原值提供的营业收入' and item.get('类型') == '企业':\n                revenue_per_asset = item.get('2024')\n                prev_revenue_per_asset = item.get('2023')\n            elif item.get('项目名称') == '营业收入增长率' and item.get('类型') == '企业':\n                revenue_growth = item.get('2024')\n        \n        # 检查数据完整性\n        if None in [fixed_asset_growth, revenue_per_asset, prev_revenue_per_asset, revenue_growth]:\n            return False\n        \n        # 转换为数值类型\n        fixed_asset_growth = float(fixed_asset_growth)\n        revenue_per_asset = float(revenue_per_asset)\n        prev_revenue_per_asset = float(prev_revenue_per_asset)\n        revenue_growth = float(revenue_growth)\n        \n        # 验证条件1：本年固定资产原值增长率绝对值 ≤ 20%\n        condition1 = abs(fixed_asset_growth) <= 20\n        \n        # 验证条件2：本年每元固定资产原值提供的营业收入 > 上年值的1.5倍\n        condition2 = revenue_per_asset > (prev_revenue_per_asset * 1.5)\n        \n        # 验证条件3：本年营业收入增长率 > 20%\n        condition3 = revenue_growth > 20\n        \n        # 风险触发条件：三个条件同时满足\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, KeyError):\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业营业收入增长超过20%，且大于销售商品和提供劳务收到的现金增长率，同时其差额超过行业均值的3倍。（模型公式编号：191101002）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 从data_dict中获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 如果数据为空，返回False\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        enterprise_revenue_growth = None\n        enterprise_cash_growth = None\n        industry_revenue_growth = None\n        industry_cash_growth = None\n        \n        # 遍历model_items提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            year_2024 = item.get('2024', '')\n            \n            # 跳过缺失数据\n            if not year_2024 or year_2024 == '':\n                continue\n                \n            try:\n                value = float(year_2024)\n            except (ValueError, TypeError):\n                continue\n            \n            if item_name == '营业收入增长率':\n                if item_type == '企业':\n                    enterprise_revenue_growth = value\n                elif item_type == '行业':\n                    industry_revenue_growth = value\n            \n            elif item_name == '销售商品、提供劳务收到的现金增长率':\n                if item_type == '企业':\n                    enterprise_cash_growth = value\n                elif item_type == '行业':\n                    industry_cash_growth = value\n        \n        # 检查是否所有必要数据都存在\n        if (enterprise_revenue_growth is None or enterprise_cash_growth is None or \n            industry_revenue_growth is None or industry_cash_growth is None):\n            return False\n        \n        # 应用风险判断条件\n        condition1 = enterprise_revenue_growth > 20\n        condition2 = enterprise_revenue_growth > enterprise_cash_growth\n        condition3 = (enterprise_revenue_growth - enterprise_cash_growth) > 3 * (industry_revenue_growth - industry_cash_growth)\n        \n        # 所有条件都满足时返回True（存在风险）\n        return condition1 and condition2 and condition3\n        \n    except Exception as e as e:\n        # 处理任何可能的异常情况\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业营业收入增长超过20%，营业收入增长率超过销售商品和提供劳务收到的现金增长率的1.5倍。（模型公式编号：210101002）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 提取所需的企业数据\n        revenue_growth_rate = None\n        cash_growth_rate = None\n        \n        for item in model_items:\n            if item.get('项目名称') == '营业收入增长率' and item.get('类型') == '企业':\n                revenue_growth_rate = item.get('2024')\n            elif item.get('项目名称') == '销售商品、提供劳务收到的现金增长率' and item.get('类型') == '企业':\n                cash_growth_rate = item.get('2024')\n        \n        # 检查数据是否存在\n        if revenue_growth_rate is None or cash_growth_rate is None:\n            return False\n        \n        # 转换数据类型\n        revenue_growth_rate = float(revenue_growth_rate)\n        cash_growth_rate = float(cash_growth_rate)\n        \n        # 验证风险条件\n        condition1 = revenue_growth_rate > 20.0\n        condition2 = revenue_growth_rate > (1.5 * cash_growth_rate)\n        \n        # 返回风险判断结果\n        return condition1 and condition2\n        \n    except (ValueError, TypeError, KeyError, AttributeError):\n        return False\n    except Exception as e:\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "少结转主营业务成本",
    "risk_description": "本年企业存货周转率降低，应收账款周转率提高，营业收入增长超过20%。（模型公式编号：191101033）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        model_items = data_dict['model_items']\n        \n        # 提取所需数据\n        inventory_turnover_2023 = None\n        inventory_turnover_2024 = None\n        receivables_turnover_2023 = None\n        receivables_turnover_2024 = None\n        revenue_growth_rate_2024 = None\n        \n        for item in model_items:\n            if item['项目名称'] == '存货周转率【次】' and item['类型'] == '企业':\n                inventory_turnover_2023 = float(item['2023'])\n                inventory_turnover_2024 = float(item['2024'])\n            elif item['项目名称'] == '应收票据、应收账款、应收款项融资及合同资产周转率【次】' and item['类型'] == '企业':\n                receivables_turnover_2023 = float(item['2023'])\n                receivables_turnover_2024 = float(item['2024'])\n            elif item['项目名称'] == '营业收入增长率' and item['类型'] == '企业':\n                revenue_growth_rate_2024 = float(item['2024'])\n        \n        # 检查数据是否完整\n        if any(x is None for x in [inventory_turnover_2023, inventory_turnover_2024, \n                                  receivables_turnover_2023, receivables_turnover_2024, \n                                  revenue_growth_rate_2024]):\n            return False\n        \n        # 验证风险条件\n        condition1 = inventory_turnover_2024 < inventory_turnover_2023  # 存货周转率降低\n        condition2 = receivables_turnover_2024 > receivables_turnover_2023  # 应收账款周转率提高\n        condition3 = revenue_growth_rate_2024 > 20  # 营业收入增长率超过20%\n        \n        return condition1 and condition2 and condition3\n        \n    except (KeyError, TypeError, ValueError, IndexError):\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "少结转主营业务成本",
    "risk_description": "本年企业销售毛利增长率比营业收入增长率高10个百分点以上，存货增长超过15%。（模型公式编号：191101044）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 提取所需的企业数据\n        sales_profit_growth = None\n        revenue_growth = None\n        inventory_growth = None\n        \n        for item in model_items:\n            if item.get('项目名称') == '销售毛利增长率' and item.get('类型') == '企业':\n                sales_profit_growth = item.get('2024')\n            elif item.get('项目名称') == '营业收入增长率' and item.get('类型') == '企业':\n                revenue_growth = item.get('2024')\n            elif item.get('项目名称') == '存货增长率' and item.get('类型') == '企业':\n                inventory_growth = item.get('2024')\n        \n        # 检查数据是否完整\n        if sales_profit_growth is None or revenue_growth is None or inventory_growth is None:\n            return False\n        \n        # 转换为数值类型\n        sales_profit_growth_val = float(sales_profit_growth)\n        revenue_growth_val = float(revenue_growth)\n        inventory_growth_val = float(inventory_growth)\n        \n        # 验证风险条件\n        condition1 = (sales_profit_growth_val - revenue_growth_val) > 10\n        condition2 = inventory_growth_val > 15\n        \n        # 两个条件同时满足时存在风险\n        return condition1 and condition2\n        \n    except (ValueError, TypeError, AttributeError, KeyError):\n        # 处理所有可能的异常情况\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "少结转主营业务成本",
    "risk_description": "本年企业应收账款周转率与存货周转率均不到行业均值的90%，毛利率比行业均值高10个百分点以上。（模型公式编号：191101045）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n            \n        # 提取所需数据\n        ar_turnover_company = None\n        ar_turnover_industry = None\n        inventory_turnover_company = None\n        inventory_turnover_industry = None\n        gross_margin_company = None\n        gross_margin_industry = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', None)\n            \n            if value_2024 is None:\n                continue\n                \n            try:\n                value = float(value_2024)\n            except (ValueError, TypeError):\n                continue\n                \n            if '应收票据、应收账款、应收款项融资及合同资产周转率' in item_name:\n                if item_type == '企业':\n                    ar_turnover_company = value\n                elif item_type == '行业':\n                    ar_turnover_industry = value\n                    \n            elif '存货周转率' in item_name:\n                if item_type == '企业':\n                    inventory_turnover_company = value\n                elif item_type == '行业':\n                    inventory_turnover_industry = value\n                    \n            elif '销售毛利率' in item_name:\n                if item_type == '企业':\n                    gross_margin_company = value\n                elif item_type == '行业':\n                    gross_margin_industry = value\n        \n        # 检查数据完整性\n        if (ar_turnover_company is None or ar_turnover_industry is None or\n            inventory_turnover_company is None or inventory_turnover_industry is None or\n            gross_margin_company is None or gross_margin_industry is None):\n            return False\n        \n        # 验证风险条件\n        condition1 = ar_turnover_company < ar_turnover_industry * 0.9\n        condition2 = inventory_turnover_company < inventory_turnover_industry * 0.9\n        condition3 = gross_margin_company > gross_margin_industry + 10\n        \n        return condition1 and condition2 and condition3\n        \n    except Exception as e:\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "少结转主营业务成本",
    "risk_description": "本年企业存货增长率超过营业成本增长率的1.2倍，存货期末余额超过营业成本的1.2倍。（模型公式编号：210601002）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 从data_dict中获取model_items\n        model_items = data_dict['model_items']\n        \n        # 初始化所需变量\n        inventory_growth_rate = None\n        cost_growth_rate = None\n        inventory_balance = None\n        operating_cost = None\n        \n        # 提取企业数据\n        for item in model_items:\n            if item['类型'] == '企业':\n                if item['项目名称'] == '存货增长率':\n                    inventory_growth_rate = float(item['2024'])\n                elif item['项目名称'] == '营业成本增长率':\n                    cost_growth_rate = float(item['2024'])\n                elif item['项目名称'] == '存货':\n                    inventory_balance = float(item['2024'].replace(',', ''))\n                elif item['项目名称'] == '营业成本':\n                    operating_cost = float(item['2024'].replace(',', ''))\n        \n        # 检查数据是否完整\n        if None in [inventory_growth_rate, cost_growth_rate, inventory_balance, operating_cost]:\n            return False\n        \n        # 验证风险条件\n        condition1 = inventory_growth_rate > cost_growth_rate * 1.2\n        condition2 = inventory_balance > operating_cost * 1.2\n        \n        # 两个条件同时满足时返回True\n        return condition1 and condition2\n        \n    except (KeyError, ValueError, TypeError, AttributeError):\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "与供应商存在潜在关联关系",
    "risk_description": "本年企业销售商品、提供劳务收到的现金超过含税营业收入，应付票据及应付账款增长，或减少不到10%。（模型公式编号：191101025）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict['model_items']\n        \n        # 初始化所需变量\n        cash_received = None\n        operating_revenue_2024 = None\n        payables_growth_rate = None\n        \n        # 提取所需数据\n        for item in model_items:\n            if item['项目名称'] == '销售商品、提供劳务收到的现金' and item['类型'] == '企业':\n                cash_received = float(item['2024'].replace(',', ''))\n            elif item['项目名称'] == '营业收入' and item['类型'] == '企业':\n                operating_revenue_2024 = float(item['2024'].replace(',', ''))\n            elif item['项目名称'] == '应付票据及应付账款增长率' and item['类型'] == '企业':\n                payables_growth_rate = float(item['2024'])\n        \n        # 检查数据完整性\n        if cash_received is None or operating_revenue_2024 is None or payables_growth_rate is None:\n            return False\n        \n        # 计算含税营业收入（营业收入 × 1.13）\n        tax_included_revenue = operating_revenue_2024 * 1.13\n        \n        # 验证风险条件\n        condition1 = cash_received > tax_included_revenue\n        condition2 = payables_growth_rate >= -10.0\n        \n        # 同时满足两个条件则存在风险\n        return condition1 and condition2\n        \n    except (ValueError, TypeError, KeyError):\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "货币资金错报",
    "risk_description": "本年企业货币资金超过5000万元，货币资金占资产总计的比重超过行业均值，利息收入占本年货币资金平均余额的比例不到1%。（模型公式编号：191101073）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        cash_2023 = None\n        cash_2024 = None\n        cash_ratio_company_2024 = None\n        cash_ratio_industry_2024 = None\n        interest_income_2024 = None\n        \n        # 提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称')\n            item_type = item.get('类型')\n            \n            if item_name == '货币资金' and item_type == '企业':\n                cash_2023 = float(item.get('2023', '0').replace(',', '')) if item.get('2023') else None\n                cash_2024 = float(item.get('2024', '0').replace(',', '')) if item.get('2024') else None\n            \n            elif item_name == '货币资金占资产总计比(%)' and item_type == '企业':\n                cash_ratio_company_2024 = float(item.get('2024', '0')) if item.get('2024') else None\n            \n            elif item_name == '货币资金占资产总计比(%)' and item_type == '行业':\n                cash_ratio_industry_2024 = float(item.get('2024', '0')) if item.get('2024') else None\n            \n            elif item_name == '利息收入' and item_type == '企业':\n                interest_income_2024 = float(item.get('2024', '0').replace(',', '')) if item.get('2024') else None\n        \n        # 检查数据完整性\n        if None in [cash_2023, cash_2024, cash_ratio_company_2024, cash_ratio_industry_2024, interest_income_2024]:\n            return False\n        \n        # 条件1: 本年货币资金超过5000万元\n        condition1 = cash_2024 > 50000000\n        \n        # 条件2: 货币资金占资产总计比重超过行业均值\n        condition2 = cash_ratio_company_2024 > cash_ratio_industry_2024\n        \n        # 条件3: 利息收入占货币资金平均余额比例不到1%\n        avg_cash_balance = (cash_2023 + cash_2024) / 2\n        interest_ratio = interest_income_2024 / avg_cash_balance if avg_cash_balance != 0 else 0\n        condition3 = interest_ratio < 0.01\n        \n        # 所有条件同时满足时存在风险\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, ZeroDivisionError):\n        return False\n    except Exception as e:\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "违规资金收付",
    "risk_description": "本年企业收到的其他与经营活动有关的现金占经营活动现金流入小计的比重高于行业总体样本中85%的企业。（模型公式编号：191101075）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取企业数据和行业数据\n        enterprise_data = None\n        industry_data = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_type == '企业' and '收到其他与经营活动有关的现金占经营活动现金流入小计比(%)' in item_name:\n                enterprise_value = item.get('2024')\n                if enterprise_value is not None:\n                    enterprise_data = float(enterprise_value)\n            \n            elif item_type == '行业' and '收到其他与经营活动有关的现金占经营活动现金流入小计比的85分位数值' in item_name:\n                industry_value = item.get('2024')\n                if industry_value is not None:\n                    industry_data = float(industry_value)\n        \n        # 检查数据是否完整\n        if enterprise_data is None or industry_data is None:\n            return False\n        \n        # 验证风险条件：企业指标值 > 行业85分位数值\n        risk_exists = enterprise_data > industry_data\n        \n        return bool(risk_exists)\n        \n    except (ValueError, TypeError, KeyError, AttributeError) as e:\n        # 处理所有可能的异常情况\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "违规资金收付",
    "risk_description": "以前少计、本年多计成本或费用",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 检查数据是否足够\n        if len(model_items) < 2:\n            return False\n        \n        # 提取利息费用和债务数据\n        interest_expense_data = None\n        debt_data = None\n        \n        for item in model_items:\n            if item.get('项目名称') == '利息费用' and item.get('类型') == '企业':\n                interest_expense_data = item\n            elif item.get('项目名称') == '短长期债务' and item.get('类型') == '企业':\n                debt_data = item\n        \n        # 检查必要数据是否存在\n        if not interest_expense_data or not debt_data:\n            return False\n        \n        # 提取具体数值并转换为浮点数\n        interest_2023 = float(interest_expense_data.get('2023', '0').replace(',', ''))\n        interest_2024 = float(interest_expense_data.get('2024', '0').replace(',', ''))\n        debt_2023 = float(debt_data.get('2023', '0').replace(',', ''))\n        debt_2024 = float(debt_data.get('2024', '0').replace(',', ''))\n        \n        # 检查数据有效性\n        if interest_2023 == 0 or debt_2023 == 0:\n            return False\n        \n        # 计算利息费用占债务比率\n        ratio_2023 = interest_2023 / debt_2023\n        ratio_2024 = interest_2024 / debt_2024\n        \n        # 计算变化率\n        interest_change_rate = (interest_2024 - interest_2023) / interest_2023\n        debt_change_rate = (debt_2024 - debt_2023) / debt_2023\n        ratio_change_rate = (ratio_2024 - ratio_2023) / ratio_2023\n        \n        # 判断风险条件\n        # 利息费用大幅下降（超过50%）\n        interest_decline_significant = interest_change_rate < -0.5\n        \n        # 债务大幅上升（超过30%）\n        debt_increase_significant = debt_change_rate > 0.3\n        \n        # 利息费用占债务比率异常下降（超过50%）\n        ratio_decline_significant = ratio_change_rate < -0.5\n        \n        # 如果同时满足三个条件，则判断存在风险\n        if interest_decline_significant and debt_increase_significant and ratio_decline_significant:\n            return True\n        else:\n            return False\n            \n    except (ValueError, TypeError, ZeroDivisionError, AttributeError):\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "违规资金收付",
    "risk_description": "本年企业利息费用占“短长期债务”平均余额的比例比上年提高了3个百分点以上。（模型公式编号：191101085）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        interest_expense_2024 = None\n        interest_expense_2023 = None\n        short_term_debt_2024 = None\n        short_term_debt_2023 = None\n        long_term_debt_2024 = None\n        long_term_debt_2023 = None\n        \n        # 从model_items中提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            # 提取利息费用数据\n            if item_name == '利息费用' and item_type == '企业':\n                interest_expense_2024 = item.get('2024')\n                interest_expense_2023 = item.get('2023')\n            \n            # 提取短期债务数据\n            elif item_name == '短期债务' and item_type == '企业':\n                short_term_debt_2024 = item.get('2024')\n                short_term_debt_2023 = item.get('2023')\n            \n            # 提取长期债务数据\n            elif item_name == '长期债务' and item_type == '企业':\n                long_term_debt_2024 = item.get('2024')\n                long_term_debt_2023 = item.get('2023')\n        \n        # 检查所有必需数据是否存在\n        required_data = [\n            interest_expense_2024, interest_expense_2023,\n            short_term_debt_2024, short_term_debt_2023,\n            long_term_debt_2024, long_term_debt_2023\n        ]\n        \n        if any(data is None for data in required_data):\n            return False\n        \n        # 转换数据为数值类型\n        interest_expense_2024 = float(str(interest_expense_2024).replace(',', ''))\n        interest_expense_2023 = float(str(interest_expense_2023).replace(',', ''))\n        short_term_debt_2024 = float(str(short_term_debt_2024).replace(',', ''))\n        short_term_debt_2023 = float(str(short_term_debt_2023).replace(',', ''))\n        long_term_debt_2024 = float(str(long_term_debt_2024).replace(',', ''))\n        long_term_debt_2023 = float(str(long_term_debt_2023).replace(',', ''))\n        \n        # 计算短长期债务平均余额\n        avg_debt_2024 = (short_term_debt_2024 + long_term_debt_2024) / 2\n        avg_debt_2023 = (short_term_debt_2023 + long_term_debt_2023) / 2\n        \n        # 计算利息费用占比\n        if avg_debt_2024 != 0 and avg_debt_2023 != 0:\n            ratio_2024 = interest_expense_2024 / avg_debt_2024\n            ratio_2023 = interest_expense_2023 / avg_debt_2023\n            \n            # 检查比例变化是否超过3个百分点\n            ratio_change = (ratio_2024 - ratio_2023) * 100  # 转换为百分比\n            \n            return ratio_change > 3\n        else:\n            return False\n            \n    except (ValueError, TypeError, ZeroDivisionError):\n        return False"
  },
  {
    "company_name": "科大国盾量子技术股份有限公司",
    "risk_category": "投资收益或资产处置收益错报",
    "risk_description": "企业总资产周转率连续两年低于行业均值，“经营业务利润”连续两年为负，本年营业利润较上年增长。（模型公式编号：191101019）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据项\n        total_asset_turnover_enterprise_2023 = None\n        total_asset_turnover_enterprise_2024 = None\n        total_asset_turnover_industry = None\n        operating_profit_enterprise_2023 = None\n        operating_profit_enterprise_2024 = None\n        operating_profit_growth = None\n        \n        # 遍历所有项目数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_name == '总资产周转率':\n                if item_type == '企业':\n                    total_asset_turnover_enterprise_2023 = float(item.get('2023', 0))\n                    total_asset_turnover_enterprise_2024 = float(item.get('2024', 0))\n                elif item_type == '行业':\n                    total_asset_turnover_industry = float(item.get('2024', 0))  # 使用行业均值\n            \n            elif item_name == '经营业务利润':\n                if item_type == '企业':\n                    operating_profit_enterprise_2023 = float(item.get('2023', 0))\n                    operating_profit_enterprise_2024 = float(item.get('2024', 0))\n            \n            elif item_name == '营业利润增长率':\n                if item_type == '企业':\n                    operating_profit_growth = float(item.get('2024', 0))\n        \n        # 检查数据完整性\n        if (total_asset_turnover_enterprise_2023 is None or \n            total_asset_turnover_enterprise_2024 is None or \n            total_asset_turnover_industry is None or \n            operating_profit_enterprise_2023 is None or \n            operating_profit_enterprise_2024 is None or \n            operating_profit_growth is None):\n            return False\n        \n        # 验证风险条件\n        # 1. 总资产周转率连续两年低于行业均值\n        condition1 = (total_asset_turnover_enterprise_2023 < total_asset_turnover_industry and \n                     total_asset_turnover_enterprise_2024 < total_asset_turnover_industry)\n        \n        # 2. 经营业务利润连续两年为负\n        condition2 = (operating_profit_enterprise_2023 < 0 and \n                     operating_profit_enterprise_2024 < 0)\n        \n        # 3. 本年营业利润较上年增长\n        condition3 = operating_profit_growth > 0\n        \n        # 所有条件同时满足时存在风险\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, KeyError):\n        return False"
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "本年企业“每元固定资产提供的营业收入”超过上年的1.2倍，固定资产减少不到10%，营业收入增长超过20%。（模型公式编号：191101080）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据\n        revenue_per_fixed_asset_2023 = None\n        revenue_per_fixed_asset_2024 = None\n        fixed_asset_growth_2024 = None\n        revenue_growth_2024 = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_name == '每元固定资产及使用权资产提供的营业收入' and item_type == '企业':\n                revenue_per_fixed_asset_2023 = float(item.get('2023', 0))\n                revenue_per_fixed_asset_2024 = float(item.get('2024', 0))\n            \n            elif item_name == '固定资产及使用权资产增长率' and item_type == '企业':\n                fixed_asset_growth_2024 = float(item.get('2024', 0))\n            \n            elif item_name == '营业收入增长率' and item_type == '企业':\n                revenue_growth_2024 = float(item.get('2024', 0))\n        \n        # 检查数据完整性\n        if any(x is None for x in [revenue_per_fixed_asset_2023, revenue_per_fixed_asset_2024, \n                                  fixed_asset_growth_2024, revenue_growth_2024]):\n            return False\n        \n        # 验证三个条件\n        condition1 = revenue_per_fixed_asset_2024 > revenue_per_fixed_asset_2023 * 1.2\n        condition2 = fixed_asset_growth_2024 > -10  # 减少不到10%（增长率大于-10%）\n        condition3 = revenue_growth_2024 > 20\n        \n        # 三个条件必须同时满足\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, KeyError):\n        return False"
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业应收账款周转率降低，存货周转率提高，营业收入增长超过20%。（模型公式编号：191101035）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据\n        ar_turnover_data = None\n        inventory_turnover_data = None\n        revenue_growth_data = None\n        \n        for item in model_items:\n            name = item.get('项目名称', '')\n            if '应收票据、应收账款、应收款项融资及合同资产周转率' in name:\n                ar_turnover_data = item\n            elif '存货周转率' in name:\n                inventory_turnover_data = item\n            elif '营业收入增长率' in name:\n                revenue_growth_data = item\n        \n        # 检查数据完整性\n        if not all([ar_turnover_data, inventory_turnover_data, revenue_growth_data]):\n            return False\n        \n        # 获取具体数值\n        ar_turnover_2023 = float(ar_turnover_data.get('2023', 0))\n        ar_turnover_2024 = float(ar_turnover_data.get('2024', 0))\n        \n        inventory_turnover_2023 = float(inventory_turnover_data.get('2023', 0))\n        inventory_turnover_2024 = float(inventory_turnover_data.get('2024', 0))\n        \n        revenue_growth_2024 = float(revenue_growth_data.get('2024', 0))\n        \n        # 验证风险条件\n        condition1 = ar_turnover_2024 < ar_turnover_2023  # 应收账款周转率降低\n        condition2 = inventory_turnover_2024 > inventory_turnover_2023  # 存货周转率提高\n        condition3 = revenue_growth_2024 > 20.0  # 营业收入增长率超过20%\n        \n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, KeyError):\n        return False"
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "少结转主营业务成本",
    "risk_description": "本年企业销售毛利增长率比营业收入增长率高10个百分点以上，存货增长超过15%。（模型公式编号：191101044）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 从data_dict获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 检查数据是否足够\n        if len(model_items) < 3:\n            return False\n        \n        # 提取所需指标的企业数据\n        sales_profit_growth = None\n        revenue_growth = None\n        inventory_growth = None\n        \n        for item in model_items:\n            if item.get('项目名称') == '销售毛利增长率' and item.get('类型') == '企业':\n                sales_profit_growth = item.get('2024')\n            elif item.get('项目名称') == '营业收入增长率' and item.get('类型') == '企业':\n                revenue_growth = item.get('2024')\n            elif item.get('项目名称') == '存货增长率' and item.get('类型') == '企业':\n                inventory_growth = item.get('2024')\n        \n        # 检查是否有缺失数据\n        if None in [sales_profit_growth, revenue_growth, inventory_growth]:\n            return False\n        \n        # 转换为数值类型\n        sales_profit_growth = float(sales_profit_growth)\n        revenue_growth = float(revenue_growth)\n        inventory_growth = float(inventory_growth)\n        \n        # 验证风险条件\n        condition1 = (sales_profit_growth - revenue_growth) > 10\n        condition2 = inventory_growth > 15\n        \n        # 两个条件同时满足时触发风险\n        return condition1 and condition2\n        \n    except (ValueError, TypeError, KeyError):\n        return False"
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "货币资金错报",
    "risk_description": "本年企业货币资金超过“短长期债务”的5倍，股本无变动或增长不到1%，资本公积无变动或增长不到5%。（模型公式编号：191101103）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items列表\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        monetary_fund_2024 = None\n        short_long_debt_2024 = None\n        equity_growth_rate_2024 = None\n        capital_reserve_growth_rate_2024 = None\n        \n        # 遍历model_items提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', None)\n            \n            if value_2024 is None:\n                continue\n                \n            # 转换数值类型\n            try:\n                numeric_value = float(str(value_2024).replace(',', ''))\n            except (ValueError, TypeError):\n                continue\n            \n            # 根据项目名称匹配数据\n            if item_name == '货币资金' and item_type == '企业':\n                monetary_fund_2024 = numeric_value\n            elif item_name == '短长期债务' and item_type == '企业':\n                short_long_debt_2024 = numeric_value\n            elif item_name == '股本增长率' and item_type == '企业':\n                equity_growth_rate_2024 = numeric_value\n            elif item_name == '资本公积增长率' and item_type == '企业':\n                capital_reserve_growth_rate_2024 = numeric_value\n        \n        # 检查所有必需数据是否都存在\n        if (monetary_fund_2024 is None or short_long_debt_2024 is None or \n            equity_growth_rate_2024 is None or capital_reserve_growth_rate_2024 is None):\n            return False\n        \n        # 应用风险判断条件\n        condition1 = monetary_fund_2024 > short_long_debt_2024 * 5\n        condition2 = equity_growth_rate_2024 <= 1.0\n        condition3 = capital_reserve_growth_rate_2024 <= 5.0\n        \n        # 所有条件都满足时返回True（存在风险）\n        return condition1 and condition2 and condition3\n        \n    except Exception as e as e:\n        # 处理任何异常情况，默认返回False\n        return False"
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "违规资金收付",
    "risk_description": "本年企业收到的其他与经营活动有关的现金占经营活动现金流入小计的比重高于行业总体样本中85%的企业。（模型公式编号：191101075）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取企业和行业数据\n        enterprise_value = None\n        industry_percentile = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            # 获取企业本年值\n            if item_type == '企业' and '收到其他与经营活动有关的现金占经营活动现金流入小计比(%)' in item_name:\n                enterprise_value = item.get('2024')\n                if enterprise_value is not None:\n                    enterprise_value = float(enterprise_value)\n            \n            # 获取行业85分位值（直接使用行业类型的数据点）\n            elif item_type == '行业' and '收到其他与经营活动有关的现金占经营活动现金流入小计比(%)' in item_name:\n                industry_percentile = item.get('2024')\n                if industry_percentile is not None:\n                    industry_percentile = float(industry_percentile)\n        \n        # 检查数据完整性\n        if enterprise_value is None or industry_percentile is None:\n            return False\n        \n        # 验证风险条件：企业值高于行业85分位值\n        return enterprise_value > industry_percentile\n        \n    except (ValueError, TypeError, KeyError, AttributeError):\n        return False"
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "少计成本或费用",
    "risk_description": "本年企业营业收入增长超过20%，“经营业务利润”增长率比营业收入增长率高30个百分点以上。（模型公式编号：191101010）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 提取所需数据\n        revenue_growth = None\n        profit_growth = None\n        \n        for item in model_items:\n            if item.get('项目名称') == '营业收入增长率' and item.get('类型') == '企业':\n                revenue_growth = float(item.get('2024', 0))\n            elif item.get('项目名称') == '经营业务利润增长率' and item.get('类型') == '企业':\n                profit_growth = float(item.get('2024', 0))\n        \n        # 检查数据是否完整\n        if revenue_growth is None or profit_growth is None:\n            return False\n        \n        # 应用风险判断条件\n        condition1 = revenue_growth > 20\n        condition2 = (profit_growth - revenue_growth) > 30\n        \n        return condition1 and condition2\n        \n    except (ValueError, TypeError, AttributeError, KeyError):\n        return False"
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "少计成本或费用",
    "risk_description": "企业总资产周转率连续两年不到行业均值的90%，本年毛利率超过行业均值的1.1倍，本年营业利润为正，且较上年增长。（模型公式编号：191101051）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        model_items = data_dict['model_items']\n        \n        # 提取企业数据\n        company_data = {}\n        industry_data = {}\n        \n        for item in model_items:\n            name = item['项目名称']\n            type_ = item['类型']\n            \n            if type_ == '企业':\n                if name not in company_data:\n                    company_data[name] = {}\n                company_data[name]['2023'] = float(item['2023'].replace(',', '')) if item['2023'] else None\n                company_data[name]['2024'] = float(item['2024'].replace(',', '')) if item['2024'] else None\n            elif type_ == '行业':\n                if name not in industry_data:\n                    industry_data[name] = {}\n                industry_data[name]['2023'] = float(item['2023'].replace(',', '')) if item['2023'] else None\n                industry_data[name]['2024'] = float(item['2024'].replace(',', '')) if item['2024'] else None\n        \n        # 检查必要数据是否存在\n        required_fields = ['总资产周转率', '销售毛利率', '营业利润', '营业利润增长率']\n        for field in required_fields:\n            if field not in company_data or field not in industry_data:\n                return False\n        \n        # 条件1: 企业总资产周转率连续两年不到行业均值的90%\n        industry_turnover_2023 = industry_data['总资产周转率']['2023']\n        industry_turnover_2024 = industry_data['总资产周转率']['2024']\n        company_turnover_2023 = company_data['总资产周转率']['2023']\n        company_turnover_2024 = company_data['总资产周转率']['2024']\n        \n        condition1 = (company_turnover_2023 < industry_turnover_2023 * 0.9 and \n                     company_turnover_2024 < industry_turnover_2024 * 0.9)\n        \n        # 条件2: 本年毛利率超过行业均值的1.1倍\n        industry_gross_margin_2024 = industry_data['销售毛利率']['2024']\n        company_gross_margin_2024 = company_data['销售毛利率']['2024']\n        condition2 = company_gross_margin_2024 > industry_gross_margin_2024 * 1.1\n        \n        # 条件3: 本年营业利润为正\n        company_operating_profit_2024 = company_data['营业利润']['2024']\n        condition3 = company_operating_profit_2024 > 0\n        \n        # 条件4: 本年营业利润较上年增长\n        company_operating_profit_2023 = company_data['营业利润']['2023']\n        company_profit_growth_rate_2024 = company_data['营业利润增长率']['2024']\n        \n        # 使用增长率数据或直接计算增长率\n        if company_profit_growth_rate_2024 is not None:\n            condition4 = company_profit_growth_rate_2024 > 0\n        else:\n            condition4 = company_operating_profit_2024 > company_operating_profit_2023\n        \n        # 所有条件都必须满足才存在风险\n        return condition1 and condition2 and condition3 and condition4\n        \n    except (KeyError, TypeError, ValueError, AttributeError):\n        return False"
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "与关联方易货交易",
    "risk_description": "本年企业销售商品、提供劳务收到的现金不到含税营业收入的80%，应付票据及应付账款减少，或增长不到10%。（模型公式编号：191101022）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items列表\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需变量\n        revenue_2024 = None\n        cash_received_2024 = None\n        payable_growth_2024 = None\n        \n        # 遍历model_items提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', None)\n            \n            if value_2024 is None:\n                continue\n                \n            # 转换数值类型\n            try:\n                numeric_value = float(str(value_2024).replace(',', ''))\n            except (ValueError, TypeError):\n                continue\n            \n            if item_name == '营业收入' and item_type == '企业':\n                revenue_2024 = numeric_value\n            \n            elif item_name == '销售商品、提供劳务收到的现金' and item_type == '企业':\n                cash_received_2024 = numeric_value\n            \n            elif item_name == '应付票据及应付账款增长率' and item_type == '企业':\n                payable_growth_2024 = numeric_value\n        \n        # 检查数据是否完整\n        if revenue_2024 is None or cash_received_2024 is None or payable_growth_2024 is None:\n            return False\n        \n        # 计算含税营业收入（假设税率为13%）\n        tax_rate = 0.13\n        revenue_with_tax = revenue_2024 * (1 + tax_rate)\n        \n        # 条件1：本年销售商品、提供劳务收到的现金 < 本年含税营业收入的80%\n        condition1 = cash_received_2024 < revenue_with_tax * 0.8\n        \n        # 条件2：本年应付票据及应付账款增长率 < 10% 或 应付票据及应付账款减少（负增长）\n        condition2 = payable_growth_2024 < 10\n        \n        # 两个条件都满足时存在风险\n        return condition1 and condition2\n        \n    except Exception as e:\n        return False"
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "与关联方易货交易",
    "risk_description": "企业销售商品、提供劳务收到的现金连续两年不到含税营业收入的80%，本年应付票据及应付账款减少，或增长不到10%。（模型公式编号：191101024）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取数据项\n        model_items = data_dict['model_items']\n        \n        # 提取所需数据\n        revenue_data = {}\n        cash_received_data = {}\n        payables_growth_data = {}\n        \n        for item in model_items:\n            name = item['项目名称']\n            item_type = item['类型']\n            \n            if name == '营业收入' and item_type == '企业':\n                revenue_data['2023'] = float(item['2023'].replace(',', '')) if item['2023'] else None\n                revenue_data['2024'] = float(item['2024'].replace(',', '')) if item['2024'] else None\n            \n            elif name == '销售商品、提供劳务收到的现金' and item_type == '企业':\n                cash_received_data['2023'] = float(item['2023'].replace(',', '')) if item['2023'] else None\n                cash_received_data['2024'] = float(item['2024'].replace(',', '')) if item['2024'] else None\n            \n            elif name == '应付票据及应付账款增长率' and item_type == '企业':\n                payables_growth_data['2024'] = float(item['2024']) if item['2024'] else None\n        \n        # 检查数据完整性\n        if (revenue_data.get('2023') is None or revenue_data.get('2024') is None or\n            cash_received_data.get('2023') is None or cash_received_data.get('2024') is None or\n            payables_growth_data.get('2024') is None):\n            return False\n        \n        # 假设增值税税率为13%（根据中国现行标准税率）\n        tax_rate = 0.13\n        \n        # 计算含税营业收入\n        taxable_revenue_2023 = revenue_data['2023'] * (1 + tax_rate)\n        taxable_revenue_2024 = revenue_data['2024'] * (1 + tax_rate)\n        \n        # 条件1：连续两年销售商品、提供劳务收到的现金 < 含税营业收入的80%\n        condition1_2023 = cash_received_data['2023'] < taxable_revenue_2023 * 0.8\n        condition1_2024 = cash_received_data['2024'] < taxable_revenue_2024 * 0.8\n        \n        # 条件2：本年应付票据及应付账款减少或增长不到10%\n        condition2 = payables_growth_data['2024'] < 10\n        \n        # 判断风险：两个条件都满足时存在风险\n        risk_exists = condition1_2023 and condition1_2024 and condition2\n        \n        return bool(risk_exists)\n        \n    except (KeyError, ValueError, TypeError, AttributeError):\n        return False"
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "信用或资产减值损失错报",
    "risk_description": "本年企业资产减值损失为负值，上年为正值；或本年为正值，上年为负值。（注：由于利润表格式的变化，请自行确认该值系统取数正负号是否正确。）（模型公式编号：210601008）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取企业资产减值损失数据\n        current_year_val = None\n        previous_year_val = None\n        \n        for item in model_items:\n            if item.get('项目名称') == '资产减值损失' and item.get('类型') == '企业':\n                # 获取2024年（本年）数据\n                current_val_str = item.get('2024', '').replace(',', '')\n                if current_val_str and current_val_str != '':\n                    current_year_val = float(current_val_str)\n                \n                # 获取2023年（上年）数据\n                previous_val_str = item.get('2023', '').replace(',', '')\n                if previous_val_str and previous_val_str != '':\n                    previous_year_val = float(previous_val_str)\n                \n                break\n        \n        # 检查数据是否存在\n        if current_year_val is None or previous_year_val is None:\n            return False\n        \n        # 判断风险条件：本年与上年符号相反\n        if (current_year_val < 0 and previous_year_val > 0) or (current_year_val > 0 and previous_year_val < 0):\n            return True\n        else:\n            return False\n            \n    except (ValueError, TypeError, AttributeError):\n        return False\n    except Exception as e:\n        return False"
  },
  {
    "company_name": "扬州海昌新材股份有限公司",
    "risk_category": "信用或资产减值损失错报",
    "risk_description": "本年企业存货增长超过10%，存货周转率较上年提高，本年存货周转率高于行业总体样本中85%的企业。（模型公式编号：191101048）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        model_items = data_dict.get('model_items', [])\n        \n        # 提取所需数据\n        inventory_growth_rate_2024 = None\n        inventory_turnover_2023 = None\n        inventory_turnover_2024 = None\n        industry_turnover_2024 = None\n        \n        for item in model_items:\n            if item['项目名称'] == '存货增长率' and item['类型'] == '企业':\n                inventory_growth_rate_2024 = float(item['2024'])\n            elif item['项目名称'] == '存货周转率【次】' and item['类型'] == '企业':\n                inventory_turnover_2023 = float(item['2023'])\n                inventory_turnover_2024 = float(item['2024'])\n            elif item['项目名称'] == '存货周转率【次】' and item['类型'] == '行业':\n                industry_turnover_2024 = float(item['2024'])\n        \n        # 检查数据完整性\n        if any(x is None for x in [inventory_growth_rate_2024, inventory_turnover_2023, \n                                  inventory_turnover_2024, industry_turnover_2024]):\n            return False\n        \n        # 验证风险条件\n        condition1 = inventory_growth_rate_2024 > 10\n        condition2 = inventory_turnover_2024 > inventory_turnover_2023\n        condition3 = inventory_turnover_2024 > industry_turnover_2024\n        \n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, KeyError):\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "虚增营业收入",
    "risk_description": "本年企业应收账款周转率和存货周转率之比超过5，比行业均值之比大2。（模型公式编号：231201007）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        model_items = data_dict['model_items']\n        \n        # 提取所需数据\n        enterprise_ar_turnover = None\n        enterprise_inventory_turnover = None\n        industry_ar_turnover = None\n        industry_inventory_turnover = None\n        \n        for item in model_items:\n            if item['项目名称'] == '应收票据、应收账款、应收款项融资及合同资产周转率【次】':\n                if item['类型'] == '企业':\n                    enterprise_ar_turnover = float(item['2024'])\n                elif item['类型'] == '行业':\n                    industry_ar_turnover = float(item['2024'])\n            \n            elif item['项目名称'] == '存货周转率【次】':\n                if item['类型'] == '企业':\n                    enterprise_inventory_turnover = float(item['2024'])\n                elif item['类型'] == '行业':\n                    industry_inventory_turnover = float(item['2024'])\n        \n        # 检查数据完整性\n        if (enterprise_ar_turnover is None or enterprise_inventory_turnover is None or \n            industry_ar_turnover is None or industry_inventory_turnover is None):\n            return False\n        \n        # 计算企业两周转率之比\n        enterprise_ratio = enterprise_ar_turnover / enterprise_inventory_turnover\n        \n        # 计算行业两周转率之比\n        industry_ratio = industry_ar_turnover / industry_inventory_turnover\n        \n        # 验证风险条件\n        condition1 = enterprise_ratio > 5\n        condition2 = (enterprise_ratio - industry_ratio) > 2\n        \n        return condition1 and condition2\n        \n    except (KeyError, TypeError, ValueError, ZeroDivisionError):\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业营业收入增长超过20%，且高于销售商品和提供劳务收到的现金增长率的1.1倍，行业营业收入增长率均值低于销售商品和提供劳务收到的现金增长率均值。（模型公式编号：191101003）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 从data_dict获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 初始化所需变量\n        ent_rev_growth_2024 = None\n        ent_cash_growth_2024 = None\n        ind_rev_growth_mean = None\n        ind_cash_growth_mean = None\n        \n        # 遍历所有项目提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            # 提取企业2024年营业收入增长率\n            if item_name == '营业收入增长率' and item_type == '企业':\n                ent_rev_growth_2024 = float(item.get('2024', 0))\n            \n            # 提取企业2024年销售商品、提供劳务收到的现金增长率\n            elif item_name == '销售商品、提供劳务收到的现金增长率' and item_type == '企业':\n                ent_cash_growth_2024 = float(item.get('2024', 0))\n            \n            # 提取行业营业收入增长率均值（直接使用行业类型的数据点）\n            elif item_name == '营业收入增长率' and item_type == '行业':\n                ind_rev_growth_mean = float(item.get('2024', 0))\n            \n            # 提取行业销售商品、提供劳务收到的现金增长率均值（直接使用行业类型的数据点）\n            elif item_name == '销售商品、提供劳务收到的现金增长率' and item_type == '行业':\n                ind_cash_growth_mean = float(item.get('2024', 0))\n        \n        # 检查所有必需数据是否都存在\n        if None in [ent_rev_growth_2024, ent_cash_growth_2024, ind_rev_growth_mean, ind_cash_growth_mean]:\n            return False\n        \n        # 应用风险判断条件\n        condition1 = ent_rev_growth_2024 > 20  # 企业本年营业收入增长率 > 20%\n        condition2 = ent_rev_growth_2024 > 1.1 * ent_cash_growth_2024  # 企业本年营业收入增长率 > 1.1 × 企业销售商品、提供劳务收到的现金增长率\n        condition3 = ind_rev_growth_mean < ind_cash_growth_mean  # 行业营业收入增长率均值 < 行业销售商品、提供劳务收到的现金增长率均值\n        \n        # 所有条件都满足时返回True（存在风险），否则返回False\n        return condition1 and condition2 and condition3\n        \n    except Exception as e as e:\n        # 处理任何可能的异常，返回False\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "提前确认营业收入",
    "risk_description": "本年企业营业收入增长超过20%，营业收入增长率超过销售商品和提供劳务收到的现金增长率的1.5倍。（模型公式编号：210101002）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items列表\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需指标的企业数据\n        revenue_growth_rate = None\n        cash_received_growth_rate = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_name == '营业收入增长率' and item_type == '企业':\n                revenue_growth_rate = item.get('2024')\n            elif item_name == '销售商品、提供劳务收到的现金增长率' and item_type == '企业':\n                cash_received_growth_rate = item.get('2024')\n        \n        # 检查数据是否存在\n        if revenue_growth_rate is None or cash_received_growth_rate is None:\n            return False\n        \n        # 转换为浮点数\n        revenue_growth = float(revenue_growth_rate)\n        cash_received_growth = float(cash_received_growth_rate)\n        \n        # 验证风险条件\n        condition1 = revenue_growth > 20.0\n        condition2 = revenue_growth > 1.5 * cash_received_growth\n        \n        return condition1 and condition2\n        \n    except (ValueError, TypeError, KeyError, AttributeError):\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "持续经营假设不合理",
    "risk_description": "企业经营活动产生的现金流量净额连续三年为负，本年营业利润较上年增长。（模型公式编号：191101053）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据\n        cash_flow_data = {}\n        profit_data = {}\n        \n        for item in model_items:\n            name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if name == '经营活动产生的现金流量净额' and item_type == '企业':\n                cash_flow_data['2023'] = float(item.get('2023', '0').replace(',', ''))\n                cash_flow_data['2024'] = float(item.get('2024', '0').replace(',', ''))\n                # 尝试获取2022年数据\n                cash_flow_data['2022'] = float(item.get('2022', '0').replace(',', ''))\n            \n            elif name == '营业利润增长率' and item_type == '企业':\n                # 尝试获取营业利润增长率数据\n                profit_data['2023'] = float(item.get('2023', '0').replace(',', ''))\n                profit_data['2024'] = float(item.get('2024', '0').replace(',', ''))\n        \n        # 检查数据完整性\n        if (len(cash_flow_data) < 3 or  # 需要2022-2024三年现金流量数据\n            len(profit_data) < 2):     # 需要2023-2024两年营业利润数据\n            return False\n        \n        # 验证条件1: 经营活动产生的现金流量净额连续三年为负\n        cash_flow_negative = (cash_flow_data['2022'] < 0 and \n                             cash_flow_data['2023'] < 0 and \n                             cash_flow_data['2024'] < 0)\n        \n        # 验证条件2: 本年（2024年）营业利润较上年（2023年）增长\n        profit_growth = profit_data['2024'] > profit_data['2023']\n        \n        # 两个条件同时满足时存在风险\n        return cash_flow_negative and profit_growth\n        \n    except (ValueError, TypeError, KeyError, AttributeError):\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "与供应商存在潜在关联关系",
    "risk_description": "本年企业不含税应付票据及应付账款超过存货，在建工程减少或增长不到10%，且应付票据及应付账款占总资产比重超过行业均值。（模型公式编号：191101101）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 提取所需数据项\n        enterprise_data = {}\n        industry_data = {}\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            # 提取企业数据\n            if item_type == '企业':\n                if item_name == '应付票据及应付账款（不含税）':\n                    enterprise_data['payables_2024'] = float(item.get('2024', '0').replace(',', ''))\n                elif item_name == '存货':\n                    enterprise_data['inventory_2024'] = float(item.get('2024', '0').replace(',', ''))\n                elif item_name == '在建工程':\n                    enterprise_data['construction_2024'] = float(item.get('2024', '0').replace(',', ''))\n                    enterprise_data['construction_2023'] = float(item.get('2023', '0').replace(',', ''))\n                elif item_name == '总资产':\n                    enterprise_data['total_assets_2024'] = float(item.get('2024', '0').replace(',', ''))\n            \n            # 提取行业数据\n            elif item_type == '行业':\n                if item_name == '行业平均应付票据及应付账款占总资产比重':\n                    industry_data['payables_ratio'] = float(item.get('2024', '0').replace(',', ''))\n        \n        # 检查数据完整性\n        required_enterprise_fields = ['payables_2024', 'inventory_2024', 'construction_2024', \n                                    'construction_2023', 'total_assets_2024']\n        required_industry_fields = ['payables_ratio']\n        \n        for field in required_enterprise_fields:\n            if field not in enterprise_data:\n                return False\n        \n        for field in required_industry_fields:\n            if field not in industry_data:\n                return False\n        \n        # 条件1: 本年企业不含税应付票据及应付账款 > 存货\n        condition1 = enterprise_data['payables_2024'] > enterprise_data['inventory_2024']\n        \n        # 条件2: 在建工程变化率 <= 10%\n        construction_change_rate = ((enterprise_data['construction_2024'] - enterprise_data['construction_2023']) / \n                                   abs(enterprise_data['construction_2023'])) * 100\n        condition2 = abs(construction_change_rate) <= 10\n        \n        # 条件3: 应付票据及应付账款占总资产比重 > 行业均值\n        payables_ratio_enterprise = (enterprise_data['payables_2024'] / enterprise_data['total_assets_2024']) * 100\n        condition3 = payables_ratio_enterprise > industry_data['payables_ratio']\n        \n        # 所有条件同时满足时存在风险\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, ZeroDivisionError, KeyError):\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "与供应商存在潜在关联关系",
    "risk_description": "本年企业应付账款占存货的比例高于行业总体样本中85%的企业。（模型公式编号：210601021）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化变量\n        enterprise_payable = None\n        enterprise_inventory = None\n        industry_85_percentile = None\n        \n        # 遍历所有项目数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', '')\n            \n            # 跳过空值\n            if not value_2024:\n                continue\n                \n            # 转换数值格式（去除逗号）\n            try:\n                numeric_value = float(str(value_2024).replace(',', ''))\n            except (ValueError, TypeError):\n                continue\n            \n            # 获取企业应付账款\n            if item_type == '企业' and item_name == '应付票据及应付账款':\n                enterprise_payable = numeric_value\n            \n            # 获取企业存货\n            elif item_type == '企业' and item_name == '存货':\n                enterprise_inventory = numeric_value\n            \n            # 获取行业85%分位值（直接使用行业类型的数据点）\n            elif item_type == '行业' and '应付账款占存货比例' in item_name:\n                industry_85_percentile = numeric_value\n        \n        # 检查数据完整性\n        if (enterprise_payable is None or enterprise_inventory is None or \n            industry_85_percentile is None or enterprise_inventory == 0):\n            return False\n        \n        # 计算企业应付账款占存货比例\n        enterprise_ratio = enterprise_payable / enterprise_inventory\n        \n        # 验证风险条件：企业比例高于行业85%分位值\n        return enterprise_ratio > industry_85_percentile\n        \n    except Exception as e as e:\n        # 处理所有可能的异常\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "货币资金错报",
    "risk_description": "本年企业货币资金超过5000万元，货币资金占资产总计的比重超过行业均值，利息收入占本年货币资金平均余额的比例不到1%。（模型公式编号：191101073）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 初始化所需数据变量\n        enterprise_cash = None\n        enterprise_total_assets = None\n        enterprise_interest_income = None\n        enterprise_avg_cash_balance = None\n        industry_cash_ratio = None\n        \n        # 从model_items中提取所需数据\n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            year_2024 = item.get('2024', None)\n            \n            if year_2024 is None:\n                continue\n                \n            try:\n                numeric_value = float(year_2024)\n            except (ValueError, TypeError):\n                continue\n            \n            # 提取企业货币资金\n            if item_name == '货币资金' and item_type == '企业':\n                enterprise_cash = numeric_value\n            \n            # 提取企业资产总计\n            elif item_name == '资产总计' and item_type == '企业':\n                enterprise_total_assets = numeric_value\n            \n            # 提取企业利息收入\n            elif item_name == '利息收入' and item_type == '企业':\n                enterprise_interest_income = numeric_value\n            \n            # 提取企业货币资金平均余额\n            elif item_name == '货币资金平均余额' and item_type == '企业':\n                enterprise_avg_cash_balance = numeric_value\n            \n            # 提取行业货币资金占资产总计的比重均值\n            elif item_name == '货币资金占资产总计的比重' and item_type == '行业':\n                industry_cash_ratio = numeric_value\n        \n        # 检查数据完整性\n        if (enterprise_cash is None or enterprise_total_assets is None or \n            enterprise_interest_income is None or enterprise_avg_cash_balance is None or \n            industry_cash_ratio is None):\n            return False\n        \n        # 条件1：本年企业货币资金 > 5000万元\n        condition1 = enterprise_cash > 5000\n        \n        # 条件2：货币资金占资产总计的比重 > 行业均值\n        cash_ratio = enterprise_cash / enterprise_total_assets\n        condition2 = cash_ratio > industry_cash_ratio\n        \n        # 条件3：利息收入占本年货币资金平均余额的比例 < 1%\n        interest_ratio = enterprise_interest_income / enterprise_avg_cash_balance\n        condition3 = interest_ratio < 0.01\n        \n        # 所有条件同时满足时存在风险\n        return condition1 and condition2 and condition3\n        \n    except Exception as e as e:\n        # 处理所有可能的异常情况\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "违规资金收付",
    "risk_description": "本年企业收到的其他与经营活动有关的现金占经营活动现金流入小计的比重高于行业总体样本中85%的企业。（模型公式编号：191101075）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取企业数据和行业数据\n        enterprise_data = {}\n        industry_data = {}\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            value_2024 = item.get('2024', '')\n            \n            if item_type == '企业':\n                enterprise_data[item_name] = value_2024\n            elif item_type == '行业':\n                industry_data[item_name] = value_2024\n        \n        # 检查必需的企业数据是否存在\n        required_enterprise_items = ['收到的其他与经营活动有关的现金', '经营活动现金流入小计']\n        for item in required_enterprise_items:\n            if item not in enterprise_data:\n                return False\n        \n        # 检查必需的行业数据是否存在\n        required_industry_item = '收到的其他与经营活动有关的现金占经营活动现金流入小计的分位数(85%)'\n        if required_industry_item not in industry_data:\n            return False\n        \n        # 提取并转换数值\n        other_operating_cash = float(str(enterprise_data['收到的其他与经营活动有关的现金']).replace(',', ''))\n        total_operating_cash_inflow = float(str(enterprise_data['经营活动现金流入小计']).replace(',', ''))\n        industry_percentile = float(str(industry_data[required_industry_item]).replace(',', ''))\n        \n        # 计算企业比率\n        enterprise_ratio = other_operating_cash / total_operating_cash_inflow\n        \n        # 验证风险条件\n        if enterprise_ratio > industry_percentile:\n            return True\n        else:\n            return False\n            \n    except (ValueError, ZeroDivisionError, TypeError):\n        return False\n    except Exception as e:\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "违规资金收付",
    "risk_description": "以前少计、本年多计成本或费用",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 检查数据是否足够\n        if len(model_items) < 1:\n            return False\n        \n        # 提取企业数据和行业数据\n        company_data = None\n        industry_data = None\n        \n        for item in model_items:\n            if item.get('类型') == '企业':\n                company_data = item\n            elif item.get('类型') == '行业':\n                industry_data = item\n        \n        # 检查必要数据是否存在\n        if not company_data or not industry_data:\n            return False\n        \n        # 获取2023年和2024年数据\n        value_2023 = company_data.get('2023')\n        value_2024 = company_data.get('2024')\n        industry_value = industry_data.get('2024')  # 使用行业2024年数据作为基准\n        \n        # 检查数据是否有效\n        if value_2023 is None or value_2024 is None or industry_value is None:\n            return False\n        \n        # 转换为数值类型\n        value_2023 = float(value_2023)\n        value_2024 = float(value_2024)\n        industry_value = float(industry_value)\n        \n        # 计算变化率\n        change_rate = (value_2024 - value_2023) / abs(value_2023) if value_2023 != 0 else 0\n        \n        # 风险判断条件：指标大幅下降（下降超过行业基准的20%）\n        # 且当前值低于行业平均水平\n        if change_rate < -0.2 and value_2024 < industry_value:\n            return True\n        else:\n            return False\n            \n    except (ValueError, TypeError, ZeroDivisionError, KeyError):\n        return False\n    except Exception as e:\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "违规资金收付",
    "risk_description": "本年企业管理费用占营业收入的比重较上年的变动值比行业的变动值高5个百分点。（模型公式编号：191101070）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取企业和行业数据\n        enterprise_data = {}\n        industry_data = {}\n        \n        for item in model_items:\n            if item.get('类型') == '企业':\n                enterprise_data = item\n            elif item.get('类型') == '行业':\n                industry_data = item\n        \n        # 检查数据完整性\n        if not enterprise_data or not industry_data:\n            return False\n        \n        # 获取具体数值\n        enterprise_2023 = float(enterprise_data.get('2023', 0))\n        enterprise_2024 = float(enterprise_data.get('2024', 0))\n        industry_2023 = float(industry_data.get('2023', 0))\n        industry_2024 = float(industry_data.get('2024', 0))\n        \n        # 计算变动值\n        enterprise_change = enterprise_2024 - enterprise_2023\n        industry_change = industry_2024 - industry_2023\n        \n        # 判断风险条件：企业变动值比行业变动值高5个百分点\n        risk_condition = (enterprise_change - industry_change) > 5\n        \n        return risk_condition\n        \n    except (KeyError, ValueError, TypeError) as e:\n        # 处理数据缺失或格式错误的情况\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "信用或资产减值损失错报",
    "risk_description": "本年企业在建工程较上年变动不超过10%，在建工程占资产总计的比重高于行业总体样本中85%的企业。（模型公式编号：210601022）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict.get('model_items', [])\n        if not model_items:\n            return False\n        \n        # 提取所需数据\n        growth_rate = None\n        enterprise_ratio = None\n        industry_ratio = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称', '')\n            item_type = item.get('类型', '')\n            \n            if item_name == '在建工程增长率' and item_type == '企业':\n                growth_rate = item.get('2024')\n            elif item_name == '在建工程占资产总计比(%)' and item_type == '企业':\n                enterprise_ratio = item.get('2024')\n            elif item_name == '在建工程占资产总计比(%)' and item_type == '行业':\n                industry_ratio = item.get('2024')\n        \n        # 检查数据完整性\n        if growth_rate is None or enterprise_ratio is None or industry_ratio is None:\n            return False\n        \n        # 转换为数值类型\n        growth_rate = float(growth_rate)\n        enterprise_ratio = float(enterprise_ratio)\n        industry_ratio = float(industry_ratio)\n        \n        # 条件1：本年企业在建工程较上年变动不超过10%\n        condition1 = abs(growth_rate) <= 10\n        \n        # 条件2：企业在建工程占资产总计的比重高于行业85%分位数\n        # 由于数据中只有行业平均值，我们使用行业平均值作为85%分位数的替代\n        condition2 = enterprise_ratio > industry_ratio\n        \n        # 两个条件同时满足时存在风险\n        return condition1 and condition2\n        \n    except (ValueError, TypeError, KeyError):\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "投资收益或资产处置收益错报",
    "risk_description": "企业总资产周转率连续两年低于行业均值，“经营业务利润”连续两年为负，本年营业利润较上年增长。（模型公式编号：191101019）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 从data_dict中获取model_items数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 如果数据为空，返回False\n        if not model_items:\n            return False\n        \n        # 提取所需数据\n        tat_enterprise_2023 = None\n        tat_enterprise_2024 = None\n        tat_industry_2023 = None\n        tat_industry_2024 = None\n        operating_profit_2023 = None\n        operating_profit_2024 = None\n        profit_growth_2024 = None\n        \n        for item in model_items:\n            item_name = item.get('项目名称')\n            item_type = item.get('类型')\n            \n            if item_name == '总资产周转率':\n                if item_type == '企业':\n                    tat_enterprise_2023 = item.get('2023')\n                    tat_enterprise_2024 = item.get('2024')\n                elif item_type == '行业':\n                    tat_industry_2023 = item.get('2023')\n                    tat_industry_2024 = item.get('2024')\n            \n            elif item_name == '经营业务利润':\n                if item_type == '企业':\n                    operating_profit_2023 = item.get('2023')\n                    operating_profit_2024 = item.get('2024')\n            \n            elif item_name == '营业利润增长率':\n                if item_type == '企业':\n                    profit_growth_2024 = item.get('2024')\n        \n        # 检查数据完整性\n        if (tat_enterprise_2023 is None or tat_enterprise_2024 is None or \n            tat_industry_2023 is None or tat_industry_2024 is None or \n            operating_profit_2023 is None or operating_profit_2024 is None or \n            profit_growth_2024 is None):\n            return False\n        \n        # 转换数据类型\n        tat_enterprise_2023 = float(tat_enterprise_2023)\n        tat_enterprise_2024 = float(tat_enterprise_2024)\n        tat_industry_2023 = float(tat_industry_2023)\n        tat_industry_2024 = float(tat_industry_2024)\n        \n        # 处理经营业务利润中的逗号分隔符\n        operating_profit_2023 = float(operating_profit_2023.replace(',', '')) if ',' in str(operating_profit_2023) else float(operating_profit_2023)\n        operating_profit_2024 = float(operating_profit_2024.replace(',', '')) if ',' in str(operating_profit_2024) else float(operating_profit_2024)\n        \n        profit_growth_2024 = float(profit_growth_2024)\n        \n        # 验证风险条件\n        condition1 = (tat_enterprise_2023 < tat_industry_2023 and \n                     tat_enterprise_2024 < tat_industry_2024)\n        \n        condition2 = (operating_profit_2023 < 0 and \n                     operating_profit_2024 < 0)\n        \n        condition3 = profit_growth_2024 > 0\n        \n        # 所有条件都满足时返回True（存在风险）\n        return condition1 and condition2 and condition3\n        \n    except (ValueError, TypeError, AttributeError) as e:\n        # 处理数据转换错误或其他异常\n        return False"
  },
  {
    "company_name": "北京诺思兰德生物技术股份有限公司",
    "risk_category": "重大资产重组",
    "risk_description": "本年企业资产总计增长超过50%，或营业收入增长超过50%，或所有者权益合计增长超过50%。（模型公式编号：191101108）",
    "python_code": "import numpy as np\n\ndef check_risk(data_dict):\n    try:\n        # 获取模型项目数据\n        model_items = data_dict.get('model_items', [])\n        \n        # 检查必需字段是否存在\n        required_fields = ['资产总计增长率', '营业收入增长率', '所有者权益合计增长率']\n        available_fields = [item['项目名称'] for item in model_items]\n        \n        # 如果缺少必需字段，返回False\n        if not all(field in available_fields for field in required_fields):\n            return False\n        \n        # 提取企业数据\n        enterprise_data = {}\n        for item in model_items:\n            if item['类型'] == '企业':\n                enterprise_data[item['项目名称']] = item.get('2024')\n        \n        # 检查数据是否完整\n        for field in required_fields:\n            if field not in enterprise_data or enterprise_data[field] is None:\n                return False\n        \n        # 转换为数值类型\n        asset_growth = float(enterprise_data['资产总计增长率'])\n        revenue_growth = float(enterprise_data['营业收入增长率'])\n        equity_growth = float(enterprise_data['所有者权益合计增长率'])\n        \n        # 检查增长率是否超过50%\n        if (asset_growth > 50 or \n            revenue_growth > 50 or \n            equity_growth > 50):\n            return True\n        else:\n            return False\n            \n    except (ValueError, TypeError, KeyError):\n        return False\n    except Exception as e:\n        return False"
  }
]